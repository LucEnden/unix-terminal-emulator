!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.UnixTerminalEmulator=e():t.UnixTerminalEmulator=e()}(self,(()=>(()=>{"use strict";var t={28:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),i=n(645),a=n.n(i)()(o());a.push([t.id,"@keyframes terminal___cursor___fluid {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___fluid {\r\n\tanimation: terminal___cursor___fluid 1s infinite;\r\n}\r\n\r\n@keyframes terminal___cursor___static {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t39% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t40% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t59% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t60% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___static {\r\n\tanimation: terminal___cursor___static 1s infinite;\r\n}\r\n\r\n.terminal___cursor___none {\r\n\tanimation: none;\r\n}\r\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;CACC;EACC,aAAa;CACd;CACA;EACC,WAAW;CACZ;CACA;EACC,aAAa;CACd;AACD;AACA;CACC,gDAAgD;AACjD;;AAEA;CACC;EACC,aAAa;CACd;CACA;EACC,aAAa;CACd;CACA;EACC,WAAW;CACZ;CACA;EACC,WAAW;CACZ;CACA;EACC,aAAa;CACd;CACA;EACC,aAAa;CACd;AACD;AACA;CACC,iDAAiD;AAClD;;AAEA;CACC,eAAe;AAChB",sourcesContent:["@keyframes terminal___cursor___fluid {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___fluid {\r\n\tanimation: terminal___cursor___fluid 1s infinite;\r\n}\r\n\r\n@keyframes terminal___cursor___static {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t39% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t40% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t59% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t60% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___static {\r\n\tanimation: terminal___cursor___static 1s infinite;\r\n}\r\n\r\n.terminal___cursor___none {\r\n\tanimation: none;\r\n}\r\n"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(a[u]=!0)}for(var c=0;c<t.length;c++){var p=[].concat(t[c]);r&&a[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),e.push(p))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var u=t[s],c=r.base?u[0]+r.base:u[0],p=i[c]||0,l="".concat(c," ").concat(p);i[c]=p+1;var d=n(l),m={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)e[d].references++,e[d].updater(m);else{var f=o(m,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:f,references:1})}a.push(l)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var u=r(t,o),c=0;c<i.length;c++){var p=n(i[c]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}i=u}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0;var r={};return(()=>{n.d(r,{default:()=>E});var t=n(379),e=n.n(t),o=n(795),i=n.n(o),a=n(569),s=n.n(a),u=n(565),c=n.n(u),p=n(216),l=n.n(p),d=n(589),m=n.n(d),f=n(28),_={};function v(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function h(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?v(Object(n),!0).forEach((function(e){y(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function A(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function C(t,e,n){return e&&A(t.prototype,e),n&&A(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function y(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}_.styleTagTransform=m(),_.setAttributes=c(),_.insert=s().bind(null,"head"),_.domAPI=i(),_.insertStyleElement=l(),e()(f.Z,_),f.Z&&f.Z.locals&&f.Z.locals;var b=C((function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),y(this,"historyStack",[]),y(this,"eventQueue",[]),y(this,"options",{wrapperId:"terminal___emulator___wrapper",wrapperClassName:"terminal___emulator___wrapper",cursor:"|",cursorId:"terminal___emulator___cursor",cursorClassName:"terminal___emulator___cursor",cursorAnimation:"static",enviroment:void 0}),y(this,"HISTSIZE",500),y(this,"addCommand",(function(t){return n.eventQueue.push({delayAfter:0,command:t}),n})),y(this,"addCommands",(function(t){return t.forEach((function(t){n.eventQueue.push({delayAfter:0,command:t})})),n})),y(this,"pause",(function(t){return n.eventQueue.push({delayAfter:t}),n})),y(this,"echo",(function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"neutral",r=arguments.length>2?arguments[2]:void 0;return n.eventQueue.push({command:{text:"echo "+t,writeSpeed:e,output:t,pauseBeforeOutput:r}}),n})),y(this,"history",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"neutral",e=arguments.length>1?arguments[1]:void 0;return n.eventQueue.push({command:{text:"history",writeSpeed:t,output:n.getHistoryOutput,pauseBeforeOutput:e}}),n})),y(this,"getHistoryOutput",(function(){for(var t=[],e=0,r=n.historyStack.length;r>0;r--){var o="";if(r<10?o+="&nbsp;&nbsp;&nbsp;&nbsp;":r<100?o+="&nbsp;&nbsp;&nbsp;":r<1e3?o+="&nbsp;&nbsp;":r<1e4&&(o+="&nbsp;"),o+="".concat(r,"&nbsp;&nbsp;").concat(n.historyStack[r-1].text),t.push(o),++e>=n.HISTSIZE)break}return t.reverse().join("<br />")})),y(this,"run",(function(t){n.currentEvent=n.eventQueue.shift(),void 0!==n.currentEvent?void 0!==n.currentEvent.command?(n.historyStack.push(n.currentEvent.command),n.writeToStdout(n.currentEvent.command.text,n.currentEvent.command.writeSpeed,(function(){if(void 0!==n.currentEvent.command.output){var e;e="function"==typeof n.currentEvent.command.output?n.currentEvent.command.output():n.currentEvent.command.output,setTimeout((function(){n.removeCursor(),n.writeLineBreakToStdout(),n.writeToStdout(e,0,(function(){n.writeLineBreakToStdout(),n.writeEnviromentLineToStdout(),n.writeInputLineStartToStdout(),setTimeout((function(){n.appendCursor(),n.run(t)}),n.currentEvent.delayAfter)}))}),n.currentEvent.command.pauseBeforeOutput)}else n.writeLineBreakToStdout(),n.writeEnviromentLineToStdout(),n.writeInputLineStartToStdout(),setTimeout((function(){return n.run(t)}),n.currentEvent.delayAfter)}))):setTimeout((function(){n.run(t)}),n.currentEvent.delayAfter):void 0!==t&&t()})),y(this,"removeCursor",(function(){n.cursorElement.remove()})),y(this,"appendCursor",(function(){n.wrapperElement.appendChild(n.cursorElement)})),y(this,"getRandomIntegerInRange",(function(t,e){return Math.floor(Math.random()*(e-t+1)+t)})),y(this,"writeEnviromentLineToStdout",(function(){void 0!==n.options.enviroment&&n.options.enviroment.hostname.length>0&&n.options.enviroment.username.length>0&&(n.wrapperElement.innerHTML+=n.options.enviroment.username+"@"+n.options.enviroment.hostname+":")})),y(this,"writeInputLineStartToStdout",(function(){n.wrapperElement.innerHTML+="$ "})),y(this,"writeLineBreakToStdout",(function(){n.wrapperElement.innerHTML+="<br />"})),y(this,"writeToStdout",(function(t,e,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;0===e?(n.removeCursor(),n.wrapperElement.innerHTML+=t,r()):o<t.length?(n.removeCursor(),n.wrapperElement.innerHTML+=t[o],n.appendCursor(),o++,"neutral"===e?setTimeout((function(){return n.writeToStdout(t,e,r,o)}),n.getRandomIntegerInRange(80,120)):setTimeout((function(){return n.writeToStdout(t,e,r,o)}),e)):r()})),e&&(this.options=h(h({},this.options),e));var r=document.getElementById(this.options.wrapperId);switch(null===r&&((r=document.createElement("div")).id=this.options.wrapperId),this.options.wrapperClassName.length>0&&r.classList.add(this.options.wrapperClassName),this.wrapperElement=r,document.body.appendChild(this.wrapperElement),this.cursorElement=document.createElement("span"),this.cursorElement.id=this.options.cursorId,this.cursorElement.innerText=this.options.cursor,this.options.cursorAnimation){case"fluid":this.cursorElement.classList.add("terminal___cursor___fluid");break;case"static":this.cursorElement.classList.add("terminal___cursor___static");break;case void 0:this.cursorElement.classList.add("terminal___cursor___none")}this.cursorElement.classList.add(this.options.cursorClassName),this.writeEnviromentLineToStdout(),this.writeInputLineStartToStdout(),this.appendCursor()}));const E=b})(),r.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,