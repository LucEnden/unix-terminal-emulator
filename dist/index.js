!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.UnixTerminalEmulator=e():t.UnixTerminalEmulator=e()}(self,(()=>(()=>{var t={28:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(7537),o=r.n(n),i=r(3645),s=r.n(i)()(o());s.push([t.id,"@keyframes terminal___cursor___fluid {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___fluid {\r\n\tanimation: terminal___cursor___fluid 1s infinite;\r\n}\r\n\r\n@keyframes terminal___cursor___static {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t49% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t99% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___static {\r\n\tanimation: terminal___cursor___static 1s infinite;\r\n}\r\n\r\n.terminal___cursor___none {\r\n\tanimation: none;\r\n}\r\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;CACC;EACC,aAAa;CACd;CACA;EACC,WAAW;CACZ;CACA;EACC,aAAa;CACd;AACD;AACA;CACC,gDAAgD;AACjD;;AAEA;CACC;EACC,aAAa;CACd;CACA;EACC,aAAa;CACd;CACA;EACC,WAAW;CACZ;CACA;EACC,WAAW;CACZ;CACA;EACC,aAAa;CACd;AACD;AACA;CACC,iDAAiD;AAClD;;AAEA;CACC,eAAe;AAChB",sourcesContent:["@keyframes terminal___cursor___fluid {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___fluid {\r\n\tanimation: terminal___cursor___fluid 1s infinite;\r\n}\r\n\r\n@keyframes terminal___cursor___static {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t49% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t99% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___static {\r\n\tanimation: terminal___cursor___static 1s infinite;\r\n}\r\n\r\n.terminal___cursor___none {\r\n\tanimation: none;\r\n}\r\n"],sourceRoot:""}]);const a=s},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var u=this[a][0];null!=u&&(s[u]=!0)}for(var c=0;c<t.length;c++){var p=[].concat(t[c]);n&&s[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),r&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=r):p[2]=r),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),e.push(p))}},e}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */"),s=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([i]).join("\n")}return[e].join("\n")}},8282:(t,e,r)=>{var n=r(2354);t.exports={Graph:n.Graph,json:r(8974),alg:r(2440),version:n.version}},2842:(t,e,r)=>{var n=r(9126);t.exports=function(t){var e,r={},o=[];function i(o){n.has(r,o)||(r[o]=!0,e.push(o),n.each(t.successors(o),i),n.each(t.predecessors(o),i))}return n.each(t.nodes(),(function(t){e=[],i(t),e.length&&o.push(e)})),o}},3984:(t,e,r)=>{var n=r(9126);function o(t,e,r,i,s,a){n.has(i,e)||(i[e]=!0,r||a.push(e),n.each(s(e),(function(e){o(t,e,r,i,s,a)})),r&&a.push(e))}t.exports=function(t,e,r){n.isArray(e)||(e=[e]);var i=(t.isDirected()?t.successors:t.neighbors).bind(t),s=[],a={};return n.each(e,(function(e){if(!t.hasNode(e))throw new Error("Graph does not have node: "+e);o(t,e,"post"===r,a,i,s)})),s}},4847:(t,e,r)=>{var n=r(3763),o=r(9126);t.exports=function(t,e,r){return o.transform(t.nodes(),(function(o,i){o[i]=n(t,i,e,r)}),{})}},3763:(t,e,r)=>{var n=r(9126),o=r(9675);t.exports=function(t,e,r,n){return function(t,e,r,n){var i,s,a={},u=new o,c=function(t){var e=t.v!==i?t.v:t.w,n=a[e],o=r(t),c=s.distance+o;if(o<0)throw new Error("dijkstra does not allow negative edge weights. Bad edge: "+t+" Weight: "+o);c<n.distance&&(n.distance=c,n.predecessor=i,u.decrease(e,c))};t.nodes().forEach((function(t){var r=t===e?0:Number.POSITIVE_INFINITY;a[t]={distance:r},u.add(t,r)}));for(;u.size()>0&&(i=u.removeMin(),(s=a[i]).distance!==Number.POSITIVE_INFINITY);)n(i).forEach(c);return a}(t,String(e),r||i,n||function(e){return t.outEdges(e)})};var i=n.constant(1)},9096:(t,e,r)=>{var n=r(9126),o=r(5023);t.exports=function(t){return n.filter(o(t),(function(e){return e.length>1||1===e.length&&t.hasEdge(e[0],e[0])}))}},8924:(t,e,r)=>{var n=r(9126);t.exports=function(t,e,r){return function(t,e,r){var n={},o=t.nodes();return o.forEach((function(t){n[t]={},n[t][t]={distance:0},o.forEach((function(e){t!==e&&(n[t][e]={distance:Number.POSITIVE_INFINITY})})),r(t).forEach((function(r){var o=r.v===t?r.w:r.v,i=e(r);n[t][o]={distance:i,predecessor:t}}))})),o.forEach((function(t){var e=n[t];o.forEach((function(r){var i=n[r];o.forEach((function(r){var n=i[t],o=e[r],s=i[r],a=n.distance+o.distance;a<s.distance&&(s.distance=a,s.predecessor=o.predecessor)}))}))})),n}(t,e||o,r||function(e){return t.outEdges(e)})};var o=n.constant(1)},2440:(t,e,r)=>{t.exports={components:r(2842),dijkstra:r(3763),dijkstraAll:r(4847),findCycles:r(9096),floydWarshall:r(8924),isAcyclic:r(2707),postorder:r(8828),preorder:r(2648),prim:r(514),tarjan:r(5023),topsort:r(2166)}},2707:(t,e,r)=>{var n=r(2166);t.exports=function(t){try{n(t)}catch(t){if(t instanceof n.CycleException)return!1;throw t}return!0}},8828:(t,e,r)=>{var n=r(3984);t.exports=function(t,e){return n(t,e,"post")}},2648:(t,e,r)=>{var n=r(3984);t.exports=function(t,e){return n(t,e,"pre")}},514:(t,e,r)=>{var n=r(9126),o=r(771),i=r(9675);t.exports=function(t,e){var r,s=new o,a={},u=new i;function c(t){var n=t.v===r?t.w:t.v,o=u.priority(n);if(void 0!==o){var i=e(t);i<o&&(a[n]=r,u.decrease(n,i))}}if(0===t.nodeCount())return s;n.each(t.nodes(),(function(t){u.add(t,Number.POSITIVE_INFINITY),s.setNode(t)})),u.decrease(t.nodes()[0],0);var p=!1;for(;u.size()>0;){if(r=u.removeMin(),n.has(a,r))s.setEdge(r,a[r]);else{if(p)throw new Error("Input graph is not connected: "+t);p=!0}t.nodeEdges(r).forEach(c)}return s}},5023:(t,e,r)=>{var n=r(9126);t.exports=function(t){var e=0,r=[],o={},i=[];function s(a){var u=o[a]={onStack:!0,lowlink:e,index:e++};if(r.push(a),t.successors(a).forEach((function(t){n.has(o,t)?o[t].onStack&&(u.lowlink=Math.min(u.lowlink,o[t].index)):(s(t),u.lowlink=Math.min(u.lowlink,o[t].lowlink))})),u.lowlink===u.index){var c,p=[];do{c=r.pop(),o[c].onStack=!1,p.push(c)}while(a!==c);i.push(p)}}return t.nodes().forEach((function(t){n.has(o,t)||s(t)})),i}},2166:(t,e,r)=>{var n=r(9126);function o(t){var e={},r={},o=[];if(n.each(t.sinks(),(function s(a){if(n.has(r,a))throw new i;n.has(e,a)||(r[a]=!0,e[a]=!0,n.each(t.predecessors(a),s),delete r[a],o.push(a))})),n.size(e)!==t.nodeCount())throw new i;return o}function i(){}t.exports=o,o.CycleException=i,i.prototype=new Error},9675:(t,e,r)=>{var n=r(9126);function o(){this._arr=[],this._keyIndices={}}t.exports=o,o.prototype.size=function(){return this._arr.length},o.prototype.keys=function(){return this._arr.map((function(t){return t.key}))},o.prototype.has=function(t){return n.has(this._keyIndices,t)},o.prototype.priority=function(t){var e=this._keyIndices[t];if(void 0!==e)return this._arr[e].priority},o.prototype.min=function(){if(0===this.size())throw new Error("Queue underflow");return this._arr[0].key},o.prototype.add=function(t,e){var r=this._keyIndices;if(t=String(t),!n.has(r,t)){var o=this._arr,i=o.length;return r[t]=i,o.push({key:t,priority:e}),this._decrease(i),!0}return!1},o.prototype.removeMin=function(){this._swap(0,this._arr.length-1);var t=this._arr.pop();return delete this._keyIndices[t.key],this._heapify(0),t.key},o.prototype.decrease=function(t,e){var r=this._keyIndices[t];if(e>this._arr[r].priority)throw new Error("New priority is greater than current priority. Key: "+t+" Old: "+this._arr[r].priority+" New: "+e);this._arr[r].priority=e,this._decrease(r)},o.prototype._heapify=function(t){var e=this._arr,r=2*t,n=r+1,o=t;r<e.length&&(o=e[r].priority<e[o].priority?r:o,n<e.length&&(o=e[n].priority<e[o].priority?n:o),o!==t&&(this._swap(t,o),this._heapify(o)))},o.prototype._decrease=function(t){for(var e,r=this._arr,n=r[t].priority;0!==t&&!(r[e=t>>1].priority<n);)this._swap(t,e),t=e},o.prototype._swap=function(t,e){var r=this._arr,n=this._keyIndices,o=r[t],i=r[e];r[t]=i,r[e]=o,n[i.key]=t,n[o.key]=e}},771:(t,e,r)=>{"use strict";var n=r(9126);t.exports=i;var o="\0";function i(t){this._isDirected=!n.has(t,"directed")||t.directed,this._isMultigraph=!!n.has(t,"multigraph")&&t.multigraph,this._isCompound=!!n.has(t,"compound")&&t.compound,this._label=void 0,this._defaultNodeLabelFn=n.constant(void 0),this._defaultEdgeLabelFn=n.constant(void 0),this._nodes={},this._isCompound&&(this._parent={},this._children={},this._children["\0"]={}),this._in={},this._preds={},this._out={},this._sucs={},this._edgeObjs={},this._edgeLabels={}}function s(t,e){t[e]?t[e]++:t[e]=1}function a(t,e){--t[e]||delete t[e]}function u(t,e,r,o){var i=""+e,s=""+r;if(!t&&i>s){var a=i;i=s,s=a}return i+""+s+""+(n.isUndefined(o)?"\0":o)}function c(t,e,r,n){var o=""+e,i=""+r;if(!t&&o>i){var s=o;o=i,i=s}var a={v:o,w:i};return n&&(a.name=n),a}function p(t,e){return u(t,e.v,e.w,e.name)}i.prototype._nodeCount=0,i.prototype._edgeCount=0,i.prototype.isDirected=function(){return this._isDirected},i.prototype.isMultigraph=function(){return this._isMultigraph},i.prototype.isCompound=function(){return this._isCompound},i.prototype.setGraph=function(t){return this._label=t,this},i.prototype.graph=function(){return this._label},i.prototype.setDefaultNodeLabel=function(t){return n.isFunction(t)||(t=n.constant(t)),this._defaultNodeLabelFn=t,this},i.prototype.nodeCount=function(){return this._nodeCount},i.prototype.nodes=function(){return n.keys(this._nodes)},i.prototype.sources=function(){var t=this;return n.filter(this.nodes(),(function(e){return n.isEmpty(t._in[e])}))},i.prototype.sinks=function(){var t=this;return n.filter(this.nodes(),(function(e){return n.isEmpty(t._out[e])}))},i.prototype.setNodes=function(t,e){var r=arguments,o=this;return n.each(t,(function(t){r.length>1?o.setNode(t,e):o.setNode(t)})),this},i.prototype.setNode=function(t,e){return n.has(this._nodes,t)?(arguments.length>1&&(this._nodes[t]=e),this):(this._nodes[t]=arguments.length>1?e:this._defaultNodeLabelFn(t),this._isCompound&&(this._parent[t]=o,this._children[t]={},this._children["\0"][t]=!0),this._in[t]={},this._preds[t]={},this._out[t]={},this._sucs[t]={},++this._nodeCount,this)},i.prototype.node=function(t){return this._nodes[t]},i.prototype.hasNode=function(t){return n.has(this._nodes,t)},i.prototype.removeNode=function(t){var e=this;if(n.has(this._nodes,t)){var r=function(t){e.removeEdge(e._edgeObjs[t])};delete this._nodes[t],this._isCompound&&(this._removeFromParentsChildList(t),delete this._parent[t],n.each(this.children(t),(function(t){e.setParent(t)})),delete this._children[t]),n.each(n.keys(this._in[t]),r),delete this._in[t],delete this._preds[t],n.each(n.keys(this._out[t]),r),delete this._out[t],delete this._sucs[t],--this._nodeCount}return this},i.prototype.setParent=function(t,e){if(!this._isCompound)throw new Error("Cannot set parent in a non-compound graph");if(n.isUndefined(e))e=o;else{for(var r=e+="";!n.isUndefined(r);r=this.parent(r))if(r===t)throw new Error("Setting "+e+" as parent of "+t+" would create a cycle");this.setNode(e)}return this.setNode(t),this._removeFromParentsChildList(t),this._parent[t]=e,this._children[e][t]=!0,this},i.prototype._removeFromParentsChildList=function(t){delete this._children[this._parent[t]][t]},i.prototype.parent=function(t){if(this._isCompound){var e=this._parent[t];if(e!==o)return e}},i.prototype.children=function(t){if(n.isUndefined(t)&&(t=o),this._isCompound){var e=this._children[t];if(e)return n.keys(e)}else{if(t===o)return this.nodes();if(this.hasNode(t))return[]}},i.prototype.predecessors=function(t){var e=this._preds[t];if(e)return n.keys(e)},i.prototype.successors=function(t){var e=this._sucs[t];if(e)return n.keys(e)},i.prototype.neighbors=function(t){var e=this.predecessors(t);if(e)return n.union(e,this.successors(t))},i.prototype.isLeaf=function(t){return 0===(this.isDirected()?this.successors(t):this.neighbors(t)).length},i.prototype.filterNodes=function(t){var e=new this.constructor({directed:this._isDirected,multigraph:this._isMultigraph,compound:this._isCompound});e.setGraph(this.graph());var r=this;n.each(this._nodes,(function(r,n){t(n)&&e.setNode(n,r)})),n.each(this._edgeObjs,(function(t){e.hasNode(t.v)&&e.hasNode(t.w)&&e.setEdge(t,r.edge(t))}));var o={};function i(t){var n=r.parent(t);return void 0===n||e.hasNode(n)?(o[t]=n,n):n in o?o[n]:i(n)}return this._isCompound&&n.each(e.nodes(),(function(t){e.setParent(t,i(t))})),e},i.prototype.setDefaultEdgeLabel=function(t){return n.isFunction(t)||(t=n.constant(t)),this._defaultEdgeLabelFn=t,this},i.prototype.edgeCount=function(){return this._edgeCount},i.prototype.edges=function(){return n.values(this._edgeObjs)},i.prototype.setPath=function(t,e){var r=this,o=arguments;return n.reduce(t,(function(t,n){return o.length>1?r.setEdge(t,n,e):r.setEdge(t,n),n})),this},i.prototype.setEdge=function(){var t,e,r,o,i=!1,a=arguments[0];"object"==typeof a&&null!==a&&"v"in a?(t=a.v,e=a.w,r=a.name,2===arguments.length&&(o=arguments[1],i=!0)):(t=a,e=arguments[1],r=arguments[3],arguments.length>2&&(o=arguments[2],i=!0)),t=""+t,e=""+e,n.isUndefined(r)||(r=""+r);var p=u(this._isDirected,t,e,r);if(n.has(this._edgeLabels,p))return i&&(this._edgeLabels[p]=o),this;if(!n.isUndefined(r)&&!this._isMultigraph)throw new Error("Cannot set a named edge when isMultigraph = false");this.setNode(t),this.setNode(e),this._edgeLabels[p]=i?o:this._defaultEdgeLabelFn(t,e,r);var f=c(this._isDirected,t,e,r);return t=f.v,e=f.w,Object.freeze(f),this._edgeObjs[p]=f,s(this._preds[e],t),s(this._sucs[t],e),this._in[e][p]=f,this._out[t][p]=f,this._edgeCount++,this},i.prototype.edge=function(t,e,r){var n=1===arguments.length?p(this._isDirected,arguments[0]):u(this._isDirected,t,e,r);return this._edgeLabels[n]},i.prototype.hasEdge=function(t,e,r){var o=1===arguments.length?p(this._isDirected,arguments[0]):u(this._isDirected,t,e,r);return n.has(this._edgeLabels,o)},i.prototype.removeEdge=function(t,e,r){var n=1===arguments.length?p(this._isDirected,arguments[0]):u(this._isDirected,t,e,r),o=this._edgeObjs[n];return o&&(t=o.v,e=o.w,delete this._edgeLabels[n],delete this._edgeObjs[n],a(this._preds[e],t),a(this._sucs[t],e),delete this._in[e][n],delete this._out[t][n],this._edgeCount--),this},i.prototype.inEdges=function(t,e){var r=this._in[t];if(r){var o=n.values(r);return e?n.filter(o,(function(t){return t.v===e})):o}},i.prototype.outEdges=function(t,e){var r=this._out[t];if(r){var o=n.values(r);return e?n.filter(o,(function(t){return t.w===e})):o}},i.prototype.nodeEdges=function(t,e){var r=this.inEdges(t,e);if(r)return r.concat(this.outEdges(t,e))}},2354:(t,e,r)=>{t.exports={Graph:r(771),version:r(9631)}},8974:(t,e,r)=>{var n=r(9126),o=r(771);function i(t){return n.map(t.nodes(),(function(e){var r=t.node(e),o=t.parent(e),i={v:e};return n.isUndefined(r)||(i.value=r),n.isUndefined(o)||(i.parent=o),i}))}function s(t){return n.map(t.edges(),(function(e){var r=t.edge(e),o={v:e.v,w:e.w};return n.isUndefined(e.name)||(o.name=e.name),n.isUndefined(r)||(o.value=r),o}))}t.exports={write:function(t){var e={options:{directed:t.isDirected(),multigraph:t.isMultigraph(),compound:t.isCompound()},nodes:i(t),edges:s(t)};n.isUndefined(t.graph())||(e.value=n.clone(t.graph()));return e},read:function(t){var e=new o(t.options).setGraph(t.value);return n.each(t.nodes,(function(t){e.setNode(t.v,t.value),t.parent&&e.setParent(t.v,t.parent)})),n.each(t.edges,(function(t){e.setEdge({v:t.v,w:t.w,name:t.name},t.value)})),e}}},9126:(t,e,r)=>{var n;try{n={clone:r(6678),constant:r(5703),each:r(6073),filter:r(3105),has:r(8721),isArray:r(1469),isEmpty:r(1609),isFunction:r(3560),isUndefined:r(2353),keys:r(3674),map:r(5161),reduce:r(4061),size:r(4238),transform:r(8718),union:r(3386),values:r(2628)}}catch(t){}n||(n=window._),t.exports=n},9631:t=>{t.exports="2.1.8"},8552:(t,e,r)=>{var n=r(852)(r(5639),"DataView");t.exports=n},1989:(t,e,r)=>{var n=r(1789),o=r(401),i=r(7667),s=r(1327),a=r(1866);function u(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=s,u.prototype.set=a,t.exports=u},8407:(t,e,r)=>{var n=r(7040),o=r(4125),i=r(2117),s=r(7518),a=r(4705);function u(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=s,u.prototype.set=a,t.exports=u},7071:(t,e,r)=>{var n=r(852)(r(5639),"Map");t.exports=n},3369:(t,e,r)=>{var n=r(4785),o=r(1285),i=r(6e3),s=r(9916),a=r(5265);function u(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}u.prototype.clear=n,u.prototype.delete=o,u.prototype.get=i,u.prototype.has=s,u.prototype.set=a,t.exports=u},3818:(t,e,r)=>{var n=r(852)(r(5639),"Promise");t.exports=n},8525:(t,e,r)=>{var n=r(852)(r(5639),"Set");t.exports=n},8668:(t,e,r)=>{var n=r(3369),o=r(619),i=r(2385);function s(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new n;++e<r;)this.add(t[e])}s.prototype.add=s.prototype.push=o,s.prototype.has=i,t.exports=s},6384:(t,e,r)=>{var n=r(8407),o=r(7465),i=r(3779),s=r(7599),a=r(4758),u=r(4309);function c(t){var e=this.__data__=new n(t);this.size=e.size}c.prototype.clear=o,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=a,c.prototype.set=u,t.exports=c},2705:(t,e,r)=>{var n=r(5639).Symbol;t.exports=n},1149:(t,e,r)=>{var n=r(5639).Uint8Array;t.exports=n},577:(t,e,r)=>{var n=r(852)(r(5639),"WeakMap");t.exports=n},6874:t=>{t.exports=function(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}},7412:t=>{t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););return t}},4963:t=>{t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length,o=0,i=[];++r<n;){var s=t[r];e(s,r,t)&&(i[o++]=s)}return i}},7443:(t,e,r)=>{var n=r(2118);t.exports=function(t,e){return!!(null==t?0:t.length)&&n(t,e,0)>-1}},1196:t=>{t.exports=function(t,e,r){for(var n=-1,o=null==t?0:t.length;++n<o;)if(r(e,t[n]))return!0;return!1}},4636:(t,e,r)=>{var n=r(2545),o=r(5694),i=r(1469),s=r(4144),a=r(5776),u=r(6719),c=Object.prototype.hasOwnProperty;t.exports=function(t,e){var r=i(t),p=!r&&o(t),f=!r&&!p&&s(t),h=!r&&!p&&!f&&u(t),l=r||p||f||h,d=l?n(t.length,String):[],v=d.length;for(var _ in t)!e&&!c.call(t,_)||l&&("length"==_||f&&("offset"==_||"parent"==_)||h&&("buffer"==_||"byteLength"==_||"byteOffset"==_)||a(_,v))||d.push(_);return d}},9932:t=>{t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length,o=Array(n);++r<n;)o[r]=e(t[r],r,t);return o}},2488:t=>{t.exports=function(t,e){for(var r=-1,n=e.length,o=t.length;++r<n;)t[o+r]=e[r];return t}},2663:t=>{t.exports=function(t,e,r,n){var o=-1,i=null==t?0:t.length;for(n&&i&&(r=t[++o]);++o<i;)r=e(r,t[o],o,t);return r}},2908:t=>{t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}},8983:(t,e,r)=>{var n=r(371)("length");t.exports=n},4865:(t,e,r)=>{var n=r(9465),o=r(7813),i=Object.prototype.hasOwnProperty;t.exports=function(t,e,r){var s=t[e];i.call(t,e)&&o(s,r)&&(void 0!==r||e in t)||n(t,e,r)}},8470:(t,e,r)=>{var n=r(7813);t.exports=function(t,e){for(var r=t.length;r--;)if(n(t[r][0],e))return r;return-1}},4037:(t,e,r)=>{var n=r(8363),o=r(3674);t.exports=function(t,e){return t&&n(e,o(e),t)}},3886:(t,e,r)=>{var n=r(8363),o=r(1704);t.exports=function(t,e){return t&&n(e,o(e),t)}},9465:(t,e,r)=>{var n=r(8777);t.exports=function(t,e,r){"__proto__"==e&&n?n(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}},5990:(t,e,r)=>{var n=r(6384),o=r(7412),i=r(4865),s=r(4037),a=r(3886),u=r(4626),c=r(278),p=r(8805),f=r(1911),h=r(8234),l=r(6904),d=r(4160),v=r(3824),_=r(9148),y=r(8517),b=r(1469),m=r(4144),g=r(6688),x=r(3218),w=r(2928),j=r(3674),A=r(1704),E="[object Arguments]",C="[object Function]",O="[object Object]",S={};S[E]=S["[object Array]"]=S["[object ArrayBuffer]"]=S["[object DataView]"]=S["[object Boolean]"]=S["[object Date]"]=S["[object Float32Array]"]=S["[object Float64Array]"]=S["[object Int8Array]"]=S["[object Int16Array]"]=S["[object Int32Array]"]=S["[object Map]"]=S["[object Number]"]=S[O]=S["[object RegExp]"]=S["[object Set]"]=S["[object String]"]=S["[object Symbol]"]=S["[object Uint8Array]"]=S["[object Uint8ClampedArray]"]=S["[object Uint16Array]"]=S["[object Uint32Array]"]=!0,S["[object Error]"]=S[C]=S["[object WeakMap]"]=!1,t.exports=function t(e,r,D,I,k,T){var N,L=1&r,P=2&r,M=4&r;if(D&&(N=k?D(e,I,k,T):D(e)),void 0!==N)return N;if(!x(e))return e;var U=b(e);if(U){if(N=v(e),!L)return c(e,N)}else{var F=d(e),z=F==C||"[object GeneratorFunction]"==F;if(m(e))return u(e,L);if(F==O||F==E||z&&!k){if(N=P||z?{}:y(e),!L)return P?f(e,a(N,e)):p(e,s(N,e))}else{if(!S[F])return k?e:{};N=_(e,F,L)}}T||(T=new n);var R=T.get(e);if(R)return R;T.set(e,N),w(e)?e.forEach((function(n){N.add(t(n,r,D,n,e,T))})):g(e)&&e.forEach((function(n,o){N.set(o,t(n,r,D,o,e,T))}));var B=U?void 0:(M?P?l:h:P?A:j)(e);return o(B||e,(function(n,o){B&&(n=e[o=n]),i(N,o,t(n,r,D,o,e,T))})),N}},3118:(t,e,r)=>{var n=r(3218),o=Object.create,i=function(){function t(){}return function(e){if(!n(e))return{};if(o)return o(e);t.prototype=e;var r=new t;return t.prototype=void 0,r}}();t.exports=i},9881:(t,e,r)=>{var n=r(7816),o=r(9291)(n);t.exports=o},760:(t,e,r)=>{var n=r(9881);t.exports=function(t,e){var r=[];return n(t,(function(t,n,o){e(t,n,o)&&r.push(t)})),r}},1848:t=>{t.exports=function(t,e,r,n){for(var o=t.length,i=r+(n?1:-1);n?i--:++i<o;)if(e(t[i],i,t))return i;return-1}},1078:(t,e,r)=>{var n=r(2488),o=r(7285);t.exports=function t(e,r,i,s,a){var u=-1,c=e.length;for(i||(i=o),a||(a=[]);++u<c;){var p=e[u];r>0&&i(p)?r>1?t(p,r-1,i,s,a):n(a,p):s||(a[a.length]=p)}return a}},8483:(t,e,r)=>{var n=r(5063)();t.exports=n},7816:(t,e,r)=>{var n=r(8483),o=r(3674);t.exports=function(t,e){return t&&n(t,e,o)}},7786:(t,e,r)=>{var n=r(1811),o=r(327);t.exports=function(t,e){for(var r=0,i=(e=n(e,t)).length;null!=t&&r<i;)t=t[o(e[r++])];return r&&r==i?t:void 0}},8866:(t,e,r)=>{var n=r(2488),o=r(1469);t.exports=function(t,e,r){var i=e(t);return o(t)?i:n(i,r(t))}},4239:(t,e,r)=>{var n=r(2705),o=r(9607),i=r(2333),s=n?n.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":s&&s in Object(t)?o(t):i(t)}},8565:t=>{var e=Object.prototype.hasOwnProperty;t.exports=function(t,r){return null!=t&&e.call(t,r)}},13:t=>{t.exports=function(t,e){return null!=t&&e in Object(t)}},2118:(t,e,r)=>{var n=r(1848),o=r(2722),i=r(2351);t.exports=function(t,e,r){return e==e?i(t,e,r):n(t,o,r)}},9454:(t,e,r)=>{var n=r(4239),o=r(7005);t.exports=function(t){return o(t)&&"[object Arguments]"==n(t)}},939:(t,e,r)=>{var n=r(2492),o=r(7005);t.exports=function t(e,r,i,s,a){return e===r||(null==e||null==r||!o(e)&&!o(r)?e!=e&&r!=r:n(e,r,i,s,t,a))}},2492:(t,e,r)=>{var n=r(6384),o=r(7114),i=r(8351),s=r(6096),a=r(4160),u=r(1469),c=r(4144),p=r(6719),f="[object Arguments]",h="[object Array]",l="[object Object]",d=Object.prototype.hasOwnProperty;t.exports=function(t,e,r,v,_,y){var b=u(t),m=u(e),g=b?h:a(t),x=m?h:a(e),w=(g=g==f?l:g)==l,j=(x=x==f?l:x)==l,A=g==x;if(A&&c(t)){if(!c(e))return!1;b=!0,w=!1}if(A&&!w)return y||(y=new n),b||p(t)?o(t,e,r,v,_,y):i(t,e,g,r,v,_,y);if(!(1&r)){var E=w&&d.call(t,"__wrapped__"),C=j&&d.call(e,"__wrapped__");if(E||C){var O=E?t.value():t,S=C?e.value():e;return y||(y=new n),_(O,S,r,v,y)}}return!!A&&(y||(y=new n),s(t,e,r,v,_,y))}},5588:(t,e,r)=>{var n=r(4160),o=r(7005);t.exports=function(t){return o(t)&&"[object Map]"==n(t)}},2958:(t,e,r)=>{var n=r(6384),o=r(939);t.exports=function(t,e,r,i){var s=r.length,a=s,u=!i;if(null==t)return!a;for(t=Object(t);s--;){var c=r[s];if(u&&c[2]?c[1]!==t[c[0]]:!(c[0]in t))return!1}for(;++s<a;){var p=(c=r[s])[0],f=t[p],h=c[1];if(u&&c[2]){if(void 0===f&&!(p in t))return!1}else{var l=new n;if(i)var d=i(f,h,p,t,e,l);if(!(void 0===d?o(h,f,3,i,l):d))return!1}}return!0}},2722:t=>{t.exports=function(t){return t!=t}},8458:(t,e,r)=>{var n=r(3560),o=r(5346),i=r(3218),s=r(346),a=/^\[object .+?Constructor\]$/,u=Function.prototype,c=Object.prototype,p=u.toString,f=c.hasOwnProperty,h=RegExp("^"+p.call(f).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!i(t)||o(t))&&(n(t)?h:a).test(s(t))}},9221:(t,e,r)=>{var n=r(4160),o=r(7005);t.exports=function(t){return o(t)&&"[object Set]"==n(t)}},8749:(t,e,r)=>{var n=r(4239),o=r(1780),i=r(7005),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,t.exports=function(t){return i(t)&&o(t.length)&&!!s[n(t)]}},7206:(t,e,r)=>{var n=r(1573),o=r(6432),i=r(6557),s=r(1469),a=r(9601);t.exports=function(t){return"function"==typeof t?t:null==t?i:"object"==typeof t?s(t)?o(t[0],t[1]):n(t):a(t)}},280:(t,e,r)=>{var n=r(5726),o=r(6916),i=Object.prototype.hasOwnProperty;t.exports=function(t){if(!n(t))return o(t);var e=[];for(var r in Object(t))i.call(t,r)&&"constructor"!=r&&e.push(r);return e}},313:(t,e,r)=>{var n=r(3218),o=r(5726),i=r(3498),s=Object.prototype.hasOwnProperty;t.exports=function(t){if(!n(t))return i(t);var e=o(t),r=[];for(var a in t)("constructor"!=a||!e&&s.call(t,a))&&r.push(a);return r}},9199:(t,e,r)=>{var n=r(9881),o=r(8612);t.exports=function(t,e){var r=-1,i=o(t)?Array(t.length):[];return n(t,(function(t,n,o){i[++r]=e(t,n,o)})),i}},1573:(t,e,r)=>{var n=r(2958),o=r(1499),i=r(2634);t.exports=function(t){var e=o(t);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(r){return r===t||n(r,t,e)}}},6432:(t,e,r)=>{var n=r(939),o=r(7361),i=r(9095),s=r(5403),a=r(9162),u=r(2634),c=r(327);t.exports=function(t,e){return s(t)&&a(e)?u(c(t),e):function(r){var s=o(r,t);return void 0===s&&s===e?i(r,t):n(e,s,3)}}},371:t=>{t.exports=function(t){return function(e){return null==e?void 0:e[t]}}},9152:(t,e,r)=>{var n=r(7786);t.exports=function(t){return function(e){return n(e,t)}}},107:t=>{t.exports=function(t,e,r,n,o){return o(t,(function(t,o,i){r=n?(n=!1,t):e(r,t,o,i)})),r}},5976:(t,e,r)=>{var n=r(6557),o=r(5357),i=r(61);t.exports=function(t,e){return i(o(t,e,n),t+"")}},6560:(t,e,r)=>{var n=r(5703),o=r(8777),i=r(6557),s=o?function(t,e){return o(t,"toString",{configurable:!0,enumerable:!1,value:n(e),writable:!0})}:i;t.exports=s},2545:t=>{t.exports=function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}},531:(t,e,r)=>{var n=r(2705),o=r(9932),i=r(1469),s=r(3448),a=n?n.prototype:void 0,u=a?a.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(i(e))return o(e,t)+"";if(s(e))return u?u.call(e):"";var r=e+"";return"0"==r&&1/e==-Infinity?"-0":r}},1717:t=>{t.exports=function(t){return function(e){return t(e)}}},5652:(t,e,r)=>{var n=r(8668),o=r(7443),i=r(1196),s=r(4757),a=r(3593),u=r(1814);t.exports=function(t,e,r){var c=-1,p=o,f=t.length,h=!0,l=[],d=l;if(r)h=!1,p=i;else if(f>=200){var v=e?null:a(t);if(v)return u(v);h=!1,p=s,d=new n}else d=e?[]:l;t:for(;++c<f;){var _=t[c],y=e?e(_):_;if(_=r||0!==_?_:0,h&&y==y){for(var b=d.length;b--;)if(d[b]===y)continue t;e&&d.push(y),l.push(_)}else p(d,y,r)||(d!==l&&d.push(y),l.push(_))}return l}},7415:(t,e,r)=>{var n=r(9932);t.exports=function(t,e){return n(e,(function(e){return t[e]}))}},4757:t=>{t.exports=function(t,e){return t.has(e)}},4290:(t,e,r)=>{var n=r(6557);t.exports=function(t){return"function"==typeof t?t:n}},1811:(t,e,r)=>{var n=r(1469),o=r(5403),i=r(5514),s=r(9833);t.exports=function(t,e){return n(t)?t:o(t,e)?[t]:i(s(t))}},4318:(t,e,r)=>{var n=r(1149);t.exports=function(t){var e=new t.constructor(t.byteLength);return new n(e).set(new n(t)),e}},4626:(t,e,r)=>{t=r.nmd(t);var n=r(5639),o=e&&!e.nodeType&&e,i=o&&t&&!t.nodeType&&t,s=i&&i.exports===o?n.Buffer:void 0,a=s?s.allocUnsafe:void 0;t.exports=function(t,e){if(e)return t.slice();var r=t.length,n=a?a(r):new t.constructor(r);return t.copy(n),n}},7157:(t,e,r)=>{var n=r(4318);t.exports=function(t,e){var r=e?n(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.byteLength)}},3147:t=>{var e=/\w*$/;t.exports=function(t){var r=new t.constructor(t.source,e.exec(t));return r.lastIndex=t.lastIndex,r}},419:(t,e,r)=>{var n=r(2705),o=n?n.prototype:void 0,i=o?o.valueOf:void 0;t.exports=function(t){return i?Object(i.call(t)):{}}},7133:(t,e,r)=>{var n=r(4318);t.exports=function(t,e){var r=e?n(t.buffer):t.buffer;return new t.constructor(r,t.byteOffset,t.length)}},278:t=>{t.exports=function(t,e){var r=-1,n=t.length;for(e||(e=Array(n));++r<n;)e[r]=t[r];return e}},8363:(t,e,r)=>{var n=r(4865),o=r(9465);t.exports=function(t,e,r,i){var s=!r;r||(r={});for(var a=-1,u=e.length;++a<u;){var c=e[a],p=i?i(r[c],t[c],c,r,t):void 0;void 0===p&&(p=t[c]),s?o(r,c,p):n(r,c,p)}return r}},8805:(t,e,r)=>{var n=r(8363),o=r(9551);t.exports=function(t,e){return n(t,o(t),e)}},1911:(t,e,r)=>{var n=r(8363),o=r(1442);t.exports=function(t,e){return n(t,o(t),e)}},4429:(t,e,r)=>{var n=r(5639)["__core-js_shared__"];t.exports=n},9291:(t,e,r)=>{var n=r(8612);t.exports=function(t,e){return function(r,o){if(null==r)return r;if(!n(r))return t(r,o);for(var i=r.length,s=e?i:-1,a=Object(r);(e?s--:++s<i)&&!1!==o(a[s],s,a););return r}}},5063:t=>{t.exports=function(t){return function(e,r,n){for(var o=-1,i=Object(e),s=n(e),a=s.length;a--;){var u=s[t?a:++o];if(!1===r(i[u],u,i))break}return e}}},3593:(t,e,r)=>{var n=r(8525),o=r(308),i=r(1814),s=n&&1/i(new n([,-0]))[1]==1/0?function(t){return new n(t)}:o;t.exports=s},8777:(t,e,r)=>{var n=r(852),o=function(){try{var t=n(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=o},7114:(t,e,r)=>{var n=r(8668),o=r(2908),i=r(4757);t.exports=function(t,e,r,s,a,u){var c=1&r,p=t.length,f=e.length;if(p!=f&&!(c&&f>p))return!1;var h=u.get(t),l=u.get(e);if(h&&l)return h==e&&l==t;var d=-1,v=!0,_=2&r?new n:void 0;for(u.set(t,e),u.set(e,t);++d<p;){var y=t[d],b=e[d];if(s)var m=c?s(b,y,d,e,t,u):s(y,b,d,t,e,u);if(void 0!==m){if(m)continue;v=!1;break}if(_){if(!o(e,(function(t,e){if(!i(_,e)&&(y===t||a(y,t,r,s,u)))return _.push(e)}))){v=!1;break}}else if(y!==b&&!a(y,b,r,s,u)){v=!1;break}}return u.delete(t),u.delete(e),v}},8351:(t,e,r)=>{var n=r(2705),o=r(1149),i=r(7813),s=r(7114),a=r(8776),u=r(1814),c=n?n.prototype:void 0,p=c?c.valueOf:void 0;t.exports=function(t,e,r,n,c,f,h){switch(r){case"[object DataView]":if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(t.byteLength!=e.byteLength||!f(new o(t),new o(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+t,+e);case"[object Error]":return t.name==e.name&&t.message==e.message;case"[object RegExp]":case"[object String]":return t==e+"";case"[object Map]":var l=a;case"[object Set]":var d=1&n;if(l||(l=u),t.size!=e.size&&!d)return!1;var v=h.get(t);if(v)return v==e;n|=2,h.set(t,e);var _=s(l(t),l(e),n,c,f,h);return h.delete(t),_;case"[object Symbol]":if(p)return p.call(t)==p.call(e)}return!1}},6096:(t,e,r)=>{var n=r(8234),o=Object.prototype.hasOwnProperty;t.exports=function(t,e,r,i,s,a){var u=1&r,c=n(t),p=c.length;if(p!=n(e).length&&!u)return!1;for(var f=p;f--;){var h=c[f];if(!(u?h in e:o.call(e,h)))return!1}var l=a.get(t),d=a.get(e);if(l&&d)return l==e&&d==t;var v=!0;a.set(t,e),a.set(e,t);for(var _=u;++f<p;){var y=t[h=c[f]],b=e[h];if(i)var m=u?i(b,y,h,e,t,a):i(y,b,h,t,e,a);if(!(void 0===m?y===b||s(y,b,r,i,a):m)){v=!1;break}_||(_="constructor"==h)}if(v&&!_){var g=t.constructor,x=e.constructor;g==x||!("constructor"in t)||!("constructor"in e)||"function"==typeof g&&g instanceof g&&"function"==typeof x&&x instanceof x||(v=!1)}return a.delete(t),a.delete(e),v}},1957:(t,e,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;t.exports=n},8234:(t,e,r)=>{var n=r(8866),o=r(9551),i=r(3674);t.exports=function(t){return n(t,i,o)}},6904:(t,e,r)=>{var n=r(8866),o=r(1442),i=r(1704);t.exports=function(t){return n(t,i,o)}},5050:(t,e,r)=>{var n=r(7019);t.exports=function(t,e){var r=t.__data__;return n(e)?r["string"==typeof e?"string":"hash"]:r.map}},1499:(t,e,r)=>{var n=r(9162),o=r(3674);t.exports=function(t){for(var e=o(t),r=e.length;r--;){var i=e[r],s=t[i];e[r]=[i,s,n(s)]}return e}},852:(t,e,r)=>{var n=r(8458),o=r(7801);t.exports=function(t,e){var r=o(t,e);return n(r)?r:void 0}},5924:(t,e,r)=>{var n=r(5569)(Object.getPrototypeOf,Object);t.exports=n},9607:(t,e,r)=>{var n=r(2705),o=Object.prototype,i=o.hasOwnProperty,s=o.toString,a=n?n.toStringTag:void 0;t.exports=function(t){var e=i.call(t,a),r=t[a];try{t[a]=void 0;var n=!0}catch(t){}var o=s.call(t);return n&&(e?t[a]=r:delete t[a]),o}},9551:(t,e,r)=>{var n=r(4963),o=r(479),i=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,a=s?function(t){return null==t?[]:(t=Object(t),n(s(t),(function(e){return i.call(t,e)})))}:o;t.exports=a},1442:(t,e,r)=>{var n=r(2488),o=r(5924),i=r(9551),s=r(479),a=Object.getOwnPropertySymbols?function(t){for(var e=[];t;)n(e,i(t)),t=o(t);return e}:s;t.exports=a},4160:(t,e,r)=>{var n=r(8552),o=r(7071),i=r(3818),s=r(8525),a=r(577),u=r(4239),c=r(346),p="[object Map]",f="[object Promise]",h="[object Set]",l="[object WeakMap]",d="[object DataView]",v=c(n),_=c(o),y=c(i),b=c(s),m=c(a),g=u;(n&&g(new n(new ArrayBuffer(1)))!=d||o&&g(new o)!=p||i&&g(i.resolve())!=f||s&&g(new s)!=h||a&&g(new a)!=l)&&(g=function(t){var e=u(t),r="[object Object]"==e?t.constructor:void 0,n=r?c(r):"";if(n)switch(n){case v:return d;case _:return p;case y:return f;case b:return h;case m:return l}return e}),t.exports=g},7801:t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},222:(t,e,r)=>{var n=r(1811),o=r(5694),i=r(1469),s=r(5776),a=r(1780),u=r(327);t.exports=function(t,e,r){for(var c=-1,p=(e=n(e,t)).length,f=!1;++c<p;){var h=u(e[c]);if(!(f=null!=t&&r(t,h)))break;t=t[h]}return f||++c!=p?f:!!(p=null==t?0:t.length)&&a(p)&&s(h,p)&&(i(t)||o(t))}},2689:t=>{var e=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");t.exports=function(t){return e.test(t)}},1789:(t,e,r)=>{var n=r(4536);t.exports=function(){this.__data__=n?n(null):{},this.size=0}},401:t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},7667:(t,e,r)=>{var n=r(4536),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(n){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return o.call(e,t)?e[t]:void 0}},1327:(t,e,r)=>{var n=r(4536),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return n?void 0!==e[t]:o.call(e,t)}},1866:(t,e,r)=>{var n=r(4536);t.exports=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=n&&void 0===e?"__lodash_hash_undefined__":e,this}},3824:t=>{var e=Object.prototype.hasOwnProperty;t.exports=function(t){var r=t.length,n=new t.constructor(r);return r&&"string"==typeof t[0]&&e.call(t,"index")&&(n.index=t.index,n.input=t.input),n}},9148:(t,e,r)=>{var n=r(4318),o=r(7157),i=r(3147),s=r(419),a=r(7133);t.exports=function(t,e,r){var u=t.constructor;switch(e){case"[object ArrayBuffer]":return n(t);case"[object Boolean]":case"[object Date]":return new u(+t);case"[object DataView]":return o(t,r);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return a(t,r);case"[object Map]":case"[object Set]":return new u;case"[object Number]":case"[object String]":return new u(t);case"[object RegExp]":return i(t);case"[object Symbol]":return s(t)}}},8517:(t,e,r)=>{var n=r(3118),o=r(5924),i=r(5726);t.exports=function(t){return"function"!=typeof t.constructor||i(t)?{}:n(o(t))}},7285:(t,e,r)=>{var n=r(2705),o=r(5694),i=r(1469),s=n?n.isConcatSpreadable:void 0;t.exports=function(t){return i(t)||o(t)||!!(s&&t&&t[s])}},5776:t=>{var e=/^(?:0|[1-9]\d*)$/;t.exports=function(t,r){var n=typeof t;return!!(r=null==r?9007199254740991:r)&&("number"==n||"symbol"!=n&&e.test(t))&&t>-1&&t%1==0&&t<r}},5403:(t,e,r)=>{var n=r(1469),o=r(3448),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;t.exports=function(t,e){if(n(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!o(t))||(s.test(t)||!i.test(t)||null!=e&&t in Object(e))}},7019:t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},5346:(t,e,r)=>{var n,o=r(4429),i=(n=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";t.exports=function(t){return!!i&&i in t}},5726:t=>{var e=Object.prototype;t.exports=function(t){var r=t&&t.constructor;return t===("function"==typeof r&&r.prototype||e)}},9162:(t,e,r)=>{var n=r(3218);t.exports=function(t){return t==t&&!n(t)}},7040:t=>{t.exports=function(){this.__data__=[],this.size=0}},4125:(t,e,r)=>{var n=r(8470),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,r=n(e,t);return!(r<0)&&(r==e.length-1?e.pop():o.call(e,r,1),--this.size,!0)}},2117:(t,e,r)=>{var n=r(8470);t.exports=function(t){var e=this.__data__,r=n(e,t);return r<0?void 0:e[r][1]}},7518:(t,e,r)=>{var n=r(8470);t.exports=function(t){return n(this.__data__,t)>-1}},4705:(t,e,r)=>{var n=r(8470);t.exports=function(t,e){var r=this.__data__,o=n(r,t);return o<0?(++this.size,r.push([t,e])):r[o][1]=e,this}},4785:(t,e,r)=>{var n=r(1989),o=r(8407),i=r(7071);t.exports=function(){this.size=0,this.__data__={hash:new n,map:new(i||o),string:new n}}},1285:(t,e,r)=>{var n=r(5050);t.exports=function(t){var e=n(this,t).delete(t);return this.size-=e?1:0,e}},6e3:(t,e,r)=>{var n=r(5050);t.exports=function(t){return n(this,t).get(t)}},9916:(t,e,r)=>{var n=r(5050);t.exports=function(t){return n(this,t).has(t)}},5265:(t,e,r)=>{var n=r(5050);t.exports=function(t,e){var r=n(this,t),o=r.size;return r.set(t,e),this.size+=r.size==o?0:1,this}},8776:t=>{t.exports=function(t){var e=-1,r=Array(t.size);return t.forEach((function(t,n){r[++e]=[n,t]})),r}},2634:t=>{t.exports=function(t,e){return function(r){return null!=r&&(r[t]===e&&(void 0!==e||t in Object(r)))}}},4523:(t,e,r)=>{var n=r(8306);t.exports=function(t){var e=n(t,(function(t){return 500===r.size&&r.clear(),t})),r=e.cache;return e}},4536:(t,e,r)=>{var n=r(852)(Object,"create");t.exports=n},6916:(t,e,r)=>{var n=r(5569)(Object.keys,Object);t.exports=n},3498:t=>{t.exports=function(t){var e=[];if(null!=t)for(var r in Object(t))e.push(r);return e}},1167:(t,e,r)=>{t=r.nmd(t);var n=r(1957),o=e&&!e.nodeType&&e,i=o&&t&&!t.nodeType&&t,s=i&&i.exports===o&&n.process,a=function(){try{var t=i&&i.require&&i.require("util").types;return t||s&&s.binding&&s.binding("util")}catch(t){}}();t.exports=a},2333:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},5569:t=>{t.exports=function(t,e){return function(r){return t(e(r))}}},5357:(t,e,r)=>{var n=r(6874),o=Math.max;t.exports=function(t,e,r){return e=o(void 0===e?t.length-1:e,0),function(){for(var i=arguments,s=-1,a=o(i.length-e,0),u=Array(a);++s<a;)u[s]=i[e+s];s=-1;for(var c=Array(e+1);++s<e;)c[s]=i[s];return c[e]=r(u),n(t,this,c)}}},5639:(t,e,r)=>{var n=r(1957),o="object"==typeof self&&self&&self.Object===Object&&self,i=n||o||Function("return this")();t.exports=i},619:t=>{t.exports=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this}},2385:t=>{t.exports=function(t){return this.__data__.has(t)}},1814:t=>{t.exports=function(t){var e=-1,r=Array(t.size);return t.forEach((function(t){r[++e]=t})),r}},61:(t,e,r)=>{var n=r(6560),o=r(1275)(n);t.exports=o},1275:t=>{var e=Date.now;t.exports=function(t){var r=0,n=0;return function(){var o=e(),i=16-(o-n);if(n=o,i>0){if(++r>=800)return arguments[0]}else r=0;return t.apply(void 0,arguments)}}},7465:(t,e,r)=>{var n=r(8407);t.exports=function(){this.__data__=new n,this.size=0}},3779:t=>{t.exports=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r}},7599:t=>{t.exports=function(t){return this.__data__.get(t)}},4758:t=>{t.exports=function(t){return this.__data__.has(t)}},4309:(t,e,r)=>{var n=r(8407),o=r(7071),i=r(3369);t.exports=function(t,e){var r=this.__data__;if(r instanceof n){var s=r.__data__;if(!o||s.length<199)return s.push([t,e]),this.size=++r.size,this;r=this.__data__=new i(s)}return r.set(t,e),this.size=r.size,this}},2351:t=>{t.exports=function(t,e,r){for(var n=r-1,o=t.length;++n<o;)if(t[n]===e)return n;return-1}},8016:(t,e,r)=>{var n=r(8983),o=r(2689),i=r(1903);t.exports=function(t){return o(t)?i(t):n(t)}},5514:(t,e,r)=>{var n=r(4523),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,s=n((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(o,(function(t,r,n,o){e.push(n?o.replace(i,"$1"):r||t)})),e}));t.exports=s},327:(t,e,r)=>{var n=r(3448);t.exports=function(t){if("string"==typeof t||n(t))return t;var e=t+"";return"0"==e&&1/t==-Infinity?"-0":e}},346:t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},1903:t=>{var e="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",n="\\ud83c[\\udffb-\\udfff]",o="[^\\ud800-\\udfff]",i="(?:\\ud83c[\\udde6-\\uddff]){2}",s="[\\ud800-\\udbff][\\udc00-\\udfff]",a="(?:"+r+"|"+n+")"+"?",u="[\\ufe0e\\ufe0f]?",c=u+a+("(?:\\u200d(?:"+[o,i,s].join("|")+")"+u+a+")*"),p="(?:"+[o+r+"?",r,i,s,e].join("|")+")",f=RegExp(n+"(?="+n+")|"+p+c,"g");t.exports=function(t){for(var e=f.lastIndex=0;f.test(t);)++e;return e}},6678:(t,e,r)=>{var n=r(5990);t.exports=function(t){return n(t,4)}},5703:t=>{t.exports=function(t){return function(){return t}}},6073:(t,e,r)=>{t.exports=r(4486)},7813:t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},3105:(t,e,r)=>{var n=r(4963),o=r(760),i=r(7206),s=r(1469);t.exports=function(t,e){return(s(t)?n:o)(t,i(e,3))}},4486:(t,e,r)=>{var n=r(7412),o=r(9881),i=r(4290),s=r(1469);t.exports=function(t,e){return(s(t)?n:o)(t,i(e))}},7361:(t,e,r)=>{var n=r(7786);t.exports=function(t,e,r){var o=null==t?void 0:n(t,e);return void 0===o?r:o}},8721:(t,e,r)=>{var n=r(8565),o=r(222);t.exports=function(t,e){return null!=t&&o(t,e,n)}},9095:(t,e,r)=>{var n=r(13),o=r(222);t.exports=function(t,e){return null!=t&&o(t,e,n)}},6557:t=>{t.exports=function(t){return t}},5694:(t,e,r)=>{var n=r(9454),o=r(7005),i=Object.prototype,s=i.hasOwnProperty,a=i.propertyIsEnumerable,u=n(function(){return arguments}())?n:function(t){return o(t)&&s.call(t,"callee")&&!a.call(t,"callee")};t.exports=u},1469:t=>{var e=Array.isArray;t.exports=e},8612:(t,e,r)=>{var n=r(3560),o=r(1780);t.exports=function(t){return null!=t&&o(t.length)&&!n(t)}},9246:(t,e,r)=>{var n=r(8612),o=r(7005);t.exports=function(t){return o(t)&&n(t)}},4144:(t,e,r)=>{t=r.nmd(t);var n=r(5639),o=r(5062),i=e&&!e.nodeType&&e,s=i&&t&&!t.nodeType&&t,a=s&&s.exports===i?n.Buffer:void 0,u=(a?a.isBuffer:void 0)||o;t.exports=u},1609:(t,e,r)=>{var n=r(280),o=r(4160),i=r(5694),s=r(1469),a=r(8612),u=r(4144),c=r(5726),p=r(6719),f=Object.prototype.hasOwnProperty;t.exports=function(t){if(null==t)return!0;if(a(t)&&(s(t)||"string"==typeof t||"function"==typeof t.splice||u(t)||p(t)||i(t)))return!t.length;var e=o(t);if("[object Map]"==e||"[object Set]"==e)return!t.size;if(c(t))return!n(t).length;for(var r in t)if(f.call(t,r))return!1;return!0}},3560:(t,e,r)=>{var n=r(4239),o=r(3218);t.exports=function(t){if(!o(t))return!1;var e=n(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},1780:t=>{t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}},6688:(t,e,r)=>{var n=r(5588),o=r(1717),i=r(1167),s=i&&i.isMap,a=s?o(s):n;t.exports=a},3218:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},7005:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},2928:(t,e,r)=>{var n=r(9221),o=r(1717),i=r(1167),s=i&&i.isSet,a=s?o(s):n;t.exports=a},7037:(t,e,r)=>{var n=r(4239),o=r(1469),i=r(7005);t.exports=function(t){return"string"==typeof t||!o(t)&&i(t)&&"[object String]"==n(t)}},3448:(t,e,r)=>{var n=r(4239),o=r(7005);t.exports=function(t){return"symbol"==typeof t||o(t)&&"[object Symbol]"==n(t)}},6719:(t,e,r)=>{var n=r(8749),o=r(1717),i=r(1167),s=i&&i.isTypedArray,a=s?o(s):n;t.exports=a},2353:t=>{t.exports=function(t){return void 0===t}},3674:(t,e,r)=>{var n=r(4636),o=r(280),i=r(8612);t.exports=function(t){return i(t)?n(t):o(t)}},1704:(t,e,r)=>{var n=r(4636),o=r(313),i=r(8612);t.exports=function(t){return i(t)?n(t,!0):o(t)}},5161:(t,e,r)=>{var n=r(9932),o=r(7206),i=r(9199),s=r(1469);t.exports=function(t,e){return(s(t)?n:i)(t,o(e,3))}},8306:(t,e,r)=>{var n=r(3369);function o(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var r=function(){var n=arguments,o=e?e.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var s=t.apply(this,n);return r.cache=i.set(o,s)||i,s};return r.cache=new(o.Cache||n),r}o.Cache=n,t.exports=o},308:t=>{t.exports=function(){}},9601:(t,e,r)=>{var n=r(371),o=r(9152),i=r(5403),s=r(327);t.exports=function(t){return i(t)?n(s(t)):o(t)}},4061:(t,e,r)=>{var n=r(2663),o=r(9881),i=r(7206),s=r(107),a=r(1469);t.exports=function(t,e,r){var u=a(t)?n:s,c=arguments.length<3;return u(t,i(e,4),r,c,o)}},4238:(t,e,r)=>{var n=r(280),o=r(4160),i=r(8612),s=r(7037),a=r(8016);t.exports=function(t){if(null==t)return 0;if(i(t))return s(t)?a(t):t.length;var e=o(t);return"[object Map]"==e||"[object Set]"==e?t.size:n(t).length}},479:t=>{t.exports=function(){return[]}},5062:t=>{t.exports=function(){return!1}},9833:(t,e,r)=>{var n=r(531);t.exports=function(t){return null==t?"":n(t)}},8718:(t,e,r)=>{var n=r(7412),o=r(3118),i=r(7816),s=r(7206),a=r(5924),u=r(1469),c=r(4144),p=r(3560),f=r(3218),h=r(6719);t.exports=function(t,e,r){var l=u(t),d=l||c(t)||h(t);if(e=s(e,4),null==r){var v=t&&t.constructor;r=d?l?new v:[]:f(t)&&p(v)?o(a(t)):{}}return(d?n:i)(t,(function(t,n,o){return e(r,t,n,o)})),r}},3386:(t,e,r)=>{var n=r(1078),o=r(5976),i=r(5652),s=r(9246),a=o((function(t){return i(n(t,1,s,!0))}));t.exports=a},2628:(t,e,r)=>{var n=r(7415),o=r(3674);t.exports=function(t){return null==t?[]:n(t,o(t))}},3379:t=>{"use strict";var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var i={},s=[],a=0;a<t.length;a++){var u=t[a],c=n.base?u[0]+n.base:u[0],p=i[c]||0,f="".concat(c," ").concat(p);i[c]=p+1;var h=r(f),l={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==h)e[h].references++,e[h].updater(l);else{var d=o(l,n);n.byIndex=a,e.splice(a,0,{identifier:f,updater:d,references:1})}s.push(f)}return s}function o(t,e){var r=e.domAPI(e);r.update(t);return function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,o){var i=n(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=r(i[s]);e[a].references--}for(var u=n(t,o),c=0;c<i.length;c++){var p=r(i[c]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}i=u}}},569:t=>{"use strict";var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,r)=>{"use strict";t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,loaded:!1,exports:{}};return t[n](i,i.exports,r),i.loaded=!0,i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),r.nc=void 0;var n={};return(()=>{"use strict";r.d(n,{default:()=>S});var t=r(8282);function e(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function o(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t}function i(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var s={name:"ext4",prohibitedFileNameCharecters:["\0","\\0",".",".."]};const a=o((function e(r){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),i(this,"graph",new t.Graph({compound:!0,directed:!0})),i(this,"rootDir","/"),i(this,"homeDir",this.rootDir+"home/"),i(this,"rootUsr",{name:"root",password:"password",homeDir:this.homeDir}),i(this,"users",[]),i(this,"GetCurrentDirectory",(function(){return n.currentDir.startsWith(n.currentUser.homeDir)?n.currentDir.replace(n.currentUser.homeDir,"~")+n.currentDir:n.currentDir})),i(this,"mkdir",(function(t){for(var e=[],r=t.split(/\s+/).filter((function(t){return""!==t})),o=0;o<r.length;o++){var i=r[o];i=n.replaceRepetetiveForwardslashes(i);var s=(i=(i=n.resolveRelativeDirString(i)).replace("%20"," ")).split("/").filter((function(t){return""!==t}));s.splice(-1);var a=s.join("/");a.startsWith("/")||(a="/"+a),a.endsWith("/")||(a+="/"),n.graph.hasNode(a)?(n.newDir(i,a),n.newDir(".",i),n.newDir("..",i)):e.push(new RangeError("mkdir: cannot create directory ‘".concat(i,"’: No such file or directory")))}return e})),i(this,"adduser",(function(t){return n.users.some((function(e){return e.name===t.name}))?new RangeError("adduser: The user '".concat(t.name,"' already exists.")):(n.users.push(t),n.newUserDir(t))})),i(this,"pwd",(function(){return n.currentDir})),i(this,"cd",(function(t){return t=n.resolveRelativeDirString(t),n.dirExists(t)?(n.currentDir=t,n.currentDir):new RangeError("-bash: cd: ".concat(t,": No such file or directory"))})),i(this,"dirExists",(function(t){return n.graph.hasNode(t)})),i(this,"replaceRepetetiveForwardslashes",(function(t){return t.replace(/\/+/g,"/")})),i(this,"resolveRelativeDirString",(function(t){t.startsWith("/")||t.startsWith("./")||(t="./"+t),t.startsWith("./")&&(t=n.currentDir+t.slice(2)),t.startsWith("../")&&(t=(t=(t=n.currentDir.slice(0,n.currentDir.lastIndexOf("/"))).slice(0,t.lastIndexOf("/"))).slice(0,t.lastIndexOf("/"))+"/");for(var e="",r=0;r<t.length;r++)(e+=t[r]).match(/(?<=\/)(\.\.\/)+$/)?e=(e=(e=e.slice(0,e.lastIndexOf("/"))).slice(0,e.lastIndexOf("/"))).slice(0,e.lastIndexOf("/"))+"/":e.match(/(?<=\/)(\.\/)+$/)&&(e=(e=e.slice(0,e.lastIndexOf("/"))).slice(0,e.lastIndexOf("/"))+"/");return e.endsWith("/")||(e+="/"),e})),i(this,"newUserDir",(function(t){return void 0===t.homeDir?t.homeDir=n.homeDir:t.homeDir.endsWith("/")||(t.homeDir=t.homeDir+"/"),n.newDir(t.homeDir+t.name,t.homeDir)})),i(this,"newDir",(function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.rootDir;return t=n.replaceRepetetiveForwardslashes(t),t=n.resolveRelativeDirString(t),n.graph.setNode(t,t),t!==n.rootDir&&n.graph.setParent(t,e),t})),this.newDir(this.rootDir),this.newDir(this.homeDir),this.currentDir=this.adduser(this.rootUsr),this.currentUser=this.rootUsr,void 0!==r&&r.name!==this.rootUsr.name&&(this.currentDir=this.adduser(r),this.currentUser=r),this.fileSystemType=s}));var u=r(3379),c=r.n(u),p=r(7795),f=r.n(p),h=r(569),l=r.n(h),d=r(3565),v=r.n(d),_=r(9216),y=r.n(_),b=r(4589),m=r.n(b),g=r(28),x={};x.styleTagTransform=m(),x.setAttributes=v(),x.insert=l().bind(null,"head"),x.domAPI=f(),x.insertStyleElement=y();c()(g.Z,x);g.Z&&g.Z.locals&&g.Z.locals;function w(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function j(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?w(Object(r),!0).forEach((function(e){C(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):w(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function A(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function E(t,e,r){return e&&A(t.prototype,e),r&&A(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function C(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var O=E((function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),C(this,"historyStack",[]),C(this,"eventQueue",[]),C(this,"options",{wrapperId:"terminal___emulator___wrapper",wrapperClassName:"terminal___emulator___wrapper",cursor:"|",cursorId:"terminal___emulator___cursor",cursorClassName:"terminal___emulator___cursor",cursorAnimation:"static",enviroment:void 0}),C(this,"HISTSIZE",500),C(this,"addCommand",(function(t){return r.eventQueue.push({delayAfter:0,command:t}),r})),C(this,"addCommands",(function(t){return t.forEach((function(t){r.eventQueue.push({delayAfter:0,command:t})})),r})),C(this,"pause",(function(t){return r.eventQueue.push({delayAfter:t}),r})),C(this,"echo",(function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"neutral",n=arguments.length>2?arguments[2]:void 0;return r.eventQueue.push({command:{text:"echo "+t,writeSpeed:e,output:t,pauseBeforeOutput:n}}),r})),C(this,"history",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"neutral",e=arguments.length>1?arguments[1]:void 0;return r.eventQueue.push({command:{text:"history",writeSpeed:t,output:r.getHistoryOutput,pauseBeforeOutput:e}}),r})),C(this,"getHistoryOutput",(function(){for(var t=[],e=0,n=r.historyStack.length;n>0;n--){var o="";if(n<10?o+="&nbsp;&nbsp;&nbsp;&nbsp;":n<100?o+="&nbsp;&nbsp;&nbsp;":n<1e3?o+="&nbsp;&nbsp;":n<1e4&&(o+="&nbsp;"),o+="".concat(n,"&nbsp;&nbsp;").concat(r.historyStack[n-1].text),t.push(o),++e>=r.HISTSIZE)break}return t.reverse().join("<br />")})),C(this,"clear",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"neutral",e=arguments.length>1?arguments[1]:void 0;return r.eventQueue.push({command:{text:"clear",writeSpeed:t,pauseBeforeOutput:e},logicAfter:function(){r.wrapperElement.innerHTML="",r.writeNewInputLineToStdout(),r.appendCursor()}}),r})),C(this,"mkdir",(function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"neutral",n=arguments.length>2?arguments[2]:void 0;return r.eventQueue.push({command:{text:"mkdir "+t,writeSpeed:e,output:function(){for(var e="",n=r.fileSystem.mkdir(t),o=0;o<n.length;o++)e+=n[o].message,o!=n.length-1&&(e+="<br>");return e},pauseBeforeOutput:n}}),r})),C(this,"run",(function(t){r.currentEvent=r.eventQueue.shift(),void 0!==r.currentEvent?void 0!==r.currentEvent.command?(r.historyStack.push(r.currentEvent.command),r.writeToStdout(r.currentEvent.command.text,r.currentEvent.command.writeSpeed,(function(){if(void 0!==r.currentEvent.command.output){var e="";e="function"==typeof r.currentEvent.command.output?r.currentEvent.command.output():r.currentEvent.command.output,setTimeout((function(){r.removeCursor(),r.writeLineBreakToStdout(),r.writeToStdout(e,0,(function(){r.writeLineBreakToStdout(),r.writeNewInputLineToStdout(),void 0!==r.currentEvent.logicAfter&&r.currentEvent.logicAfter(),r.appendCursor(),setTimeout((function(){r.run(t)}),r.currentEvent.delayAfter)}))}),r.currentEvent.command.pauseBeforeOutput)}else r.removeCursor(),r.writeLineBreakToStdout(),r.writeNewInputLineToStdout(),r.appendCursor(),void 0!==r.currentEvent.logicAfter&&r.currentEvent.logicAfter(),setTimeout((function(){r.run(t)}),r.currentEvent.delayAfter)}))):setTimeout((function(){r.run(t)}),r.currentEvent.delayAfter):void 0!==t&&t()})),C(this,"removeCursor",(function(){r.cursorElement.remove()})),C(this,"appendCursor",(function(){r.wrapperElement.appendChild(r.cursorElement)})),C(this,"getRandomIntegerInRange",(function(t,e){return Math.floor(Math.random()*(e-t+1)+t)})),C(this,"writeNewInputLineToStdout",(function(){r.writeEnviromentLineToStdout(),r.writeInputLineStartToStdout()})),C(this,"writeEnviromentLineToStdout",(function(){void 0!==r.options.enviroment&&r.options.enviroment.hostname.length>0&&r.options.enviroment.username.length>0&&(r.wrapperElement.innerHTML+=r.options.enviroment.username+"@"+r.options.enviroment.hostname+":")})),C(this,"writeInputLineStartToStdout",(function(){r.wrapperElement.innerHTML+="$ "})),C(this,"writeLineBreakToStdout",(function(){r.wrapperElement.innerHTML+="<br />"})),C(this,"writeToStdout",(function(t,e,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;0===e?(r.removeCursor(),r.wrapperElement.innerHTML+=t,n()):o<t.length?(r.removeCursor(),r.wrapperElement.innerHTML+=t[o],r.appendCursor(),o++,"neutral"===e?setTimeout((function(){return r.writeToStdout(t,e,n,o)}),r.getRandomIntegerInRange(80,120)):setTimeout((function(){return r.writeToStdout(t,e,n,o)}),e)):n()})),e&&(this.options=j(j({},this.options),e)),this.fileSystem=new a;var n=document.getElementById(this.options.wrapperId);switch(null===n&&((n=document.createElement("div")).id=this.options.wrapperId),this.options.wrapperClassName.length>0&&n.classList.add(this.options.wrapperClassName),this.wrapperElement=n,document.body.appendChild(this.wrapperElement),this.cursorElement=document.createElement("span"),this.cursorElement.id=this.options.cursorId,this.cursorElement.innerText=this.options.cursor,this.options.cursorAnimation){case"fluid":this.cursorElement.classList.add("terminal___cursor___fluid");break;case"static":this.cursorElement.classList.add("terminal___cursor___static");break;case void 0:this.cursorElement.classList.add("terminal___cursor___none")}this.cursorElement.classList.add(this.options.cursorClassName),this.writeNewInputLineToStdout(),this.appendCursor()}));const S=O})(),n=n.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QXNVRixTIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3Ivd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vc3JjL3N0eWxlcy5jc3MiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2FsZy9jb21wb25lbnRzLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvZGZzLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvZGlqa3N0cmEtYWxsLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvZGlqa3N0cmEuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2FsZy9maW5kLWN5Y2xlcy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvYWxnL2Zsb3lkLXdhcnNoYWxsLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2FsZy9pcy1hY3ljbGljLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvcG9zdG9yZGVyLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvcHJlb3JkZXIuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2FsZy9wcmltLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvdGFyamFuLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9hbGcvdG9wc29ydC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvZGF0YS9wcmlvcml0eS1xdWV1ZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9ncmFwaGxpYi9saWIvZ3JhcGguanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL2luZGV4LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9qc29uLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2dyYXBobGliL2xpYi9sb2Rhc2guanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvZ3JhcGhsaWIvbGliL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0hhc2guanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXQuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19TZXRDYWNoZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N0YWNrLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fU3ltYm9sLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fVWludDhBcnJheS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1dlYWtNYXAuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcHBseS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RWFjaC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5RmlsdGVyLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlJbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5SW5jbHVkZXNXaXRoLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlQdXNoLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXJyYXlSZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hcnJheVNvbWUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc2NpaVNpemUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19hc3NpZ25WYWx1ZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Fzc29jSW5kZXhPZi5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VBc3NpZ24uanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduSW4uanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQXNzaWduVmFsdWUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ2xvbmUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlQ3JlYXRlLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlRmlsdGVyLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZpbmRJbmRleC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGbGF0dGVuLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUZvci5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldEFsbEtleXMuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR2V0VGFnLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUhhcy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VIYXNJbi5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJbmRleE9mLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzQXJndW1lbnRzLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUlzRXF1YWwuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNFcXVhbERlZXAuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXAuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNNYXRjaC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hTi5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc05hdGl2ZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1NldC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VJc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXRlcmF0ZWUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlS2V5cy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWFwLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZU1hdGNoZXMuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVByb3BlcnR5RGVlcC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VSZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlUmVzdC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VTZXRUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUaW1lcy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmFyeS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VVbmlxLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVZhbHVlcy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NhY2hlSGFzLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdEZ1bmN0aW9uLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2FzdFBhdGguanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZUFycmF5QnVmZmVyLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZURhdGFWaWV3LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY2xvbmVSZWdFeHAuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jbG9uZVN5bWJvbC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Nsb25lVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlBcnJheS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3B5U3ltYm9scy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcHlTeW1ib2xzSW4uanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jb3JlSnNEYXRhLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlQmFzZUVhY2guanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jcmVhdGVCYXNlRm9yLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fY3JlYXRlU2V0LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbEFycmF5cy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2VxdWFsQnlUYWcuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19lcXVhbE9iamVjdHMuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldEFsbEtleXNJbi5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE1hcERhdGEuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRNYXRjaERhdGEuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXROYXRpdmUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0U3ltYm9sc0luLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VGFnLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0VmFsdWUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNQYXRoLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzVW5pY29kZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hEZWxldGUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoR2V0LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hTZXQuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pbml0Q2xvbmVBcnJheS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2luaXRDbG9uZUJ5VGFnLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faW5pdENsb25lT2JqZWN0LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNGbGF0dGVuYWJsZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzSW5kZXguanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc0tleS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5YWJsZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzTWFza2VkLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNQcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlR2V0LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcFRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXRjaGVzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21lbW9pemVDYXBwZWQuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbmF0aXZlS2V5c0luLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbm9kZVV0aWwuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX292ZXJBcmcuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vdmVyUmVzdC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zZXRDYWNoZUFkZC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldENhY2hlSGFzLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2V0VG9BcnJheS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3NldFRvU3RyaW5nLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc2hvcnRPdXQuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tEZWxldGUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdGFja0dldC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0YWNrSGFzLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RhY2tTZXQuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpY3RJbmRleE9mLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fc3RyaW5nU2l6ZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3N0cmluZ1RvUGF0aC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvS2V5LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL191bmljb2RlU2l6ZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvY2xvbmUuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2NvbnN0YW50LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lYWNoLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZmlsdGVyLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9mb3JFYWNoLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9nZXQuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2hhcy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaGFzSW4uanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lkZW50aXR5LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzQXJyYXlMaWtlT2JqZWN0LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNFbXB0eS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzTWFwLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1NldC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzU3ltYm9sLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL2lzVW5kZWZpbmVkLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9rZXlzSW4uanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL21hcC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbm9vcC5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3JlZHVjZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc2l6ZS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvc3R1YkFycmF5LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvU3RyaW5nLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvbG9kYXNoL3VuaW9uLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC92YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3Ivd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9Vbml4VGVybWluYWxFbXVsYXRvci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yL3dlYnBhY2svcnVudGltZS9ub2RlIG1vZHVsZSBkZWNvcmF0b3IiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3Ivd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vc3JjL1VuaXhGaWxlU3lzdGVtRW11bGF0b3IudHMiLCJ3ZWJwYWNrOi8vVW5peFRlcm1pbmFsRW11bGF0b3IvLi9zcmMvc3R5bGVzLmNzcz80NGIyIiwid2VicGFjazovL1VuaXhUZXJtaW5hbEVtdWxhdG9yLy4vc3JjL1VuaXhUZXJtaW5hbEVtdWxhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIlVuaXhUZXJtaW5hbEVtdWxhdG9yXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIlVuaXhUZXJtaW5hbEVtdWxhdG9yXCJdID0gZmFjdG9yeSgpO1xufSkoc2VsZiwgKCkgPT4ge1xucmV0dXJuICIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGtleWZyYW1lcyB0ZXJtaW5hbF9fX2N1cnNvcl9fX2ZsdWlkIHtcXHJcXG5cXHQwJSB7XFxyXFxuXFx0XFx0b3BhY2l0eTogMTAwJTtcXHJcXG5cXHR9XFxyXFxuXFx0NTAlIHtcXHJcXG5cXHRcXHRvcGFjaXR5OiAwJTtcXHJcXG5cXHR9XFxyXFxuXFx0MTAwJSB7XFxyXFxuXFx0XFx0b3BhY2l0eTogMTAwJTtcXHJcXG5cXHR9XFxyXFxufVxcclxcbi50ZXJtaW5hbF9fX2N1cnNvcl9fX2ZsdWlkIHtcXHJcXG5cXHRhbmltYXRpb246IHRlcm1pbmFsX19fY3Vyc29yX19fZmx1aWQgMXMgaW5maW5pdGU7XFxyXFxufVxcclxcblxcclxcbkBrZXlmcmFtZXMgdGVybWluYWxfX19jdXJzb3JfX19zdGF0aWMge1xcclxcblxcdDAlIHtcXHJcXG5cXHRcXHRvcGFjaXR5OiAxMDAlO1xcclxcblxcdH1cXHJcXG5cXHQ0OSUge1xcclxcblxcdFxcdG9wYWNpdHk6IDEwMCU7XFxyXFxuXFx0fVxcclxcblxcdDUwJSB7XFxyXFxuXFx0XFx0b3BhY2l0eTogMCU7XFxyXFxuXFx0fVxcclxcblxcdDk5JSB7XFxyXFxuXFx0XFx0b3BhY2l0eTogMCU7XFxyXFxuXFx0fVxcclxcblxcdDEwMCUge1xcclxcblxcdFxcdG9wYWNpdHk6IDEwMCU7XFxyXFxuXFx0fVxcclxcbn1cXHJcXG4udGVybWluYWxfX19jdXJzb3JfX19zdGF0aWMge1xcclxcblxcdGFuaW1hdGlvbjogdGVybWluYWxfX19jdXJzb3JfX19zdGF0aWMgMXMgaW5maW5pdGU7XFxyXFxufVxcclxcblxcclxcbi50ZXJtaW5hbF9fX2N1cnNvcl9fX25vbmUge1xcclxcblxcdGFuaW1hdGlvbjogbm9uZTtcXHJcXG59XFxyXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7Q0FDQztFQUNDLGFBQWE7Q0FDZDtDQUNBO0VBQ0MsV0FBVztDQUNaO0NBQ0E7RUFDQyxhQUFhO0NBQ2Q7QUFDRDtBQUNBO0NBQ0MsZ0RBQWdEO0FBQ2pEOztBQUVBO0NBQ0M7RUFDQyxhQUFhO0NBQ2Q7Q0FDQTtFQUNDLGFBQWE7Q0FDZDtDQUNBO0VBQ0MsV0FBVztDQUNaO0NBQ0E7RUFDQyxXQUFXO0NBQ1o7Q0FDQTtFQUNDLGFBQWE7Q0FDZDtBQUNEO0FBQ0E7Q0FDQyxpREFBaUQ7QUFDbEQ7O0FBRUE7Q0FDQyxlQUFlO0FBQ2hCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBrZXlmcmFtZXMgdGVybWluYWxfX19jdXJzb3JfX19mbHVpZCB7XFxyXFxuXFx0MCUge1xcclxcblxcdFxcdG9wYWNpdHk6IDEwMCU7XFxyXFxuXFx0fVxcclxcblxcdDUwJSB7XFxyXFxuXFx0XFx0b3BhY2l0eTogMCU7XFxyXFxuXFx0fVxcclxcblxcdDEwMCUge1xcclxcblxcdFxcdG9wYWNpdHk6IDEwMCU7XFxyXFxuXFx0fVxcclxcbn1cXHJcXG4udGVybWluYWxfX19jdXJzb3JfX19mbHVpZCB7XFxyXFxuXFx0YW5pbWF0aW9uOiB0ZXJtaW5hbF9fX2N1cnNvcl9fX2ZsdWlkIDFzIGluZmluaXRlO1xcclxcbn1cXHJcXG5cXHJcXG5Aa2V5ZnJhbWVzIHRlcm1pbmFsX19fY3Vyc29yX19fc3RhdGljIHtcXHJcXG5cXHQwJSB7XFxyXFxuXFx0XFx0b3BhY2l0eTogMTAwJTtcXHJcXG5cXHR9XFxyXFxuXFx0NDklIHtcXHJcXG5cXHRcXHRvcGFjaXR5OiAxMDAlO1xcclxcblxcdH1cXHJcXG5cXHQ1MCUge1xcclxcblxcdFxcdG9wYWNpdHk6IDAlO1xcclxcblxcdH1cXHJcXG5cXHQ5OSUge1xcclxcblxcdFxcdG9wYWNpdHk6IDAlO1xcclxcblxcdH1cXHJcXG5cXHQxMDAlIHtcXHJcXG5cXHRcXHRvcGFjaXR5OiAxMDAlO1xcclxcblxcdH1cXHJcXG59XFxyXFxuLnRlcm1pbmFsX19fY3Vyc29yX19fc3RhdGljIHtcXHJcXG5cXHRhbmltYXRpb246IHRlcm1pbmFsX19fY3Vyc29yX19fc3RhdGljIDFzIGluZmluaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4udGVybWluYWxfX19jdXJzb3JfX19ub25lIHtcXHJcXG5cXHRhbmltYXRpb246IG5vbmU7XFxyXFxufVxcclxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgQ2hyaXMgUGV0dGl0dFxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbiAqIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmUgbWV0OlxuICpcbiAqIDEuIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpc1xuICogbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKlxuICogMi4gUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLFxuICogdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvblxuICogYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKlxuICogMy4gTmVpdGhlciB0aGUgbmFtZSBvZiB0aGUgY29weXJpZ2h0IGhvbGRlciBub3IgdGhlIG5hbWVzIG9mIGl0cyBjb250cmlidXRvcnNcbiAqIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0XG4gKiBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4gKlxuICogVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EXG4gKiBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRFxuICogV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRVxuICogRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRVxuICogRk9SIEFOWSBESVJFQ1QsIElORElSRUNULCBJTkNJREVOVEFMLCBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUxcbiAqIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SXG4gKiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUlxuICogQ0FVU0VEIEFORCBPTiBBTlkgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSxcbiAqIE9SIFRPUlQgKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4gKiBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuICovXG5cbnZhciBsaWIgPSByZXF1aXJlKFwiLi9saWJcIik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBHcmFwaDogbGliLkdyYXBoLFxuICBqc29uOiByZXF1aXJlKFwiLi9saWIvanNvblwiKSxcbiAgYWxnOiByZXF1aXJlKFwiLi9saWIvYWxnXCIpLFxuICB2ZXJzaW9uOiBsaWIudmVyc2lvblxufTtcbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb21wb25lbnRzO1xuXG5mdW5jdGlvbiBjb21wb25lbnRzKGcpIHtcbiAgdmFyIHZpc2l0ZWQgPSB7fTtcbiAgdmFyIGNtcHRzID0gW107XG4gIHZhciBjbXB0O1xuXG4gIGZ1bmN0aW9uIGRmcyh2KSB7XG4gICAgaWYgKF8uaGFzKHZpc2l0ZWQsIHYpKSByZXR1cm47XG4gICAgdmlzaXRlZFt2XSA9IHRydWU7XG4gICAgY21wdC5wdXNoKHYpO1xuICAgIF8uZWFjaChnLnN1Y2Nlc3NvcnModiksIGRmcyk7XG4gICAgXy5lYWNoKGcucHJlZGVjZXNzb3JzKHYpLCBkZnMpO1xuICB9XG5cbiAgXy5lYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIGNtcHQgPSBbXTtcbiAgICBkZnModik7XG4gICAgaWYgKGNtcHQubGVuZ3RoKSB7XG4gICAgICBjbXB0cy5wdXNoKGNtcHQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNtcHRzO1xufVxuIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRmcztcblxuLypcbiAqIEEgaGVscGVyIHRoYXQgcHJlZm9ybXMgYSBwcmUtIG9yIHBvc3Qtb3JkZXIgdHJhdmVyc2FsIG9uIHRoZSBpbnB1dCBncmFwaFxuICogYW5kIHJldHVybnMgdGhlIG5vZGVzIGluIHRoZSBvcmRlciB0aGV5IHdlcmUgdmlzaXRlZC4gSWYgdGhlIGdyYXBoIGlzXG4gKiB1bmRpcmVjdGVkIHRoZW4gdGhpcyBhbGdvcml0aG0gd2lsbCBuYXZpZ2F0ZSB1c2luZyBuZWlnaGJvcnMuIElmIHRoZSBncmFwaFxuICogaXMgZGlyZWN0ZWQgdGhlbiB0aGlzIGFsZ29yaXRobSB3aWxsIG5hdmlnYXRlIHVzaW5nIHN1Y2Nlc3NvcnMuXG4gKlxuICogT3JkZXIgbXVzdCBiZSBvbmUgb2YgXCJwcmVcIiBvciBcInBvc3RcIi5cbiAqL1xuZnVuY3Rpb24gZGZzKGcsIHZzLCBvcmRlcikge1xuICBpZiAoIV8uaXNBcnJheSh2cykpIHtcbiAgICB2cyA9IFt2c107XG4gIH1cblxuICB2YXIgbmF2aWdhdGlvbiA9IChnLmlzRGlyZWN0ZWQoKSA/IGcuc3VjY2Vzc29ycyA6IGcubmVpZ2hib3JzKS5iaW5kKGcpO1xuXG4gIHZhciBhY2MgPSBbXTtcbiAgdmFyIHZpc2l0ZWQgPSB7fTtcbiAgXy5lYWNoKHZzLCBmdW5jdGlvbih2KSB7XG4gICAgaWYgKCFnLmhhc05vZGUodikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkdyYXBoIGRvZXMgbm90IGhhdmUgbm9kZTogXCIgKyB2KTtcbiAgICB9XG5cbiAgICBkb0RmcyhnLCB2LCBvcmRlciA9PT0gXCJwb3N0XCIsIHZpc2l0ZWQsIG5hdmlnYXRpb24sIGFjYyk7XG4gIH0pO1xuICByZXR1cm4gYWNjO1xufVxuXG5mdW5jdGlvbiBkb0RmcyhnLCB2LCBwb3N0b3JkZXIsIHZpc2l0ZWQsIG5hdmlnYXRpb24sIGFjYykge1xuICBpZiAoIV8uaGFzKHZpc2l0ZWQsIHYpKSB7XG4gICAgdmlzaXRlZFt2XSA9IHRydWU7XG5cbiAgICBpZiAoIXBvc3RvcmRlcikgeyBhY2MucHVzaCh2KTsgfVxuICAgIF8uZWFjaChuYXZpZ2F0aW9uKHYpLCBmdW5jdGlvbih3KSB7XG4gICAgICBkb0RmcyhnLCB3LCBwb3N0b3JkZXIsIHZpc2l0ZWQsIG5hdmlnYXRpb24sIGFjYyk7XG4gICAgfSk7XG4gICAgaWYgKHBvc3RvcmRlcikgeyBhY2MucHVzaCh2KTsgfVxuICB9XG59XG4iLCJ2YXIgZGlqa3N0cmEgPSByZXF1aXJlKFwiLi9kaWprc3RyYVwiKTtcbnZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkaWprc3RyYUFsbDtcblxuZnVuY3Rpb24gZGlqa3N0cmFBbGwoZywgd2VpZ2h0RnVuYywgZWRnZUZ1bmMpIHtcbiAgcmV0dXJuIF8udHJhbnNmb3JtKGcubm9kZXMoKSwgZnVuY3Rpb24oYWNjLCB2KSB7XG4gICAgYWNjW3ZdID0gZGlqa3N0cmEoZywgdiwgd2VpZ2h0RnVuYywgZWRnZUZ1bmMpO1xuICB9LCB7fSk7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG52YXIgUHJpb3JpdHlRdWV1ZSA9IHJlcXVpcmUoXCIuLi9kYXRhL3ByaW9yaXR5LXF1ZXVlXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRpamtzdHJhO1xuXG52YXIgREVGQVVMVF9XRUlHSFRfRlVOQyA9IF8uY29uc3RhbnQoMSk7XG5cbmZ1bmN0aW9uIGRpamtzdHJhKGcsIHNvdXJjZSwgd2VpZ2h0Rm4sIGVkZ2VGbikge1xuICByZXR1cm4gcnVuRGlqa3N0cmEoZywgU3RyaW5nKHNvdXJjZSksXG4gICAgd2VpZ2h0Rm4gfHwgREVGQVVMVF9XRUlHSFRfRlVOQyxcbiAgICBlZGdlRm4gfHwgZnVuY3Rpb24odikgeyByZXR1cm4gZy5vdXRFZGdlcyh2KTsgfSk7XG59XG5cbmZ1bmN0aW9uIHJ1bkRpamtzdHJhKGcsIHNvdXJjZSwgd2VpZ2h0Rm4sIGVkZ2VGbikge1xuICB2YXIgcmVzdWx0cyA9IHt9O1xuICB2YXIgcHEgPSBuZXcgUHJpb3JpdHlRdWV1ZSgpO1xuICB2YXIgdiwgdkVudHJ5O1xuXG4gIHZhciB1cGRhdGVOZWlnaGJvcnMgPSBmdW5jdGlvbihlZGdlKSB7XG4gICAgdmFyIHcgPSBlZGdlLnYgIT09IHYgPyBlZGdlLnYgOiBlZGdlLnc7XG4gICAgdmFyIHdFbnRyeSA9IHJlc3VsdHNbd107XG4gICAgdmFyIHdlaWdodCA9IHdlaWdodEZuKGVkZ2UpO1xuICAgIHZhciBkaXN0YW5jZSA9IHZFbnRyeS5kaXN0YW5jZSArIHdlaWdodDtcblxuICAgIGlmICh3ZWlnaHQgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkaWprc3RyYSBkb2VzIG5vdCBhbGxvdyBuZWdhdGl2ZSBlZGdlIHdlaWdodHMuIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICBcIkJhZCBlZGdlOiBcIiArIGVkZ2UgKyBcIiBXZWlnaHQ6IFwiICsgd2VpZ2h0KTtcbiAgICB9XG5cbiAgICBpZiAoZGlzdGFuY2UgPCB3RW50cnkuZGlzdGFuY2UpIHtcbiAgICAgIHdFbnRyeS5kaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgd0VudHJ5LnByZWRlY2Vzc29yID0gdjtcbiAgICAgIHBxLmRlY3JlYXNlKHcsIGRpc3RhbmNlKTtcbiAgICB9XG4gIH07XG5cbiAgZy5ub2RlcygpLmZvckVhY2goZnVuY3Rpb24odikge1xuICAgIHZhciBkaXN0YW5jZSA9IHYgPT09IHNvdXJjZSA/IDAgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgcmVzdWx0c1t2XSA9IHsgZGlzdGFuY2U6IGRpc3RhbmNlIH07XG4gICAgcHEuYWRkKHYsIGRpc3RhbmNlKTtcbiAgfSk7XG5cbiAgd2hpbGUgKHBxLnNpemUoKSA+IDApIHtcbiAgICB2ID0gcHEucmVtb3ZlTWluKCk7XG4gICAgdkVudHJ5ID0gcmVzdWx0c1t2XTtcbiAgICBpZiAodkVudHJ5LmRpc3RhbmNlID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGVkZ2VGbih2KS5mb3JFYWNoKHVwZGF0ZU5laWdoYm9ycyk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcbnZhciB0YXJqYW4gPSByZXF1aXJlKFwiLi90YXJqYW5cIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZmluZEN5Y2xlcztcblxuZnVuY3Rpb24gZmluZEN5Y2xlcyhnKSB7XG4gIHJldHVybiBfLmZpbHRlcih0YXJqYW4oZyksIGZ1bmN0aW9uKGNtcHQpIHtcbiAgICByZXR1cm4gY21wdC5sZW5ndGggPiAxIHx8IChjbXB0Lmxlbmd0aCA9PT0gMSAmJiBnLmhhc0VkZ2UoY21wdFswXSwgY21wdFswXSkpO1xuICB9KTtcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmbG95ZFdhcnNoYWxsO1xuXG52YXIgREVGQVVMVF9XRUlHSFRfRlVOQyA9IF8uY29uc3RhbnQoMSk7XG5cbmZ1bmN0aW9uIGZsb3lkV2Fyc2hhbGwoZywgd2VpZ2h0Rm4sIGVkZ2VGbikge1xuICByZXR1cm4gcnVuRmxveWRXYXJzaGFsbChnLFxuICAgIHdlaWdodEZuIHx8IERFRkFVTFRfV0VJR0hUX0ZVTkMsXG4gICAgZWRnZUZuIHx8IGZ1bmN0aW9uKHYpIHsgcmV0dXJuIGcub3V0RWRnZXModik7IH0pO1xufVxuXG5mdW5jdGlvbiBydW5GbG95ZFdhcnNoYWxsKGcsIHdlaWdodEZuLCBlZGdlRm4pIHtcbiAgdmFyIHJlc3VsdHMgPSB7fTtcbiAgdmFyIG5vZGVzID0gZy5ub2RlcygpO1xuXG4gIG5vZGVzLmZvckVhY2goZnVuY3Rpb24odikge1xuICAgIHJlc3VsdHNbdl0gPSB7fTtcbiAgICByZXN1bHRzW3ZdW3ZdID0geyBkaXN0YW5jZTogMCB9O1xuICAgIG5vZGVzLmZvckVhY2goZnVuY3Rpb24odykge1xuICAgICAgaWYgKHYgIT09IHcpIHtcbiAgICAgICAgcmVzdWx0c1t2XVt3XSA9IHsgZGlzdGFuY2U6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSB9O1xuICAgICAgfVxuICAgIH0pO1xuICAgIGVkZ2VGbih2KS5mb3JFYWNoKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgIHZhciB3ID0gZWRnZS52ID09PSB2ID8gZWRnZS53IDogZWRnZS52O1xuICAgICAgdmFyIGQgPSB3ZWlnaHRGbihlZGdlKTtcbiAgICAgIHJlc3VsdHNbdl1bd10gPSB7IGRpc3RhbmNlOiBkLCBwcmVkZWNlc3NvcjogdiB9O1xuICAgIH0pO1xuICB9KTtcblxuICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICB2YXIgcm93SyA9IHJlc3VsdHNba107XG4gICAgbm9kZXMuZm9yRWFjaChmdW5jdGlvbihpKSB7XG4gICAgICB2YXIgcm93SSA9IHJlc3VsdHNbaV07XG4gICAgICBub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uKGopIHtcbiAgICAgICAgdmFyIGlrID0gcm93SVtrXTtcbiAgICAgICAgdmFyIGtqID0gcm93S1tqXTtcbiAgICAgICAgdmFyIGlqID0gcm93SVtqXTtcbiAgICAgICAgdmFyIGFsdERpc3RhbmNlID0gaWsuZGlzdGFuY2UgKyBrai5kaXN0YW5jZTtcbiAgICAgICAgaWYgKGFsdERpc3RhbmNlIDwgaWouZGlzdGFuY2UpIHtcbiAgICAgICAgICBpai5kaXN0YW5jZSA9IGFsdERpc3RhbmNlO1xuICAgICAgICAgIGlqLnByZWRlY2Vzc29yID0ga2oucHJlZGVjZXNzb3I7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0cztcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wb25lbnRzOiByZXF1aXJlKFwiLi9jb21wb25lbnRzXCIpLFxuICBkaWprc3RyYTogcmVxdWlyZShcIi4vZGlqa3N0cmFcIiksXG4gIGRpamtzdHJhQWxsOiByZXF1aXJlKFwiLi9kaWprc3RyYS1hbGxcIiksXG4gIGZpbmRDeWNsZXM6IHJlcXVpcmUoXCIuL2ZpbmQtY3ljbGVzXCIpLFxuICBmbG95ZFdhcnNoYWxsOiByZXF1aXJlKFwiLi9mbG95ZC13YXJzaGFsbFwiKSxcbiAgaXNBY3ljbGljOiByZXF1aXJlKFwiLi9pcy1hY3ljbGljXCIpLFxuICBwb3N0b3JkZXI6IHJlcXVpcmUoXCIuL3Bvc3RvcmRlclwiKSxcbiAgcHJlb3JkZXI6IHJlcXVpcmUoXCIuL3ByZW9yZGVyXCIpLFxuICBwcmltOiByZXF1aXJlKFwiLi9wcmltXCIpLFxuICB0YXJqYW46IHJlcXVpcmUoXCIuL3RhcmphblwiKSxcbiAgdG9wc29ydDogcmVxdWlyZShcIi4vdG9wc29ydFwiKVxufTtcbiIsInZhciB0b3Bzb3J0ID0gcmVxdWlyZShcIi4vdG9wc29ydFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FjeWNsaWM7XG5cbmZ1bmN0aW9uIGlzQWN5Y2xpYyhnKSB7XG4gIHRyeSB7XG4gICAgdG9wc29ydChnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgdG9wc29ydC5DeWNsZUV4Y2VwdGlvbikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuIiwidmFyIGRmcyA9IHJlcXVpcmUoXCIuL2Rmc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBwb3N0b3JkZXI7XG5cbmZ1bmN0aW9uIHBvc3RvcmRlcihnLCB2cykge1xuICByZXR1cm4gZGZzKGcsIHZzLCBcInBvc3RcIik7XG59XG4iLCJ2YXIgZGZzID0gcmVxdWlyZShcIi4vZGZzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHByZW9yZGVyO1xuXG5mdW5jdGlvbiBwcmVvcmRlcihnLCB2cykge1xuICByZXR1cm4gZGZzKGcsIHZzLCBcInByZVwiKTtcbn1cbiIsInZhciBfID0gcmVxdWlyZShcIi4uL2xvZGFzaFwiKTtcbnZhciBHcmFwaCA9IHJlcXVpcmUoXCIuLi9ncmFwaFwiKTtcbnZhciBQcmlvcml0eVF1ZXVlID0gcmVxdWlyZShcIi4uL2RhdGEvcHJpb3JpdHktcXVldWVcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gcHJpbTtcblxuZnVuY3Rpb24gcHJpbShnLCB3ZWlnaHRGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgR3JhcGgoKTtcbiAgdmFyIHBhcmVudHMgPSB7fTtcbiAgdmFyIHBxID0gbmV3IFByaW9yaXR5UXVldWUoKTtcbiAgdmFyIHY7XG5cbiAgZnVuY3Rpb24gdXBkYXRlTmVpZ2hib3JzKGVkZ2UpIHtcbiAgICB2YXIgdyA9IGVkZ2UudiA9PT0gdiA/IGVkZ2UudyA6IGVkZ2UudjtcbiAgICB2YXIgcHJpID0gcHEucHJpb3JpdHkodyk7XG4gICAgaWYgKHByaSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgZWRnZVdlaWdodCA9IHdlaWdodEZ1bmMoZWRnZSk7XG4gICAgICBpZiAoZWRnZVdlaWdodCA8IHByaSkge1xuICAgICAgICBwYXJlbnRzW3ddID0gdjtcbiAgICAgICAgcHEuZGVjcmVhc2UodywgZWRnZVdlaWdodCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGcubm9kZUNvdW50KCkgPT09IDApIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgXy5lYWNoKGcubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHBxLmFkZCh2LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuICAgIHJlc3VsdC5zZXROb2RlKHYpO1xuICB9KTtcblxuICAvLyBTdGFydCBmcm9tIGFuIGFyYml0cmFyeSBub2RlXG4gIHBxLmRlY3JlYXNlKGcubm9kZXMoKVswXSwgMCk7XG5cbiAgdmFyIGluaXQgPSBmYWxzZTtcbiAgd2hpbGUgKHBxLnNpemUoKSA+IDApIHtcbiAgICB2ID0gcHEucmVtb3ZlTWluKCk7XG4gICAgaWYgKF8uaGFzKHBhcmVudHMsIHYpKSB7XG4gICAgICByZXN1bHQuc2V0RWRnZSh2LCBwYXJlbnRzW3ZdKTtcbiAgICB9IGVsc2UgaWYgKGluaXQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIklucHV0IGdyYXBoIGlzIG5vdCBjb25uZWN0ZWQ6IFwiICsgZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQgPSB0cnVlO1xuICAgIH1cblxuICAgIGcubm9kZUVkZ2VzKHYpLmZvckVhY2godXBkYXRlTmVpZ2hib3JzKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gdGFyamFuO1xuXG5mdW5jdGlvbiB0YXJqYW4oZykge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgc3RhY2sgPSBbXTtcbiAgdmFyIHZpc2l0ZWQgPSB7fTsgLy8gbm9kZSBpZCAtPiB7IG9uU3RhY2ssIGxvd2xpbmssIGluZGV4IH1cbiAgdmFyIHJlc3VsdHMgPSBbXTtcblxuICBmdW5jdGlvbiBkZnModikge1xuICAgIHZhciBlbnRyeSA9IHZpc2l0ZWRbdl0gPSB7XG4gICAgICBvblN0YWNrOiB0cnVlLFxuICAgICAgbG93bGluazogaW5kZXgsXG4gICAgICBpbmRleDogaW5kZXgrK1xuICAgIH07XG4gICAgc3RhY2sucHVzaCh2KTtcblxuICAgIGcuc3VjY2Vzc29ycyh2KS5mb3JFYWNoKGZ1bmN0aW9uKHcpIHtcbiAgICAgIGlmICghXy5oYXModmlzaXRlZCwgdykpIHtcbiAgICAgICAgZGZzKHcpO1xuICAgICAgICBlbnRyeS5sb3dsaW5rID0gTWF0aC5taW4oZW50cnkubG93bGluaywgdmlzaXRlZFt3XS5sb3dsaW5rKTtcbiAgICAgIH0gZWxzZSBpZiAodmlzaXRlZFt3XS5vblN0YWNrKSB7XG4gICAgICAgIGVudHJ5Lmxvd2xpbmsgPSBNYXRoLm1pbihlbnRyeS5sb3dsaW5rLCB2aXNpdGVkW3ddLmluZGV4KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChlbnRyeS5sb3dsaW5rID09PSBlbnRyeS5pbmRleCkge1xuICAgICAgdmFyIGNtcHQgPSBbXTtcbiAgICAgIHZhciB3O1xuICAgICAgZG8ge1xuICAgICAgICB3ID0gc3RhY2sucG9wKCk7XG4gICAgICAgIHZpc2l0ZWRbd10ub25TdGFjayA9IGZhbHNlO1xuICAgICAgICBjbXB0LnB1c2godyk7XG4gICAgICB9IHdoaWxlICh2ICE9PSB3KTtcbiAgICAgIHJlc3VsdHMucHVzaChjbXB0KTtcbiAgICB9XG4gIH1cblxuICBnLm5vZGVzKCkuZm9yRWFjaChmdW5jdGlvbih2KSB7XG4gICAgaWYgKCFfLmhhcyh2aXNpdGVkLCB2KSkge1xuICAgICAgZGZzKHYpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gdG9wc29ydDtcbnRvcHNvcnQuQ3ljbGVFeGNlcHRpb24gPSBDeWNsZUV4Y2VwdGlvbjtcblxuZnVuY3Rpb24gdG9wc29ydChnKSB7XG4gIHZhciB2aXNpdGVkID0ge307XG4gIHZhciBzdGFjayA9IHt9O1xuICB2YXIgcmVzdWx0cyA9IFtdO1xuXG4gIGZ1bmN0aW9uIHZpc2l0KG5vZGUpIHtcbiAgICBpZiAoXy5oYXMoc3RhY2ssIG5vZGUpKSB7XG4gICAgICB0aHJvdyBuZXcgQ3ljbGVFeGNlcHRpb24oKTtcbiAgICB9XG5cbiAgICBpZiAoIV8uaGFzKHZpc2l0ZWQsIG5vZGUpKSB7XG4gICAgICBzdGFja1tub2RlXSA9IHRydWU7XG4gICAgICB2aXNpdGVkW25vZGVdID0gdHJ1ZTtcbiAgICAgIF8uZWFjaChnLnByZWRlY2Vzc29ycyhub2RlKSwgdmlzaXQpO1xuICAgICAgZGVsZXRlIHN0YWNrW25vZGVdO1xuICAgICAgcmVzdWx0cy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIF8uZWFjaChnLnNpbmtzKCksIHZpc2l0KTtcblxuICBpZiAoXy5zaXplKHZpc2l0ZWQpICE9PSBnLm5vZGVDb3VudCgpKSB7XG4gICAgdGhyb3cgbmV3IEN5Y2xlRXhjZXB0aW9uKCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gQ3ljbGVFeGNlcHRpb24oKSB7fVxuQ3ljbGVFeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7IC8vIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgRXJyb3IgdG8gcGFzcyB0ZXN0aW5nIiwidmFyIF8gPSByZXF1aXJlKFwiLi4vbG9kYXNoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByaW9yaXR5UXVldWU7XG5cbi8qKlxuICogQSBtaW4tcHJpb3JpdHkgcXVldWUgZGF0YSBzdHJ1Y3R1cmUuIFRoaXMgYWxnb3JpdGhtIGlzIGRlcml2ZWQgZnJvbSBDb3JtZW4sXG4gKiBldCBhbC4sIFwiSW50cm9kdWN0aW9uIHRvIEFsZ29yaXRobXNcIi4gVGhlIGJhc2ljIGlkZWEgb2YgYSBtaW4tcHJpb3JpdHlcbiAqIHF1ZXVlIGlzIHRoYXQgeW91IGNhbiBlZmZpY2llbnRseSAoaW4gTygxKSB0aW1lKSBnZXQgdGhlIHNtYWxsZXN0IGtleSBpblxuICogdGhlIHF1ZXVlLiBBZGRpbmcgYW5kIHJlbW92aW5nIGVsZW1lbnRzIHRha2VzIE8obG9nIG4pIHRpbWUuIEEga2V5IGNhblxuICogaGF2ZSBpdHMgcHJpb3JpdHkgZGVjcmVhc2VkIGluIE8obG9nIG4pIHRpbWUuXG4gKi9cbmZ1bmN0aW9uIFByaW9yaXR5UXVldWUoKSB7XG4gIHRoaXMuX2FyciA9IFtdO1xuICB0aGlzLl9rZXlJbmRpY2VzID0ge307XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBxdWV1ZS4gVGFrZXMgYE8oMSlgIHRpbWUuXG4gKi9cblByaW9yaXR5UXVldWUucHJvdG90eXBlLnNpemUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2Fyci5sZW5ndGg7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGtleXMgdGhhdCBhcmUgaW4gdGhlIHF1ZXVlLiBUYWtlcyBgTyhuKWAgdGltZS5cbiAqL1xuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fYXJyLm1hcChmdW5jdGlvbih4KSB7IHJldHVybiB4LmtleTsgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgYHRydWVgIGlmICoqa2V5KiogaXMgaW4gdGhlIHF1ZXVlIGFuZCBgZmFsc2VgIGlmIG5vdC5cbiAqL1xuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24oa2V5KSB7XG4gIHJldHVybiBfLmhhcyh0aGlzLl9rZXlJbmRpY2VzLCBrZXkpO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwcmlvcml0eSBmb3IgKiprZXkqKi4gSWYgKiprZXkqKiBpcyBub3QgcHJlc2VudCBpbiB0aGUgcXVldWVcbiAqIHRoZW4gdGhpcyBmdW5jdGlvbiByZXR1cm5zIGB1bmRlZmluZWRgLiBUYWtlcyBgTygxKWAgdGltZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0ga2V5XG4gKi9cblByaW9yaXR5UXVldWUucHJvdG90eXBlLnByaW9yaXR5ID0gZnVuY3Rpb24oa2V5KSB7XG4gIHZhciBpbmRleCA9IHRoaXMuX2tleUluZGljZXNba2V5XTtcbiAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJyW2luZGV4XS5wcmlvcml0eTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBrZXkgZm9yIHRoZSBtaW5pbXVtIGVsZW1lbnQgaW4gdGhpcyBxdWV1ZS4gSWYgdGhlIHF1ZXVlIGlzXG4gKiBlbXB0eSB0aGlzIGZ1bmN0aW9uIHRocm93cyBhbiBFcnJvci4gVGFrZXMgYE8oMSlgIHRpbWUuXG4gKi9cblByaW9yaXR5UXVldWUucHJvdG90eXBlLm1pbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5zaXplKCkgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJRdWV1ZSB1bmRlcmZsb3dcIik7XG4gIH1cbiAgcmV0dXJuIHRoaXMuX2FyclswXS5rZXk7XG59O1xuXG4vKipcbiAqIEluc2VydHMgYSBuZXcga2V5IGludG8gdGhlIHByaW9yaXR5IHF1ZXVlLiBJZiB0aGUga2V5IGFscmVhZHkgZXhpc3RzIGluXG4gKiB0aGUgcXVldWUgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGBmYWxzZWA7IG90aGVyd2lzZSBpdCB3aWxsIHJldHVybiBgdHJ1ZWAuXG4gKiBUYWtlcyBgTyhuKWAgdGltZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0ga2V5IHRoZSBrZXkgdG8gYWRkXG4gKiBAcGFyYW0ge051bWJlcn0gcHJpb3JpdHkgdGhlIGluaXRpYWwgcHJpb3JpdHkgZm9yIHRoZSBrZXlcbiAqL1xuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24oa2V5LCBwcmlvcml0eSkge1xuICB2YXIga2V5SW5kaWNlcyA9IHRoaXMuX2tleUluZGljZXM7XG4gIGtleSA9IFN0cmluZyhrZXkpO1xuICBpZiAoIV8uaGFzKGtleUluZGljZXMsIGtleSkpIHtcbiAgICB2YXIgYXJyID0gdGhpcy5fYXJyO1xuICAgIHZhciBpbmRleCA9IGFyci5sZW5ndGg7XG4gICAga2V5SW5kaWNlc1trZXldID0gaW5kZXg7XG4gICAgYXJyLnB1c2goe2tleToga2V5LCBwcmlvcml0eTogcHJpb3JpdHl9KTtcbiAgICB0aGlzLl9kZWNyZWFzZShpbmRleCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuLyoqXG4gKiBSZW1vdmVzIGFuZCByZXR1cm5zIHRoZSBzbWFsbGVzdCBrZXkgaW4gdGhlIHF1ZXVlLiBUYWtlcyBgTyhsb2cgbilgIHRpbWUuXG4gKi9cblByaW9yaXR5UXVldWUucHJvdG90eXBlLnJlbW92ZU1pbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9zd2FwKDAsIHRoaXMuX2Fyci5sZW5ndGggLSAxKTtcbiAgdmFyIG1pbiA9IHRoaXMuX2Fyci5wb3AoKTtcbiAgZGVsZXRlIHRoaXMuX2tleUluZGljZXNbbWluLmtleV07XG4gIHRoaXMuX2hlYXBpZnkoMCk7XG4gIHJldHVybiBtaW4ua2V5O1xufTtcblxuLyoqXG4gKiBEZWNyZWFzZXMgdGhlIHByaW9yaXR5IGZvciAqKmtleSoqIHRvICoqcHJpb3JpdHkqKi4gSWYgdGhlIG5ldyBwcmlvcml0eSBpc1xuICogZ3JlYXRlciB0aGFuIHRoZSBwcmV2aW91cyBwcmlvcml0eSwgdGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGFuIEVycm9yLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBrZXkgdGhlIGtleSBmb3Igd2hpY2ggdG8gcmFpc2UgcHJpb3JpdHlcbiAqIEBwYXJhbSB7TnVtYmVyfSBwcmlvcml0eSB0aGUgbmV3IHByaW9yaXR5IGZvciB0aGUga2V5XG4gKi9cblByaW9yaXR5UXVldWUucHJvdG90eXBlLmRlY3JlYXNlID0gZnVuY3Rpb24oa2V5LCBwcmlvcml0eSkge1xuICB2YXIgaW5kZXggPSB0aGlzLl9rZXlJbmRpY2VzW2tleV07XG4gIGlmIChwcmlvcml0eSA+IHRoaXMuX2FycltpbmRleF0ucHJpb3JpdHkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOZXcgcHJpb3JpdHkgaXMgZ3JlYXRlciB0aGFuIGN1cnJlbnQgcHJpb3JpdHkuIFwiICtcbiAgICAgICAgXCJLZXk6IFwiICsga2V5ICsgXCIgT2xkOiBcIiArIHRoaXMuX2FycltpbmRleF0ucHJpb3JpdHkgKyBcIiBOZXc6IFwiICsgcHJpb3JpdHkpO1xuICB9XG4gIHRoaXMuX2FycltpbmRleF0ucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgdGhpcy5fZGVjcmVhc2UoaW5kZXgpO1xufTtcblxuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuX2hlYXBpZnkgPSBmdW5jdGlvbihpKSB7XG4gIHZhciBhcnIgPSB0aGlzLl9hcnI7XG4gIHZhciBsID0gMiAqIGk7XG4gIHZhciByID0gbCArIDE7XG4gIHZhciBsYXJnZXN0ID0gaTtcbiAgaWYgKGwgPCBhcnIubGVuZ3RoKSB7XG4gICAgbGFyZ2VzdCA9IGFycltsXS5wcmlvcml0eSA8IGFycltsYXJnZXN0XS5wcmlvcml0eSA/IGwgOiBsYXJnZXN0O1xuICAgIGlmIChyIDwgYXJyLmxlbmd0aCkge1xuICAgICAgbGFyZ2VzdCA9IGFycltyXS5wcmlvcml0eSA8IGFycltsYXJnZXN0XS5wcmlvcml0eSA/IHIgOiBsYXJnZXN0O1xuICAgIH1cbiAgICBpZiAobGFyZ2VzdCAhPT0gaSkge1xuICAgICAgdGhpcy5fc3dhcChpLCBsYXJnZXN0KTtcbiAgICAgIHRoaXMuX2hlYXBpZnkobGFyZ2VzdCk7XG4gICAgfVxuICB9XG59O1xuXG5Qcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5fZGVjcmVhc2UgPSBmdW5jdGlvbihpbmRleCkge1xuICB2YXIgYXJyID0gdGhpcy5fYXJyO1xuICB2YXIgcHJpb3JpdHkgPSBhcnJbaW5kZXhdLnByaW9yaXR5O1xuICB2YXIgcGFyZW50O1xuICB3aGlsZSAoaW5kZXggIT09IDApIHtcbiAgICBwYXJlbnQgPSBpbmRleCA+PiAxO1xuICAgIGlmIChhcnJbcGFyZW50XS5wcmlvcml0eSA8IHByaW9yaXR5KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdGhpcy5fc3dhcChpbmRleCwgcGFyZW50KTtcbiAgICBpbmRleCA9IHBhcmVudDtcbiAgfVxufTtcblxuUHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUuX3N3YXAgPSBmdW5jdGlvbihpLCBqKSB7XG4gIHZhciBhcnIgPSB0aGlzLl9hcnI7XG4gIHZhciBrZXlJbmRpY2VzID0gdGhpcy5fa2V5SW5kaWNlcztcbiAgdmFyIG9yaWdBcnJJID0gYXJyW2ldO1xuICB2YXIgb3JpZ0FyckogPSBhcnJbal07XG4gIGFycltpXSA9IG9yaWdBcnJKO1xuICBhcnJbal0gPSBvcmlnQXJySTtcbiAga2V5SW5kaWNlc1tvcmlnQXJySi5rZXldID0gaTtcbiAga2V5SW5kaWNlc1tvcmlnQXJySS5rZXldID0gajtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF8gPSByZXF1aXJlKFwiLi9sb2Rhc2hcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gR3JhcGg7XG5cbnZhciBERUZBVUxUX0VER0VfTkFNRSA9IFwiXFx4MDBcIjtcbnZhciBHUkFQSF9OT0RFID0gXCJcXHgwMFwiO1xudmFyIEVER0VfS0VZX0RFTElNID0gXCJcXHgwMVwiO1xuXG4vLyBJbXBsZW1lbnRhdGlvbiBub3Rlczpcbi8vXG4vLyAgKiBOb2RlIGlkIHF1ZXJ5IGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIHN0cmluZyBpZHMgZm9yIHRoZSBub2Rlc1xuLy8gICogRWRnZSBpZCBxdWVyeSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBcImVkZ2VPYmpcIiwgZWRnZSBvYmplY3QsIHRoYXQgaXNcbi8vICAgIGNvbXBvc2VkIG9mIGVub3VnaCBpbmZvcm1hdGlvbiB0byB1bmlxdWVseSBpZGVudGlmeSBhbiBlZGdlOiB7diwgdywgbmFtZX0uXG4vLyAgKiBJbnRlcm5hbGx5IHdlIHVzZSBhbiBcImVkZ2VJZFwiLCBhIHN0cmluZ2lmaWVkIGZvcm0gb2YgdGhlIGVkZ2VPYmosIHRvXG4vLyAgICByZWZlcmVuY2UgZWRnZXMuIFRoaXMgaXMgYmVjYXVzZSB3ZSBuZWVkIGEgcGVyZm9ybWFudCB3YXkgdG8gbG9vayB0aGVzZVxuLy8gICAgZWRnZXMgdXAgYW5kLCBvYmplY3QgcHJvcGVydGllcywgd2hpY2ggaGF2ZSBzdHJpbmcga2V5cywgYXJlIHRoZSBjbG9zZXN0XG4vLyAgICB3ZSdyZSBnb2luZyB0byBnZXQgdG8gYSBwZXJmb3JtYW50IGhhc2h0YWJsZSBpbiBKYXZhU2NyaXB0LlxuXG5mdW5jdGlvbiBHcmFwaChvcHRzKSB7XG4gIHRoaXMuX2lzRGlyZWN0ZWQgPSBfLmhhcyhvcHRzLCBcImRpcmVjdGVkXCIpID8gb3B0cy5kaXJlY3RlZCA6IHRydWU7XG4gIHRoaXMuX2lzTXVsdGlncmFwaCA9IF8uaGFzKG9wdHMsIFwibXVsdGlncmFwaFwiKSA/IG9wdHMubXVsdGlncmFwaCA6IGZhbHNlO1xuICB0aGlzLl9pc0NvbXBvdW5kID0gXy5oYXMob3B0cywgXCJjb21wb3VuZFwiKSA/IG9wdHMuY29tcG91bmQgOiBmYWxzZTtcblxuICAvLyBMYWJlbCBmb3IgdGhlIGdyYXBoIGl0c2VsZlxuICB0aGlzLl9sYWJlbCA9IHVuZGVmaW5lZDtcblxuICAvLyBEZWZhdWx0cyB0byBiZSBzZXQgd2hlbiBjcmVhdGluZyBhIG5ldyBub2RlXG4gIHRoaXMuX2RlZmF1bHROb2RlTGFiZWxGbiA9IF8uY29uc3RhbnQodW5kZWZpbmVkKTtcblxuICAvLyBEZWZhdWx0cyB0byBiZSBzZXQgd2hlbiBjcmVhdGluZyBhIG5ldyBlZGdlXG4gIHRoaXMuX2RlZmF1bHRFZGdlTGFiZWxGbiA9IF8uY29uc3RhbnQodW5kZWZpbmVkKTtcblxuICAvLyB2IC0+IGxhYmVsXG4gIHRoaXMuX25vZGVzID0ge307XG5cbiAgaWYgKHRoaXMuX2lzQ29tcG91bmQpIHtcbiAgICAvLyB2IC0+IHBhcmVudFxuICAgIHRoaXMuX3BhcmVudCA9IHt9O1xuXG4gICAgLy8gdiAtPiBjaGlsZHJlblxuICAgIHRoaXMuX2NoaWxkcmVuID0ge307XG4gICAgdGhpcy5fY2hpbGRyZW5bR1JBUEhfTk9ERV0gPSB7fTtcbiAgfVxuXG4gIC8vIHYgLT4gZWRnZU9ialxuICB0aGlzLl9pbiA9IHt9O1xuXG4gIC8vIHUgLT4gdiAtPiBOdW1iZXJcbiAgdGhpcy5fcHJlZHMgPSB7fTtcblxuICAvLyB2IC0+IGVkZ2VPYmpcbiAgdGhpcy5fb3V0ID0ge307XG5cbiAgLy8gdiAtPiB3IC0+IE51bWJlclxuICB0aGlzLl9zdWNzID0ge307XG5cbiAgLy8gZSAtPiBlZGdlT2JqXG4gIHRoaXMuX2VkZ2VPYmpzID0ge307XG5cbiAgLy8gZSAtPiBsYWJlbFxuICB0aGlzLl9lZGdlTGFiZWxzID0ge307XG59XG5cbi8qIE51bWJlciBvZiBub2RlcyBpbiB0aGUgZ3JhcGguIFNob3VsZCBvbmx5IGJlIGNoYW5nZWQgYnkgdGhlIGltcGxlbWVudGF0aW9uLiAqL1xuR3JhcGgucHJvdG90eXBlLl9ub2RlQ291bnQgPSAwO1xuXG4vKiBOdW1iZXIgb2YgZWRnZXMgaW4gdGhlIGdyYXBoLiBTaG91bGQgb25seSBiZSBjaGFuZ2VkIGJ5IHRoZSBpbXBsZW1lbnRhdGlvbi4gKi9cbkdyYXBoLnByb3RvdHlwZS5fZWRnZUNvdW50ID0gMDtcblxuXG4vKiA9PT0gR3JhcGggZnVuY3Rpb25zID09PT09PT09PSAqL1xuXG5HcmFwaC5wcm90b3R5cGUuaXNEaXJlY3RlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5faXNEaXJlY3RlZDtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5pc011bHRpZ3JhcGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2lzTXVsdGlncmFwaDtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5pc0NvbXBvdW5kID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLl9pc0NvbXBvdW5kO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnNldEdyYXBoID0gZnVuY3Rpb24obGFiZWwpIHtcbiAgdGhpcy5fbGFiZWwgPSBsYWJlbDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuZ3JhcGggPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX2xhYmVsO1xufTtcblxuXG4vKiA9PT0gTm9kZSBmdW5jdGlvbnMgPT09PT09PT09PSAqL1xuXG5HcmFwaC5wcm90b3R5cGUuc2V0RGVmYXVsdE5vZGVMYWJlbCA9IGZ1bmN0aW9uKG5ld0RlZmF1bHQpIHtcbiAgaWYgKCFfLmlzRnVuY3Rpb24obmV3RGVmYXVsdCkpIHtcbiAgICBuZXdEZWZhdWx0ID0gXy5jb25zdGFudChuZXdEZWZhdWx0KTtcbiAgfVxuICB0aGlzLl9kZWZhdWx0Tm9kZUxhYmVsRm4gPSBuZXdEZWZhdWx0O1xuICByZXR1cm4gdGhpcztcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5ub2RlQ291bnQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuX25vZGVDb3VudDtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5ub2RlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gXy5rZXlzKHRoaXMuX25vZGVzKTtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5zb3VyY2VzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgcmV0dXJuIF8uZmlsdGVyKHRoaXMubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgIHJldHVybiBfLmlzRW1wdHkoc2VsZi5faW5bdl0pO1xuICB9KTtcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5zaW5rcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHJldHVybiBfLmZpbHRlcih0aGlzLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICByZXR1cm4gXy5pc0VtcHR5KHNlbGYuX291dFt2XSk7XG4gIH0pO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnNldE5vZGVzID0gZnVuY3Rpb24odnMsIHZhbHVlKSB7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIF8uZWFjaCh2cywgZnVuY3Rpb24odikge1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHNlbGYuc2V0Tm9kZSh2LCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuc2V0Tm9kZSh2KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkdyYXBoLnByb3RvdHlwZS5zZXROb2RlID0gZnVuY3Rpb24odiwgdmFsdWUpIHtcbiAgaWYgKF8uaGFzKHRoaXMuX25vZGVzLCB2KSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5fbm9kZXNbdl0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB0aGlzLl9ub2Rlc1t2XSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gdmFsdWUgOiB0aGlzLl9kZWZhdWx0Tm9kZUxhYmVsRm4odik7XG4gIGlmICh0aGlzLl9pc0NvbXBvdW5kKSB7XG4gICAgdGhpcy5fcGFyZW50W3ZdID0gR1JBUEhfTk9ERTtcbiAgICB0aGlzLl9jaGlsZHJlblt2XSA9IHt9O1xuICAgIHRoaXMuX2NoaWxkcmVuW0dSQVBIX05PREVdW3ZdID0gdHJ1ZTtcbiAgfVxuICB0aGlzLl9pblt2XSA9IHt9O1xuICB0aGlzLl9wcmVkc1t2XSA9IHt9O1xuICB0aGlzLl9vdXRbdl0gPSB7fTtcbiAgdGhpcy5fc3Vjc1t2XSA9IHt9O1xuICArK3RoaXMuX25vZGVDb3VudDtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUubm9kZSA9IGZ1bmN0aW9uKHYpIHtcbiAgcmV0dXJuIHRoaXMuX25vZGVzW3ZdO1xufTtcblxuR3JhcGgucHJvdG90eXBlLmhhc05vZGUgPSBmdW5jdGlvbih2KSB7XG4gIHJldHVybiBfLmhhcyh0aGlzLl9ub2Rlcywgdik7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUucmVtb3ZlTm9kZSA9ICBmdW5jdGlvbih2KSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKF8uaGFzKHRoaXMuX25vZGVzLCB2KSkge1xuICAgIHZhciByZW1vdmVFZGdlID0gZnVuY3Rpb24oZSkgeyBzZWxmLnJlbW92ZUVkZ2Uoc2VsZi5fZWRnZU9ianNbZV0pOyB9O1xuICAgIGRlbGV0ZSB0aGlzLl9ub2Rlc1t2XTtcbiAgICBpZiAodGhpcy5faXNDb21wb3VuZCkge1xuICAgICAgdGhpcy5fcmVtb3ZlRnJvbVBhcmVudHNDaGlsZExpc3Qodik7XG4gICAgICBkZWxldGUgdGhpcy5fcGFyZW50W3ZdO1xuICAgICAgXy5lYWNoKHRoaXMuY2hpbGRyZW4odiksIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIHNlbGYuc2V0UGFyZW50KGNoaWxkKTtcbiAgICAgIH0pO1xuICAgICAgZGVsZXRlIHRoaXMuX2NoaWxkcmVuW3ZdO1xuICAgIH1cbiAgICBfLmVhY2goXy5rZXlzKHRoaXMuX2luW3ZdKSwgcmVtb3ZlRWRnZSk7XG4gICAgZGVsZXRlIHRoaXMuX2luW3ZdO1xuICAgIGRlbGV0ZSB0aGlzLl9wcmVkc1t2XTtcbiAgICBfLmVhY2goXy5rZXlzKHRoaXMuX291dFt2XSksIHJlbW92ZUVkZ2UpO1xuICAgIGRlbGV0ZSB0aGlzLl9vdXRbdl07XG4gICAgZGVsZXRlIHRoaXMuX3N1Y3Nbdl07XG4gICAgLS10aGlzLl9ub2RlQ291bnQ7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuc2V0UGFyZW50ID0gZnVuY3Rpb24odiwgcGFyZW50KSB7XG4gIGlmICghdGhpcy5faXNDb21wb3VuZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzZXQgcGFyZW50IGluIGEgbm9uLWNvbXBvdW5kIGdyYXBoXCIpO1xuICB9XG5cbiAgaWYgKF8uaXNVbmRlZmluZWQocGFyZW50KSkge1xuICAgIHBhcmVudCA9IEdSQVBIX05PREU7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ29lcmNlIHBhcmVudCB0byBzdHJpbmdcbiAgICBwYXJlbnQgKz0gXCJcIjtcbiAgICBmb3IgKHZhciBhbmNlc3RvciA9IHBhcmVudDtcbiAgICAgICFfLmlzVW5kZWZpbmVkKGFuY2VzdG9yKTtcbiAgICAgIGFuY2VzdG9yID0gdGhpcy5wYXJlbnQoYW5jZXN0b3IpKSB7XG4gICAgICBpZiAoYW5jZXN0b3IgPT09IHYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2V0dGluZyBcIiArIHBhcmVudCsgXCIgYXMgcGFyZW50IG9mIFwiICsgdiArXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiB3b3VsZCBjcmVhdGUgYSBjeWNsZVwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldE5vZGUocGFyZW50KTtcbiAgfVxuXG4gIHRoaXMuc2V0Tm9kZSh2KTtcbiAgdGhpcy5fcmVtb3ZlRnJvbVBhcmVudHNDaGlsZExpc3Qodik7XG4gIHRoaXMuX3BhcmVudFt2XSA9IHBhcmVudDtcbiAgdGhpcy5fY2hpbGRyZW5bcGFyZW50XVt2XSA9IHRydWU7XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhcGgucHJvdG90eXBlLl9yZW1vdmVGcm9tUGFyZW50c0NoaWxkTGlzdCA9IGZ1bmN0aW9uKHYpIHtcbiAgZGVsZXRlIHRoaXMuX2NoaWxkcmVuW3RoaXMuX3BhcmVudFt2XV1bdl07XG59O1xuXG5HcmFwaC5wcm90b3R5cGUucGFyZW50ID0gZnVuY3Rpb24odikge1xuICBpZiAodGhpcy5faXNDb21wb3VuZCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLl9wYXJlbnRbdl07XG4gICAgaWYgKHBhcmVudCAhPT0gR1JBUEhfTk9ERSkge1xuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9XG4gIH1cbn07XG5cbkdyYXBoLnByb3RvdHlwZS5jaGlsZHJlbiA9IGZ1bmN0aW9uKHYpIHtcbiAgaWYgKF8uaXNVbmRlZmluZWQodikpIHtcbiAgICB2ID0gR1JBUEhfTk9ERTtcbiAgfVxuXG4gIGlmICh0aGlzLl9pc0NvbXBvdW5kKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW5bdl07XG4gICAgaWYgKGNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gXy5rZXlzKGNoaWxkcmVuKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodiA9PT0gR1JBUEhfTk9ERSkge1xuICAgIHJldHVybiB0aGlzLm5vZGVzKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5oYXNOb2RlKHYpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuXG5HcmFwaC5wcm90b3R5cGUucHJlZGVjZXNzb3JzID0gZnVuY3Rpb24odikge1xuICB2YXIgcHJlZHNWID0gdGhpcy5fcHJlZHNbdl07XG4gIGlmIChwcmVkc1YpIHtcbiAgICByZXR1cm4gXy5rZXlzKHByZWRzVik7XG4gIH1cbn07XG5cbkdyYXBoLnByb3RvdHlwZS5zdWNjZXNzb3JzID0gZnVuY3Rpb24odikge1xuICB2YXIgc3Vjc1YgPSB0aGlzLl9zdWNzW3ZdO1xuICBpZiAoc3Vjc1YpIHtcbiAgICByZXR1cm4gXy5rZXlzKHN1Y3NWKTtcbiAgfVxufTtcblxuR3JhcGgucHJvdG90eXBlLm5laWdoYm9ycyA9IGZ1bmN0aW9uKHYpIHtcbiAgdmFyIHByZWRzID0gdGhpcy5wcmVkZWNlc3NvcnModik7XG4gIGlmIChwcmVkcykge1xuICAgIHJldHVybiBfLnVuaW9uKHByZWRzLCB0aGlzLnN1Y2Nlc3NvcnModikpO1xuICB9XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuaXNMZWFmID0gZnVuY3Rpb24gKHYpIHtcbiAgdmFyIG5laWdoYm9ycztcbiAgaWYgKHRoaXMuaXNEaXJlY3RlZCgpKSB7XG4gICAgbmVpZ2hib3JzID0gdGhpcy5zdWNjZXNzb3JzKHYpO1xuICB9IGVsc2Uge1xuICAgIG5laWdoYm9ycyA9IHRoaXMubmVpZ2hib3JzKHYpO1xuICB9XG4gIHJldHVybiBuZWlnaGJvcnMubGVuZ3RoID09PSAwO1xufTtcblxuR3JhcGgucHJvdG90eXBlLmZpbHRlck5vZGVzID0gZnVuY3Rpb24oZmlsdGVyKSB7XG4gIHZhciBjb3B5ID0gbmV3IHRoaXMuY29uc3RydWN0b3Ioe1xuICAgIGRpcmVjdGVkOiB0aGlzLl9pc0RpcmVjdGVkLFxuICAgIG11bHRpZ3JhcGg6IHRoaXMuX2lzTXVsdGlncmFwaCxcbiAgICBjb21wb3VuZDogdGhpcy5faXNDb21wb3VuZFxuICB9KTtcblxuICBjb3B5LnNldEdyYXBoKHRoaXMuZ3JhcGgoKSk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBfLmVhY2godGhpcy5fbm9kZXMsIGZ1bmN0aW9uKHZhbHVlLCB2KSB7XG4gICAgaWYgKGZpbHRlcih2KSkge1xuICAgICAgY29weS5zZXROb2RlKHYsIHZhbHVlKTtcbiAgICB9XG4gIH0pO1xuXG4gIF8uZWFjaCh0aGlzLl9lZGdlT2JqcywgZnVuY3Rpb24oZSkge1xuICAgIGlmIChjb3B5Lmhhc05vZGUoZS52KSAmJiBjb3B5Lmhhc05vZGUoZS53KSkge1xuICAgICAgY29weS5zZXRFZGdlKGUsIHNlbGYuZWRnZShlKSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgcGFyZW50cyA9IHt9O1xuICBmdW5jdGlvbiBmaW5kUGFyZW50KHYpIHtcbiAgICB2YXIgcGFyZW50ID0gc2VsZi5wYXJlbnQodik7XG4gICAgaWYgKHBhcmVudCA9PT0gdW5kZWZpbmVkIHx8IGNvcHkuaGFzTm9kZShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnRzW3ZdID0gcGFyZW50O1xuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9IGVsc2UgaWYgKHBhcmVudCBpbiBwYXJlbnRzKSB7XG4gICAgICByZXR1cm4gcGFyZW50c1twYXJlbnRdO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmluZFBhcmVudChwYXJlbnQpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLl9pc0NvbXBvdW5kKSB7XG4gICAgXy5lYWNoKGNvcHkubm9kZXMoKSwgZnVuY3Rpb24odikge1xuICAgICAgY29weS5zZXRQYXJlbnQodiwgZmluZFBhcmVudCh2KSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY29weTtcbn07XG5cbi8qID09PSBFZGdlIGZ1bmN0aW9ucyA9PT09PT09PT09ICovXG5cbkdyYXBoLnByb3RvdHlwZS5zZXREZWZhdWx0RWRnZUxhYmVsID0gZnVuY3Rpb24obmV3RGVmYXVsdCkge1xuICBpZiAoIV8uaXNGdW5jdGlvbihuZXdEZWZhdWx0KSkge1xuICAgIG5ld0RlZmF1bHQgPSBfLmNvbnN0YW50KG5ld0RlZmF1bHQpO1xuICB9XG4gIHRoaXMuX2RlZmF1bHRFZGdlTGFiZWxGbiA9IG5ld0RlZmF1bHQ7XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhcGgucHJvdG90eXBlLmVkZ2VDb3VudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5fZWRnZUNvdW50O1xufTtcblxuR3JhcGgucHJvdG90eXBlLmVkZ2VzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBfLnZhbHVlcyh0aGlzLl9lZGdlT2Jqcyk7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuc2V0UGF0aCA9IGZ1bmN0aW9uKHZzLCB2YWx1ZSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICBfLnJlZHVjZSh2cywgZnVuY3Rpb24odiwgdykge1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHNlbGYuc2V0RWRnZSh2LCB3LCB2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuc2V0RWRnZSh2LCB3KTtcbiAgICB9XG4gICAgcmV0dXJuIHc7XG4gIH0pO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8qXG4gKiBzZXRFZGdlKHYsIHcsIFt2YWx1ZSwgW25hbWVdXSlcbiAqIHNldEVkZ2UoeyB2LCB3LCBbbmFtZV0gfSwgW3ZhbHVlXSlcbiAqL1xuR3JhcGgucHJvdG90eXBlLnNldEVkZ2UgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHYsIHcsIG5hbWUsIHZhbHVlO1xuICB2YXIgdmFsdWVTcGVjaWZpZWQgPSBmYWxzZTtcbiAgdmFyIGFyZzAgPSBhcmd1bWVudHNbMF07XG5cbiAgaWYgKHR5cGVvZiBhcmcwID09PSBcIm9iamVjdFwiICYmIGFyZzAgIT09IG51bGwgJiYgXCJ2XCIgaW4gYXJnMCkge1xuICAgIHYgPSBhcmcwLnY7XG4gICAgdyA9IGFyZzAudztcbiAgICBuYW1lID0gYXJnMC5uYW1lO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICB2YWx1ZSA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIHZhbHVlU3BlY2lmaWVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdiA9IGFyZzA7XG4gICAgdyA9IGFyZ3VtZW50c1sxXTtcbiAgICBuYW1lID0gYXJndW1lbnRzWzNdO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xuICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMl07XG4gICAgICB2YWx1ZVNwZWNpZmllZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdiA9IFwiXCIgKyB2O1xuICB3ID0gXCJcIiArIHc7XG4gIGlmICghXy5pc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIG5hbWUgPSBcIlwiICsgbmFtZTtcbiAgfVxuXG4gIHZhciBlID0gZWRnZUFyZ3NUb0lkKHRoaXMuX2lzRGlyZWN0ZWQsIHYsIHcsIG5hbWUpO1xuICBpZiAoXy5oYXModGhpcy5fZWRnZUxhYmVscywgZSkpIHtcbiAgICBpZiAodmFsdWVTcGVjaWZpZWQpIHtcbiAgICAgIHRoaXMuX2VkZ2VMYWJlbHNbZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBpZiAoIV8uaXNVbmRlZmluZWQobmFtZSkgJiYgIXRoaXMuX2lzTXVsdGlncmFwaCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBzZXQgYSBuYW1lZCBlZGdlIHdoZW4gaXNNdWx0aWdyYXBoID0gZmFsc2VcIik7XG4gIH1cblxuICAvLyBJdCBkaWRuJ3QgZXhpc3QsIHNvIHdlIG5lZWQgdG8gY3JlYXRlIGl0LlxuICAvLyBGaXJzdCBlbnN1cmUgdGhlIG5vZGVzIGV4aXN0LlxuICB0aGlzLnNldE5vZGUodik7XG4gIHRoaXMuc2V0Tm9kZSh3KTtcblxuICB0aGlzLl9lZGdlTGFiZWxzW2VdID0gdmFsdWVTcGVjaWZpZWQgPyB2YWx1ZSA6IHRoaXMuX2RlZmF1bHRFZGdlTGFiZWxGbih2LCB3LCBuYW1lKTtcblxuICB2YXIgZWRnZU9iaiA9IGVkZ2VBcmdzVG9PYmoodGhpcy5faXNEaXJlY3RlZCwgdiwgdywgbmFtZSk7XG4gIC8vIEVuc3VyZSB3ZSBhZGQgdW5kaXJlY3RlZCBlZGdlcyBpbiBhIGNvbnNpc3RlbnQgd2F5LlxuICB2ID0gZWRnZU9iai52O1xuICB3ID0gZWRnZU9iai53O1xuXG4gIE9iamVjdC5mcmVlemUoZWRnZU9iaik7XG4gIHRoaXMuX2VkZ2VPYmpzW2VdID0gZWRnZU9iajtcbiAgaW5jcmVtZW50T3JJbml0RW50cnkodGhpcy5fcHJlZHNbd10sIHYpO1xuICBpbmNyZW1lbnRPckluaXRFbnRyeSh0aGlzLl9zdWNzW3ZdLCB3KTtcbiAgdGhpcy5faW5bd11bZV0gPSBlZGdlT2JqO1xuICB0aGlzLl9vdXRbdl1bZV0gPSBlZGdlT2JqO1xuICB0aGlzLl9lZGdlQ291bnQrKztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuZWRnZSA9IGZ1bmN0aW9uKHYsIHcsIG5hbWUpIHtcbiAgdmFyIGUgPSAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMVxuICAgID8gZWRnZU9ialRvSWQodGhpcy5faXNEaXJlY3RlZCwgYXJndW1lbnRzWzBdKVxuICAgIDogZWRnZUFyZ3NUb0lkKHRoaXMuX2lzRGlyZWN0ZWQsIHYsIHcsIG5hbWUpKTtcbiAgcmV0dXJuIHRoaXMuX2VkZ2VMYWJlbHNbZV07XG59O1xuXG5HcmFwaC5wcm90b3R5cGUuaGFzRWRnZSA9IGZ1bmN0aW9uKHYsIHcsIG5hbWUpIHtcbiAgdmFyIGUgPSAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMVxuICAgID8gZWRnZU9ialRvSWQodGhpcy5faXNEaXJlY3RlZCwgYXJndW1lbnRzWzBdKVxuICAgIDogZWRnZUFyZ3NUb0lkKHRoaXMuX2lzRGlyZWN0ZWQsIHYsIHcsIG5hbWUpKTtcbiAgcmV0dXJuIF8uaGFzKHRoaXMuX2VkZ2VMYWJlbHMsIGUpO1xufTtcblxuR3JhcGgucHJvdG90eXBlLnJlbW92ZUVkZ2UgPSBmdW5jdGlvbih2LCB3LCBuYW1lKSB7XG4gIHZhciBlID0gKGFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICA/IGVkZ2VPYmpUb0lkKHRoaXMuX2lzRGlyZWN0ZWQsIGFyZ3VtZW50c1swXSlcbiAgICA6IGVkZ2VBcmdzVG9JZCh0aGlzLl9pc0RpcmVjdGVkLCB2LCB3LCBuYW1lKSk7XG4gIHZhciBlZGdlID0gdGhpcy5fZWRnZU9ianNbZV07XG4gIGlmIChlZGdlKSB7XG4gICAgdiA9IGVkZ2UudjtcbiAgICB3ID0gZWRnZS53O1xuICAgIGRlbGV0ZSB0aGlzLl9lZGdlTGFiZWxzW2VdO1xuICAgIGRlbGV0ZSB0aGlzLl9lZGdlT2Jqc1tlXTtcbiAgICBkZWNyZW1lbnRPclJlbW92ZUVudHJ5KHRoaXMuX3ByZWRzW3ddLCB2KTtcbiAgICBkZWNyZW1lbnRPclJlbW92ZUVudHJ5KHRoaXMuX3N1Y3Nbdl0sIHcpO1xuICAgIGRlbGV0ZSB0aGlzLl9pblt3XVtlXTtcbiAgICBkZWxldGUgdGhpcy5fb3V0W3ZdW2VdO1xuICAgIHRoaXMuX2VkZ2VDb3VudC0tO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuR3JhcGgucHJvdG90eXBlLmluRWRnZXMgPSBmdW5jdGlvbih2LCB1KSB7XG4gIHZhciBpblYgPSB0aGlzLl9pblt2XTtcbiAgaWYgKGluVikge1xuICAgIHZhciBlZGdlcyA9IF8udmFsdWVzKGluVik7XG4gICAgaWYgKCF1KSB7XG4gICAgICByZXR1cm4gZWRnZXM7XG4gICAgfVxuICAgIHJldHVybiBfLmZpbHRlcihlZGdlcywgZnVuY3Rpb24oZWRnZSkgeyByZXR1cm4gZWRnZS52ID09PSB1OyB9KTtcbiAgfVxufTtcblxuR3JhcGgucHJvdG90eXBlLm91dEVkZ2VzID0gZnVuY3Rpb24odiwgdykge1xuICB2YXIgb3V0ViA9IHRoaXMuX291dFt2XTtcbiAgaWYgKG91dFYpIHtcbiAgICB2YXIgZWRnZXMgPSBfLnZhbHVlcyhvdXRWKTtcbiAgICBpZiAoIXcpIHtcbiAgICAgIHJldHVybiBlZGdlcztcbiAgICB9XG4gICAgcmV0dXJuIF8uZmlsdGVyKGVkZ2VzLCBmdW5jdGlvbihlZGdlKSB7IHJldHVybiBlZGdlLncgPT09IHc7IH0pO1xuICB9XG59O1xuXG5HcmFwaC5wcm90b3R5cGUubm9kZUVkZ2VzID0gZnVuY3Rpb24odiwgdykge1xuICB2YXIgaW5FZGdlcyA9IHRoaXMuaW5FZGdlcyh2LCB3KTtcbiAgaWYgKGluRWRnZXMpIHtcbiAgICByZXR1cm4gaW5FZGdlcy5jb25jYXQodGhpcy5vdXRFZGdlcyh2LCB3KSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGluY3JlbWVudE9ySW5pdEVudHJ5KG1hcCwgaykge1xuICBpZiAobWFwW2tdKSB7XG4gICAgbWFwW2tdKys7XG4gIH0gZWxzZSB7XG4gICAgbWFwW2tdID0gMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWNyZW1lbnRPclJlbW92ZUVudHJ5KG1hcCwgaykge1xuICBpZiAoIS0tbWFwW2tdKSB7IGRlbGV0ZSBtYXBba107IH1cbn1cblxuZnVuY3Rpb24gZWRnZUFyZ3NUb0lkKGlzRGlyZWN0ZWQsIHZfLCB3XywgbmFtZSkge1xuICB2YXIgdiA9IFwiXCIgKyB2XztcbiAgdmFyIHcgPSBcIlwiICsgd187XG4gIGlmICghaXNEaXJlY3RlZCAmJiB2ID4gdykge1xuICAgIHZhciB0bXAgPSB2O1xuICAgIHYgPSB3O1xuICAgIHcgPSB0bXA7XG4gIH1cbiAgcmV0dXJuIHYgKyBFREdFX0tFWV9ERUxJTSArIHcgKyBFREdFX0tFWV9ERUxJTSArXG4gICAgICAgICAgICAgKF8uaXNVbmRlZmluZWQobmFtZSkgPyBERUZBVUxUX0VER0VfTkFNRSA6IG5hbWUpO1xufVxuXG5mdW5jdGlvbiBlZGdlQXJnc1RvT2JqKGlzRGlyZWN0ZWQsIHZfLCB3XywgbmFtZSkge1xuICB2YXIgdiA9IFwiXCIgKyB2XztcbiAgdmFyIHcgPSBcIlwiICsgd187XG4gIGlmICghaXNEaXJlY3RlZCAmJiB2ID4gdykge1xuICAgIHZhciB0bXAgPSB2O1xuICAgIHYgPSB3O1xuICAgIHcgPSB0bXA7XG4gIH1cbiAgdmFyIGVkZ2VPYmogPSAgeyB2OiB2LCB3OiB3IH07XG4gIGlmIChuYW1lKSB7XG4gICAgZWRnZU9iai5uYW1lID0gbmFtZTtcbiAgfVxuICByZXR1cm4gZWRnZU9iajtcbn1cblxuZnVuY3Rpb24gZWRnZU9ialRvSWQoaXNEaXJlY3RlZCwgZWRnZU9iaikge1xuICByZXR1cm4gZWRnZUFyZ3NUb0lkKGlzRGlyZWN0ZWQsIGVkZ2VPYmoudiwgZWRnZU9iai53LCBlZGdlT2JqLm5hbWUpO1xufVxuIiwiLy8gSW5jbHVkZXMgb25seSB0aGUgXCJjb3JlXCIgb2YgZ3JhcGhsaWJcbm1vZHVsZS5leHBvcnRzID0ge1xuICBHcmFwaDogcmVxdWlyZShcIi4vZ3JhcGhcIiksXG4gIHZlcnNpb246IHJlcXVpcmUoXCIuL3ZlcnNpb25cIilcbn07XG4iLCJ2YXIgXyA9IHJlcXVpcmUoXCIuL2xvZGFzaFwiKTtcbnZhciBHcmFwaCA9IHJlcXVpcmUoXCIuL2dyYXBoXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgd3JpdGU6IHdyaXRlLFxuICByZWFkOiByZWFkXG59O1xuXG5mdW5jdGlvbiB3cml0ZShnKSB7XG4gIHZhciBqc29uID0ge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIGRpcmVjdGVkOiBnLmlzRGlyZWN0ZWQoKSxcbiAgICAgIG11bHRpZ3JhcGg6IGcuaXNNdWx0aWdyYXBoKCksXG4gICAgICBjb21wb3VuZDogZy5pc0NvbXBvdW5kKClcbiAgICB9LFxuICAgIG5vZGVzOiB3cml0ZU5vZGVzKGcpLFxuICAgIGVkZ2VzOiB3cml0ZUVkZ2VzKGcpXG4gIH07XG4gIGlmICghXy5pc1VuZGVmaW5lZChnLmdyYXBoKCkpKSB7XG4gICAganNvbi52YWx1ZSA9IF8uY2xvbmUoZy5ncmFwaCgpKTtcbiAgfVxuICByZXR1cm4ganNvbjtcbn1cblxuZnVuY3Rpb24gd3JpdGVOb2RlcyhnKSB7XG4gIHJldHVybiBfLm1hcChnLm5vZGVzKCksIGZ1bmN0aW9uKHYpIHtcbiAgICB2YXIgbm9kZVZhbHVlID0gZy5ub2RlKHYpO1xuICAgIHZhciBwYXJlbnQgPSBnLnBhcmVudCh2KTtcbiAgICB2YXIgbm9kZSA9IHsgdjogdiB9O1xuICAgIGlmICghXy5pc1VuZGVmaW5lZChub2RlVmFsdWUpKSB7XG4gICAgICBub2RlLnZhbHVlID0gbm9kZVZhbHVlO1xuICAgIH1cbiAgICBpZiAoIV8uaXNVbmRlZmluZWQocGFyZW50KSkge1xuICAgICAgbm9kZS5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gd3JpdGVFZGdlcyhnKSB7XG4gIHJldHVybiBfLm1hcChnLmVkZ2VzKCksIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZWRnZVZhbHVlID0gZy5lZGdlKGUpO1xuICAgIHZhciBlZGdlID0geyB2OiBlLnYsIHc6IGUudyB9O1xuICAgIGlmICghXy5pc1VuZGVmaW5lZChlLm5hbWUpKSB7XG4gICAgICBlZGdlLm5hbWUgPSBlLm5hbWU7XG4gICAgfVxuICAgIGlmICghXy5pc1VuZGVmaW5lZChlZGdlVmFsdWUpKSB7XG4gICAgICBlZGdlLnZhbHVlID0gZWRnZVZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gZWRnZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHJlYWQoanNvbikge1xuICB2YXIgZyA9IG5ldyBHcmFwaChqc29uLm9wdGlvbnMpLnNldEdyYXBoKGpzb24udmFsdWUpO1xuICBfLmVhY2goanNvbi5ub2RlcywgZnVuY3Rpb24oZW50cnkpIHtcbiAgICBnLnNldE5vZGUoZW50cnkudiwgZW50cnkudmFsdWUpO1xuICAgIGlmIChlbnRyeS5wYXJlbnQpIHtcbiAgICAgIGcuc2V0UGFyZW50KGVudHJ5LnYsIGVudHJ5LnBhcmVudCk7XG4gICAgfVxuICB9KTtcbiAgXy5lYWNoKGpzb24uZWRnZXMsIGZ1bmN0aW9uKGVudHJ5KSB7XG4gICAgZy5zZXRFZGdlKHsgdjogZW50cnkudiwgdzogZW50cnkudywgbmFtZTogZW50cnkubmFtZSB9LCBlbnRyeS52YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gZztcbn1cbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cblxudmFyIGxvZGFzaDtcblxuaWYgKHR5cGVvZiByZXF1aXJlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgdHJ5IHtcbiAgICBsb2Rhc2ggPSB7XG4gICAgICBjbG9uZTogcmVxdWlyZShcImxvZGFzaC9jbG9uZVwiKSxcbiAgICAgIGNvbnN0YW50OiByZXF1aXJlKFwibG9kYXNoL2NvbnN0YW50XCIpLFxuICAgICAgZWFjaDogcmVxdWlyZShcImxvZGFzaC9lYWNoXCIpLFxuICAgICAgZmlsdGVyOiByZXF1aXJlKFwibG9kYXNoL2ZpbHRlclwiKSxcbiAgICAgIGhhczogIHJlcXVpcmUoXCJsb2Rhc2gvaGFzXCIpLFxuICAgICAgaXNBcnJheTogcmVxdWlyZShcImxvZGFzaC9pc0FycmF5XCIpLFxuICAgICAgaXNFbXB0eTogcmVxdWlyZShcImxvZGFzaC9pc0VtcHR5XCIpLFxuICAgICAgaXNGdW5jdGlvbjogcmVxdWlyZShcImxvZGFzaC9pc0Z1bmN0aW9uXCIpLFxuICAgICAgaXNVbmRlZmluZWQ6IHJlcXVpcmUoXCJsb2Rhc2gvaXNVbmRlZmluZWRcIiksXG4gICAgICBrZXlzOiByZXF1aXJlKFwibG9kYXNoL2tleXNcIiksXG4gICAgICBtYXA6IHJlcXVpcmUoXCJsb2Rhc2gvbWFwXCIpLFxuICAgICAgcmVkdWNlOiByZXF1aXJlKFwibG9kYXNoL3JlZHVjZVwiKSxcbiAgICAgIHNpemU6IHJlcXVpcmUoXCJsb2Rhc2gvc2l6ZVwiKSxcbiAgICAgIHRyYW5zZm9ybTogcmVxdWlyZShcImxvZGFzaC90cmFuc2Zvcm1cIiksXG4gICAgICB1bmlvbjogcmVxdWlyZShcImxvZGFzaC91bmlvblwiKSxcbiAgICAgIHZhbHVlczogcmVxdWlyZShcImxvZGFzaC92YWx1ZXNcIilcbiAgICB9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gY29udGludWUgcmVnYXJkbGVzcyBvZiBlcnJvclxuICB9XG59XG5cbmlmICghbG9kYXNoKSB7XG4gIGxvZGFzaCA9IHdpbmRvdy5fO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxvZGFzaDtcbiIsIm1vZHVsZS5leHBvcnRzID0gJzIuMS44JztcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRGF0YVZpZXc7XG4iLCJ2YXIgaGFzaENsZWFyID0gcmVxdWlyZSgnLi9faGFzaENsZWFyJyksXG4gICAgaGFzaERlbGV0ZSA9IHJlcXVpcmUoJy4vX2hhc2hEZWxldGUnKSxcbiAgICBoYXNoR2V0ID0gcmVxdWlyZSgnLi9faGFzaEdldCcpLFxuICAgIGhhc2hIYXMgPSByZXF1aXJlKCcuL19oYXNoSGFzJyksXG4gICAgaGFzaFNldCA9IHJlcXVpcmUoJy4vX2hhc2hTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSGFzaDtcbiIsInZhciBsaXN0Q2FjaGVDbGVhciA9IHJlcXVpcmUoJy4vX2xpc3RDYWNoZUNsZWFyJyksXG4gICAgbGlzdENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlRGVsZXRlJyksXG4gICAgbGlzdENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlR2V0JyksXG4gICAgbGlzdENhY2hlSGFzID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlSGFzJyksXG4gICAgbGlzdENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBMaXN0Q2FjaGU7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuIiwidmFyIG1hcENhY2hlQ2xlYXIgPSByZXF1aXJlKCcuL19tYXBDYWNoZUNsZWFyJyksXG4gICAgbWFwQ2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19tYXBDYWNoZURlbGV0ZScpLFxuICAgIG1hcENhY2hlR2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVHZXQnKSxcbiAgICBtYXBDYWNoZUhhcyA9IHJlcXVpcmUoJy4vX21hcENhY2hlSGFzJyksXG4gICAgbWFwQ2FjaGVTZXQgPSByZXF1aXJlKCcuL19tYXBDYWNoZVNldCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxubW9kdWxlLmV4cG9ydHMgPSBNYXBDYWNoZTtcbiIsInZhciBnZXROYXRpdmUgPSByZXF1aXJlKCcuL19nZXROYXRpdmUnKSxcbiAgICByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0O1xuIiwidmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKSxcbiAgICBzZXRDYWNoZUFkZCA9IHJlcXVpcmUoJy4vX3NldENhY2hlQWRkJyksXG4gICAgc2V0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19zZXRDYWNoZUhhcycpO1xuXG4vKipcbiAqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNhY2hlIG9iamVjdCB0byBzdG9yZSB1bmlxdWUgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFNldENhY2hlKHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcyA9PSBudWxsID8gMCA6IHZhbHVlcy5sZW5ndGg7XG5cbiAgdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB0aGlzLmFkZCh2YWx1ZXNbaW5kZXhdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU2V0Q2FjaGVgLlxuU2V0Q2FjaGUucHJvdG90eXBlLmFkZCA9IFNldENhY2hlLnByb3RvdHlwZS5wdXNoID0gc2V0Q2FjaGVBZGQ7XG5TZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbm1vZHVsZS5leHBvcnRzID0gU2V0Q2FjaGU7XG4iLCJ2YXIgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgc3RhY2tDbGVhciA9IHJlcXVpcmUoJy4vX3N0YWNrQ2xlYXInKSxcbiAgICBzdGFja0RlbGV0ZSA9IHJlcXVpcmUoJy4vX3N0YWNrRGVsZXRlJyksXG4gICAgc3RhY2tHZXQgPSByZXF1aXJlKCcuL19zdGFja0dldCcpLFxuICAgIHN0YWNrSGFzID0gcmVxdWlyZSgnLi9fc3RhY2tIYXMnKSxcbiAgICBzdGFja1NldCA9IHJlcXVpcmUoJy4vX3N0YWNrU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxubW9kdWxlLmV4cG9ydHMgPSBTdGFjaztcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBTeW1ib2wgPSByb290LlN5bWJvbDtcblxubW9kdWxlLmV4cG9ydHMgPSBTeW1ib2w7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBVaW50OEFycmF5O1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpLFxuICAgIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gV2Vha01hcDtcbiIsIi8qKlxuICogQSBmYXN0ZXIgYWx0ZXJuYXRpdmUgdG8gYEZ1bmN0aW9uI2FwcGx5YCwgdGhpcyBmdW5jdGlvbiBpbnZva2VzIGBmdW5jYFxuICogd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgYHRoaXNBcmdgIGFuZCB0aGUgYXJndW1lbnRzIG9mIGBhcmdzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGBmdW5jYCB3aXRoLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuXG4gKi9cbmZ1bmN0aW9uIGFwcGx5KGZ1bmMsIHRoaXNBcmcsIGFyZ3MpIHtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgfVxuICByZXR1cm4gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcHBseTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUVhY2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlGaWx0ZXI7XG4iLCJ2YXIgYmFzZUluZGV4T2YgPSByZXF1aXJlKCcuL19iYXNlSW5kZXhPZicpO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmNsdWRlc2AgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB0YXJnZXQgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHRhcmdldGAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlJbmNsdWRlcyhhcnJheSwgdmFsdWUpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5SW5jbHVkZXM7XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBhcmF0b3IgVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheUluY2x1ZGVzV2l0aChhcnJheSwgdmFsdWUsIGNvbXBhcmF0b3IpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuIiwidmFyIGJhc2VUaW1lcyA9IHJlcXVpcmUoJy4vX2Jhc2VUaW1lcycpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc0J1ZmZlciA9IHJlcXVpcmUoJy4vaXNCdWZmZXInKSxcbiAgICBpc0luZGV4ID0gcmVxdWlyZSgnLi9faXNJbmRleCcpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiB0aGUgYXJyYXktbGlrZSBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKSxcbiAgICAgIGlzQXJnID0gIWlzQXJyICYmIGlzQXJndW1lbnRzKHZhbHVlKSxcbiAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgaXNUeXBlID0gIWlzQXJyICYmICFpc0FyZyAmJiAhaXNCdWZmICYmIGlzVHlwZWRBcnJheSh2YWx1ZSksXG4gICAgICBza2lwSW5kZXhlcyA9IGlzQXJyIHx8IGlzQXJnIHx8IGlzQnVmZiB8fCBpc1R5cGUsXG4gICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgIShza2lwSW5kZXhlcyAmJiAoXG4gICAgICAgICAgIC8vIFNhZmFyaSA5IGhhcyBlbnVtZXJhYmxlIGBhcmd1bWVudHMubGVuZ3RoYCBpbiBzdHJpY3QgbW9kZS5cbiAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgIC8vIE5vZGUuanMgMC4xMCBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiBidWZmZXJzLlxuICAgICAgICAgICAoaXNCdWZmICYmIChrZXkgPT0gJ29mZnNldCcgfHwga2V5ID09ICdwYXJlbnQnKSkgfHxcbiAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAoaXNUeXBlICYmIChrZXkgPT0gJ2J1ZmZlcicgfHwga2V5ID09ICdieXRlTGVuZ3RoJyB8fCBrZXkgPT0gJ2J5dGVPZmZzZXQnKSkgfHxcbiAgICAgICAgICAgLy8gU2tpcCBpbmRleCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICApKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheUxpa2VLZXlzO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheU1hcDtcbiIsIi8qKlxuICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFwcGVuZC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheVB1c2goYXJyYXksIHZhbHVlcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICBvZmZzZXQgPSBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhcnJheVB1c2g7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXJyYXlSZWR1Y2U7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5U29tZTtcbiIsInZhciBiYXNlUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHknKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBzaXplIG9mIGFuIEFTQ0lJIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICovXG52YXIgYXNjaWlTaXplID0gYmFzZVByb3BlcnR5KCdsZW5ndGgnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBhc2NpaVNpemU7XG4iLCJ2YXIgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyksXG4gICAgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzaWduVmFsdWU7XG4iLCJ2YXIgZXEgPSByZXF1aXJlKCcuL2VxJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXNzb2NJbmRleE9mO1xuIiwidmFyIGNvcHlPYmplY3QgPSByZXF1aXJlKCcuL19jb3B5T2JqZWN0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUFzc2lnbjtcbiIsInZhciBjb3B5T2JqZWN0ID0gcmVxdWlyZSgnLi9fY29weU9iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQXNzaWduSW47XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19kZWZpbmVQcm9wZXJ0eScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VBc3NpZ25WYWx1ZTtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYXNzaWduVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25WYWx1ZScpLFxuICAgIGJhc2VBc3NpZ24gPSByZXF1aXJlKCcuL19iYXNlQXNzaWduJyksXG4gICAgYmFzZUFzc2lnbkluID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnbkluJyksXG4gICAgY2xvbmVCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUJ1ZmZlcicpLFxuICAgIGNvcHlBcnJheSA9IHJlcXVpcmUoJy4vX2NvcHlBcnJheScpLFxuICAgIGNvcHlTeW1ib2xzID0gcmVxdWlyZSgnLi9fY29weVN5bWJvbHMnKSxcbiAgICBjb3B5U3ltYm9sc0luID0gcmVxdWlyZSgnLi9fY29weVN5bWJvbHNJbicpLFxuICAgIGdldEFsbEtleXMgPSByZXF1aXJlKCcuL19nZXRBbGxLZXlzJyksXG4gICAgZ2V0QWxsS2V5c0luID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5c0luJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaW5pdENsb25lQXJyYXkgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVBcnJheScpLFxuICAgIGluaXRDbG9uZUJ5VGFnID0gcmVxdWlyZSgnLi9faW5pdENsb25lQnlUYWcnKSxcbiAgICBpbml0Q2xvbmVPYmplY3QgPSByZXF1aXJlKCcuL19pbml0Q2xvbmVPYmplY3QnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNNYXAgPSByZXF1aXJlKCcuL2lzTWFwJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNTZXQgPSByZXF1aXJlKCcuL2lzU2V0JyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbnZhciBjbG9uZWFibGVUYWdzID0ge307XG5jbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG5jbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG5jbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbmNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbmNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG5jbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICogdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBEZWVwIGNsb25lXG4gKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgdmFyIHJlc3VsdCxcbiAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICBpZiAoY3VzdG9taXplcikge1xuICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgfVxuICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICBpZiAoaXNBcnIpIHtcbiAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgaWYgKCFpc0RlZXApIHtcbiAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgIH1cbiAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICBpZiAoc3RhY2tlZCkge1xuICAgIHJldHVybiBzdGFja2VkO1xuICB9XG4gIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VDbG9uZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlQ3JlYXRlO1xuIiwidmFyIGJhc2VGb3JPd24gPSByZXF1aXJlKCcuL19iYXNlRm9yT3duJyksXG4gICAgY3JlYXRlQmFzZUVhY2ggPSByZXF1aXJlKCcuL19jcmVhdGVCYXNlRWFjaCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICovXG52YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRWFjaDtcbiIsInZhciBiYXNlRWFjaCA9IHJlcXVpcmUoJy4vX2Jhc2VFYWNoJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsdGVyYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRmlsdGVyO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maW5kSW5kZXhgIGFuZCBgXy5maW5kTGFzdEluZGV4YCB3aXRob3V0XG4gKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIGluZGV4ID0gZnJvbUluZGV4ICsgKGZyb21SaWdodCA/IDEgOiAtMSk7XG5cbiAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZpbmRJbmRleDtcbiIsInZhciBhcnJheVB1c2ggPSByZXF1aXJlKCcuL19hcnJheVB1c2gnKSxcbiAgICBpc0ZsYXR0ZW5hYmxlID0gcmVxdWlyZSgnLi9faXNGbGF0dGVuYWJsZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZsYXR0ZW5gIHdpdGggc3VwcG9ydCBmb3IgcmVzdHJpY3RpbmcgZmxhdHRlbmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICogQHBhcmFtIHtib29sZWFufSBbcHJlZGljYXRlPWlzRmxhdHRlbmFibGVdIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc1N0cmljdF0gUmVzdHJpY3QgdG8gdmFsdWVzIHRoYXQgcGFzcyBgcHJlZGljYXRlYCBjaGVja3MuXG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gIHJlc3VsdCB8fCAocmVzdWx0ID0gW10pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgIGlmIChkZXB0aCA+IDAgJiYgcHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgaWYgKGRlcHRoID4gMSkge1xuICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBiYXNlRmxhdHRlbih2YWx1ZSwgZGVwdGggLSAxLCBwcmVkaWNhdGUsIGlzU3RyaWN0LCByZXN1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlRmxhdHRlbjtcbiIsInZhciBjcmVhdGVCYXNlRm9yID0gcmVxdWlyZSgnLi9fY3JlYXRlQmFzZUZvcicpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUZvcjtcbiIsInZhciBiYXNlRm9yID0gcmVxdWlyZSgnLi9fYmFzZUZvcicpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VGb3JPd247XG4iLCJ2YXIgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpLFxuICAgIHRvS2V5ID0gcmVxdWlyZSgnLi9fdG9LZXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICB9XG4gIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0O1xuIiwidmFyIGFycmF5UHVzaCA9IHJlcXVpcmUoJy4vX2FycmF5UHVzaCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VHZXRBbGxLZXlzO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGdldFJhd1RhZyA9IHJlcXVpcmUoJy4vX2dldFJhd1RhZycpLFxuICAgIG9iamVjdFRvU3RyaW5nID0gcmVxdWlyZSgnLi9fb2JqZWN0VG9TdHJpbmcnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldFRhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSGFzO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhc0luKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBrZXkgaW4gT2JqZWN0KG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUhhc0luO1xuIiwidmFyIGJhc2VGaW5kSW5kZXggPSByZXF1aXJlKCcuL19iYXNlRmluZEluZGV4JyksXG4gICAgYmFzZUlzTmFOID0gcmVxdWlyZSgnLi9fYmFzZUlzTmFOJyksXG4gICAgc3RyaWN0SW5kZXhPZiA9IHJlcXVpcmUoJy4vX3N0cmljdEluZGV4T2YnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pbmRleE9mYCB3aXRob3V0IGBmcm9tSW5kZXhgIGJvdW5kcyBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgID8gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleClcbiAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSW5kZXhPZjtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzQXJndW1lbnRzO1xuIiwidmFyIGJhc2VJc0VxdWFsRGVlcCA9IHJlcXVpcmUoJy4vX2Jhc2VJc0VxdWFsRGVlcCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsO1xuIiwidmFyIFN0YWNrID0gcmVxdWlyZSgnLi9fU3RhY2snKSxcbiAgICBlcXVhbEFycmF5cyA9IHJlcXVpcmUoJy4vX2VxdWFsQXJyYXlzJyksXG4gICAgZXF1YWxCeVRhZyA9IHJlcXVpcmUoJy4vX2VxdWFsQnlUYWcnKSxcbiAgICBlcXVhbE9iamVjdHMgPSByZXF1aXJlKCcuL19lcXVhbE9iamVjdHMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9pc1R5cGVkQXJyYXknKTtcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gKiBkZWVwIGNvbXBhcmlzb25zIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIGNvbXBhcmVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNFcXVhbERlZXAob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgb2JqSXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgb2JqVGFnID0gb2JqSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvYmplY3QpLFxuICAgICAgb3RoVGFnID0gb3RoSXNBcnIgPyBhcnJheVRhZyA6IGdldFRhZyhvdGhlcik7XG5cbiAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gIG90aFRhZyA9IG90aFRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb3RoVGFnO1xuXG4gIHZhciBvYmpJc09iaiA9IG9ialRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICBpc1NhbWVUYWcgPSBvYmpUYWcgPT0gb3RoVGFnO1xuXG4gIGlmIChpc1NhbWVUYWcgJiYgaXNCdWZmZXIob2JqZWN0KSkge1xuICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICBvYmpJc09iaiA9IGZhbHNlO1xuICB9XG4gIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICByZXR1cm4gKG9iaklzQXJyIHx8IGlzVHlwZWRBcnJheShvYmplY3QpKVxuICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgOiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIG9ialRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gIH1cbiAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgIHZhciBvYmpJc1dyYXBwZWQgPSBvYmpJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgJ19fd3JhcHBlZF9fJyksXG4gICAgICAgIG90aElzV3JhcHBlZCA9IG90aElzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsICdfX3dyYXBwZWRfXycpO1xuXG4gICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgIHZhciBvYmpVbndyYXBwZWQgPSBvYmpJc1dyYXBwZWQgPyBvYmplY3QudmFsdWUoKSA6IG9iamVjdCxcbiAgICAgICAgICBvdGhVbndyYXBwZWQgPSBvdGhJc1dyYXBwZWQgPyBvdGhlci52YWx1ZSgpIDogb3RoZXI7XG5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICByZXR1cm4gZXF1YWxGdW5jKG9ialVud3JhcHBlZCwgb3RoVW53cmFwcGVkLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgfVxuICB9XG4gIGlmICghaXNTYW1lVGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHJldHVybiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzRXF1YWxEZWVwO1xuIiwidmFyIGdldFRhZyA9IHJlcXVpcmUoJy4vX2dldFRhZycpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gbWFwVGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc01hcDtcbiIsInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNNYXRjaDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYE5hTmAsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzTmFOO1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc01hc2tlZCA9IHJlcXVpcmUoJy4vX2lzTWFza2VkJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc05hdGl2ZTtcbiIsInZhciBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc2V0LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IHNldFRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNTZXQ7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUlzVHlwZWRBcnJheTtcbiIsInZhciBiYXNlTWF0Y2hlcyA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzJyksXG4gICAgYmFzZU1hdGNoZXNQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX2Jhc2VNYXRjaGVzUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgcHJvcGVydHkgPSByZXF1aXJlKCcuL3Byb3BlcnR5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUl0ZXJhdGVlO1xuIiwidmFyIGlzUHJvdG90eXBlID0gcmVxdWlyZSgnLi9faXNQcm90b3R5cGUnKSxcbiAgICBuYXRpdmVLZXlzID0gcmVxdWlyZSgnLi9fbmF0aXZlS2V5cycpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNgIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXMob2JqZWN0KSB7XG4gIGlmICghaXNQcm90b3R5cGUob2JqZWN0KSkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYga2V5ICE9ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUtleXM7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0JyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIG5hdGl2ZUtleXNJbiA9IHJlcXVpcmUoJy4vX25hdGl2ZUtleXNJbicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VLZXlzSW47XG4iLCJ2YXIgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNYXA7XG4iLCJ2YXIgYmFzZUlzTWF0Y2ggPSByZXF1aXJlKCcuL19iYXNlSXNNYXRjaCcpLFxuICAgIGdldE1hdGNoRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hdGNoRGF0YScpLFxuICAgIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZU1hdGNoZXM7XG4iLCJ2YXIgYmFzZUlzRXF1YWwgPSByZXF1aXJlKCcuL19iYXNlSXNFcXVhbCcpLFxuICAgIGdldCA9IHJlcXVpcmUoJy4vZ2V0JyksXG4gICAgaGFzSW4gPSByZXF1aXJlKCcuL2hhc0luJyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIGlzU3RyaWN0Q29tcGFyYWJsZSA9IHJlcXVpcmUoJy4vX2lzU3RyaWN0Q29tcGFyYWJsZScpLFxuICAgIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlID0gcmVxdWlyZSgnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlTWF0Y2hlc1Byb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUHJvcGVydHk7XG4iLCJ2YXIgYmFzZUdldCA9IHJlcXVpcmUoJy4vX2Jhc2VHZXQnKTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVByb3BlcnR5RGVlcDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAqIGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYCB1c2luZyBgZWFjaEZ1bmNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5pdEFjY3VtIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IG9yIGxhc3QgZWxlbWVudCBvZlxuICogIGBjb2xsZWN0aW9uYCBhcyB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICBhY2N1bXVsYXRvciA9IGluaXRBY2N1bVxuICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgOiBpdGVyYXRlZShhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgfSk7XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUmVkdWNlO1xuIiwidmFyIGlkZW50aXR5ID0gcmVxdWlyZSgnLi9pZGVudGl0eScpLFxuICAgIG92ZXJSZXN0ID0gcmVxdWlyZSgnLi9fb3ZlclJlc3QnKSxcbiAgICBzZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX3NldFRvU3RyaW5nJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VSZXN0KGZ1bmMsIHN0YXJ0KSB7XG4gIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCBzdGFydCwgaWRlbnRpdHkpLCBmdW5jICsgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VSZXN0O1xuIiwidmFyIGNvbnN0YW50ID0gcmVxdWlyZSgnLi9jb25zdGFudCcpLFxuICAgIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fZGVmaW5lUHJvcGVydHknKSxcbiAgICBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVNldFRvU3RyaW5nO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gKiBvciBtYXggYXJyYXkgbGVuZ3RoIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VUaW1lcyhuLCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG4pO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVGltZXM7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVG9TdHJpbmc7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVVuYXJ5O1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheUluY2x1ZGVzID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlcycpLFxuICAgIGFycmF5SW5jbHVkZXNXaXRoID0gcmVxdWlyZSgnLi9fYXJyYXlJbmNsdWRlc1dpdGgnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyksXG4gICAgY3JlYXRlU2V0ID0gcmVxdWlyZSgnLi9fY3JlYXRlU2V0JyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmlxQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuaXEoYXJyYXksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgaXNDb21tb24gPSB0cnVlLFxuICAgICAgcmVzdWx0ID0gW10sXG4gICAgICBzZWVuID0gcmVzdWx0O1xuXG4gIGlmIChjb21wYXJhdG9yKSB7XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGFycmF5SW5jbHVkZXNXaXRoO1xuICB9XG4gIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgdmFyIHNldCA9IGl0ZXJhdGVlID8gbnVsbCA6IGNyZWF0ZVNldChhcnJheSk7XG4gICAgaWYgKHNldCkge1xuICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICB9XG4gICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgIHNlZW4gPSBuZXcgU2V0Q2FjaGU7XG4gIH1cbiAgZWxzZSB7XG4gICAgc2VlbiA9IGl0ZXJhdGVlID8gW10gOiByZXN1bHQ7XG4gIH1cbiAgb3V0ZXI6XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICB2YWx1ZSA9IChjb21wYXJhdG9yIHx8IHZhbHVlICE9PSAwKSA/IHZhbHVlIDogMDtcbiAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICB3aGlsZSAoc2VlbkluZGV4LS0pIHtcbiAgICAgICAgaWYgKHNlZW5bc2VlbkluZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICB9XG4gICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKCFpbmNsdWRlcyhzZWVuLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlVW5pcTtcbiIsInZhciBhcnJheU1hcCA9IHJlcXVpcmUoJy4vX2FycmF5TWFwJyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udmFsdWVzYCBhbmQgYF8udmFsdWVzSW5gIHdoaWNoIGNyZWF0ZXMgYW5cbiAqIGFycmF5IG9mIGBvYmplY3RgIHByb3BlcnR5IHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm9wZXJ0eSBuYW1lc1xuICogb2YgYHByb3BzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBiYXNlVmFsdWVzKG9iamVjdCwgcHJvcHMpIHtcbiAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VWYWx1ZXM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYWNoZUhhcztcbiIsInZhciBpZGVudGl0eSA9IHJlcXVpcmUoJy4vaWRlbnRpdHknKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0RnVuY3Rpb247XG4iLCJ2YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICBzdHJpbmdUb1BhdGggPSByZXF1aXJlKCcuL19zdHJpbmdUb1BhdGgnKSxcbiAgICB0b1N0cmluZyA9IHJlcXVpcmUoJy4vdG9TdHJpbmcnKTtcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjYXN0UGF0aDtcbiIsInZhciBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVBcnJheUJ1ZmZlcjtcbiIsInZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lQnVmZmVyO1xuIiwidmFyIGNsb25lQXJyYXlCdWZmZXIgPSByZXF1aXJlKCcuL19jbG9uZUFycmF5QnVmZmVyJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVEYXRhVmlldztcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmVSZWdFeHA7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xWYWx1ZU9mID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by52YWx1ZU9mIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgYHN5bWJvbGAgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc3ltYm9sIFRoZSBzeW1ib2wgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNsb25lU3ltYm9sKHN5bWJvbCkge1xuICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjbG9uZVN5bWJvbDtcbiIsInZhciBjbG9uZUFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fY2xvbmVBcnJheUJ1ZmZlcicpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNsb25lVHlwZWRBcnJheTtcbiIsIi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlBcnJheTtcbiIsInZhciBhc3NpZ25WYWx1ZSA9IHJlcXVpcmUoJy4vX2Fzc2lnblZhbHVlJyksXG4gICAgYmFzZUFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYmFzZUFzc2lnblZhbHVlJyk7XG5cbi8qKlxuICogQ29waWVzIHByb3BlcnRpZXMgb2YgYHNvdXJjZWAgdG8gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycyB0byBjb3B5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29waWVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvcHlPYmplY3Qoc291cmNlLCBwcm9wcywgb2JqZWN0LCBjdXN0b21pemVyKSB7XG4gIHZhciBpc05ldyA9ICFvYmplY3Q7XG4gIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHByb3BzW2luZGV4XTtcblxuICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgICBpZiAoaXNOZXcpIHtcbiAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlPYmplY3Q7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBnZXRTeW1ib2xzID0gcmVxdWlyZSgnLi9fZ2V0U3ltYm9scycpO1xuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY29weVN5bWJvbHM7XG4iLCJ2YXIgY29weU9iamVjdCA9IHJlcXVpcmUoJy4vX2NvcHlPYmplY3QnKSxcbiAgICBnZXRTeW1ib2xzSW4gPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzSW4nKTtcblxuLyoqXG4gKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcHlTeW1ib2xzSW47XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG92ZXJyZWFjaGluZyBjb3JlLWpzIHNoaW1zLiAqL1xudmFyIGNvcmVKc0RhdGEgPSByb290WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb3JlSnNEYXRhO1xuIiwidmFyIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBgYmFzZUVhY2hgIG9yIGBiYXNlRWFjaFJpZ2h0YCBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VFYWNoKGVhY2hGdW5jLCBmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gICAgfVxuICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgIHJldHVybiBlYWNoRnVuYyhjb2xsZWN0aW9uLCBpdGVyYXRlZSk7XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aCxcbiAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICB3aGlsZSAoKGZyb21SaWdodCA/IGluZGV4LS0gOiArK2luZGV4IDwgbGVuZ3RoKSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2luZGV4XSwgaW5kZXgsIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUJhc2VFYWNoO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0LCBpdGVyYXRlZSwga2V5c0Z1bmMpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgcHJvcHMgPSBrZXlzRnVuYyhvYmplY3QpLFxuICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgIHZhciBrZXkgPSBwcm9wc1tmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XTtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtrZXldLCBrZXksIGl0ZXJhYmxlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY3JlYXRlQmFzZUZvcjtcbiIsInZhciBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBub29wID0gcmVxdWlyZSgnLi9ub29wJyksXG4gICAgc2V0VG9BcnJheSA9IHJlcXVpcmUoJy4vX3NldFRvQXJyYXknKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICovXG52YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVTZXQ7XG4iLCJ2YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnR5O1xuIiwidmFyIFNldENhY2hlID0gcmVxdWlyZSgnLi9fU2V0Q2FjaGUnKSxcbiAgICBhcnJheVNvbWUgPSByZXF1aXJlKCcuL19hcnJheVNvbWUnKSxcbiAgICBjYWNoZUhhcyA9IHJlcXVpcmUoJy4vX2NhY2hlSGFzJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtBcnJheX0gb3RoZXIgVGhlIG90aGVyIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJyYXlzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgYXJyTGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gIGlmIChhcnJMZW5ndGggIT0gb3RoTGVuZ3RoICYmICEoaXNQYXJ0aWFsICYmIG90aExlbmd0aCA+IGFyckxlbmd0aCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gQ2hlY2sgdGhhdCBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIGFyclN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChhcnJTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gYXJyU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IGFycmF5O1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbEFycmF5cztcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKSxcbiAgICBVaW50OEFycmF5ID0gcmVxdWlyZSgnLi9fVWludDhBcnJheScpLFxuICAgIGVxID0gcmVxdWlyZSgnLi9lcScpLFxuICAgIGVxdWFsQXJyYXlzID0gcmVxdWlyZSgnLi9fZXF1YWxBcnJheXMnKSxcbiAgICBtYXBUb0FycmF5ID0gcmVxdWlyZSgnLi9fbWFwVG9BcnJheScpLFxuICAgIHNldFRvQXJyYXkgPSByZXF1aXJlKCcuL19zZXRUb0FycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxCeVRhZztcbiIsInZhciBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbE9iamVjdHM7XG4iLCIvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZyZWVHbG9iYWw7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHMgPSByZXF1aXJlKCcuL19nZXRTeW1ib2xzJyksXG4gICAga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEFsbEtleXM7XG4iLCJ2YXIgYmFzZUdldEFsbEtleXMgPSByZXF1aXJlKCcuL19iYXNlR2V0QWxsS2V5cycpLFxuICAgIGdldFN5bWJvbHNJbiA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHNJbicpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWxsS2V5c0luO1xuIiwidmFyIGlzS2V5YWJsZSA9IHJlcXVpcmUoJy4vX2lzS2V5YWJsZScpO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TWFwRGF0YTtcbiIsInZhciBpc1N0cmljdENvbXBhcmFibGUgPSByZXF1aXJlKCcuL19pc1N0cmljdENvbXBhcmFibGUnKSxcbiAgICBrZXlzID0gcmVxdWlyZSgnLi9rZXlzJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3Mgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbWF0Y2ggZGF0YSBvZiBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gZ2V0TWF0Y2hEYXRhKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0ga2V5cyhvYmplY3QpLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICB2YXIga2V5ID0gcmVzdWx0W2xlbmd0aF0sXG4gICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICByZXN1bHRbbGVuZ3RoXSA9IFtrZXksIHZhbHVlLCBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpXTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hdGNoRGF0YTtcbiIsInZhciBiYXNlSXNOYXRpdmUgPSByZXF1aXJlKCcuL19iYXNlSXNOYXRpdmUnKSxcbiAgICBnZXRWYWx1ZSA9IHJlcXVpcmUoJy4vX2dldFZhbHVlJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbmF0aXZlIGZ1bmN0aW9uIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIG1ldGhvZCB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gKi9cbmZ1bmN0aW9uIGdldE5hdGl2ZShvYmplY3QsIGtleSkge1xuICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gIHJldHVybiBiYXNlSXNOYXRpdmUodmFsdWUpID8gdmFsdWUgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0TmF0aXZlO1xuIiwidmFyIG92ZXJBcmcgPSByZXF1aXJlKCcuL19vdmVyQXJnJyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiIsInZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19TeW1ib2wnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFJhd1RhZztcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgc3R1YkFycmF5ID0gcmVxdWlyZSgnLi9zdHViQXJyYXknKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUdldFN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHJldHVybiBhcnJheUZpbHRlcihuYXRpdmVHZXRTeW1ib2xzKG9iamVjdCksIGZ1bmN0aW9uKHN5bWJvbCkge1xuICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHM7XG4iLCJ2YXIgYXJyYXlQdXNoID0gcmVxdWlyZSgnLi9fYXJyYXlQdXNoJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgZ2V0U3ltYm9scyA9IHJlcXVpcmUoJy4vX2dldFN5bWJvbHMnKSxcbiAgICBzdHViQXJyYXkgPSByZXF1aXJlKCcuL3N0dWJBcnJheScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHdoaWxlIChvYmplY3QpIHtcbiAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFN5bWJvbHNJbjtcbiIsInZhciBEYXRhVmlldyA9IHJlcXVpcmUoJy4vX0RhdGFWaWV3JyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyksXG4gICAgUHJvbWlzZSA9IHJlcXVpcmUoJy4vX1Byb21pc2UnKSxcbiAgICBTZXQgPSByZXF1aXJlKCcuL19TZXQnKSxcbiAgICBXZWFrTWFwID0gcmVxdWlyZSgnLi9fV2Vha01hcCcpLFxuICAgIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgdG9Tb3VyY2UgPSByZXF1aXJlKCcuL190b1NvdXJjZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFRhZztcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuIiwidmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc1BhdGg7XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG52YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNVbmljb2RlO1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hEZWxldGU7XG4iLCJ2YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuIiwidmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaEhhcztcbiIsInZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaFNldDtcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lQXJyYXk7XG4iLCJ2YXIgY2xvbmVBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2Nsb25lQXJyYXlCdWZmZXInKSxcbiAgICBjbG9uZURhdGFWaWV3ID0gcmVxdWlyZSgnLi9fY2xvbmVEYXRhVmlldycpLFxuICAgIGNsb25lUmVnRXhwID0gcmVxdWlyZSgnLi9fY2xvbmVSZWdFeHAnKSxcbiAgICBjbG9uZVN5bWJvbCA9IHJlcXVpcmUoJy4vX2Nsb25lU3ltYm9sJyksXG4gICAgY2xvbmVUeXBlZEFycmF5ID0gcmVxdWlyZSgnLi9fY2xvbmVUeXBlZEFycmF5Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRDbG9uZUJ5VGFnO1xuIiwidmFyIGJhc2VDcmVhdGUgPSByZXF1aXJlKCcuL19iYXNlQ3JlYXRlJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5pdENsb25lT2JqZWN0O1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ByZWFkYWJsZVN5bWJvbCA9IFN5bWJvbCA/IFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZmxhdHRlbmFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gaXNBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpIHx8XG4gICAgISEoc3ByZWFkYWJsZVN5bWJvbCAmJiB2YWx1ZSAmJiB2YWx1ZVtzcHJlYWRhYmxlU3ltYm9sXSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGbGF0dGVuYWJsZTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0luZGV4O1xuIiwidmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKSxcbiAgICBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzS2V5YWJsZTtcbiIsInZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzUHJvdG90eXBlO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaWYgc3VpdGFibGUgZm9yIHN0cmljdFxuICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUNsZWFyO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlRGVsZXRlO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcbiIsInZhciBhc3NvY0luZGV4T2YgPSByZXF1aXJlKCcuL19hc3NvY0luZGV4T2YnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlSGFzO1xuIiwidmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbGlzdENhY2hlU2V0O1xuIiwidmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlRGVsZXRlO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUdldDtcbiIsInZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuIiwidmFyIGdldE1hcERhdGEgPSByZXF1aXJlKCcuL19nZXRNYXBEYXRhJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZVNldDtcbiIsIi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwVG9BcnJheTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZTtcbiIsInZhciBtZW1vaXplID0gcmVxdWlyZSgnLi9tZW1vaXplJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtZW1vaXplQ2FwcGVkO1xuIiwidmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcbiIsInZhciBvdmVyQXJnID0gcmVxdWlyZSgnLi9fb3ZlckFyZycpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmF0aXZlS2V5cztcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUtleXNJbjtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5vZGVVdGlsO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyQXJnO1xuIiwidmFyIGFwcGx5ID0gcmVxdWlyZSgnLi9fYXBwbHknKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PWZ1bmMubGVuZ3RoLTFdIFRoZSBzdGFydCBwb3NpdGlvbiBvZiB0aGUgcmVzdCBwYXJhbWV0ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIHJlc3QgYXJyYXkgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCB0cmFuc2Zvcm0pIHtcbiAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IG5hdGl2ZU1heChhcmdzLmxlbmd0aCAtIHN0YXJ0LCAwKSxcbiAgICAgICAgYXJyYXkgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGFycmF5W2luZGV4XSA9IGFyZ3Nbc3RhcnQgKyBpbmRleF07XG4gICAgfVxuICAgIGluZGV4ID0gLTE7XG4gICAgdmFyIG90aGVyQXJncyA9IEFycmF5KHN0YXJ0ICsgMSk7XG4gICAgd2hpbGUgKCsraW5kZXggPCBzdGFydCkge1xuICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgIH1cbiAgICBvdGhlckFyZ3Nbc3RhcnRdID0gdHJhbnNmb3JtKGFycmF5KTtcbiAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvdmVyUmVzdDtcbiIsInZhciBmcmVlR2xvYmFsID0gcmVxdWlyZSgnLi9fZnJlZUdsb2JhbCcpO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gcm9vdDtcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlQWRkO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldENhY2hlSGFzO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb0FycmF5O1xuIiwidmFyIGJhc2VTZXRUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VTZXRUb1N0cmluZycpLFxuICAgIHNob3J0T3V0ID0gcmVxdWlyZSgnLi9fc2hvcnRPdXQnKTtcblxuLyoqXG4gKiBTZXRzIHRoZSBgdG9TdHJpbmdgIG1ldGhvZCBvZiBgZnVuY2AgdG8gcmV0dXJuIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAqL1xudmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRUb1N0cmluZztcbiIsIi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG9ydE91dDtcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrRGVsZXRlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSBzdGFjayB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdGFja0hhcztcbiIsInZhciBMaXN0Q2FjaGUgPSByZXF1aXJlKCcuL19MaXN0Q2FjaGUnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBNYXBDYWNoZSA9IHJlcXVpcmUoJy4vX01hcENhY2hlJyk7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0YWNrU2V0O1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gKiBjb21wYXJpc29ucyBvZiB2YWx1ZXMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gc3RyaWN0SW5kZXhPZihhcnJheSwgdmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKGFycmF5W2luZGV4XSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmljdEluZGV4T2Y7XG4iLCJ2YXIgYXNjaWlTaXplID0gcmVxdWlyZSgnLi9fYXNjaWlTaXplJyksXG4gICAgaGFzVW5pY29kZSA9IHJlcXVpcmUoJy4vX2hhc1VuaWNvZGUnKSxcbiAgICB1bmljb2RlU2l6ZSA9IHJlcXVpcmUoJy4vX3VuaWNvZGVTaXplJyk7XG5cbi8qKlxuICogR2V0cyB0aGUgbnVtYmVyIG9mIHN5bWJvbHMgaW4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1NpemUoc3RyaW5nKSB7XG4gIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICA6IGFzY2lpU2l6ZShzdHJpbmcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1NpemU7XG4iLCJ2YXIgbWVtb2l6ZUNhcHBlZCA9IHJlcXVpcmUoJy4vX21lbW9pemVDYXBwZWQnKTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbnZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChzdHJpbmcuY2hhckNvZGVBdCgwKSA9PT0gNDYgLyogLiAqLykge1xuICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgfVxuICBzdHJpbmcucmVwbGFjZShyZVByb3BOYW1lLCBmdW5jdGlvbihtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG4gICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmluZ1RvUGF0aDtcbiIsInZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4vaXNTeW1ib2wnKTtcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9LZXk7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xudmFyIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4vKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xudmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4vKipcbiAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICovXG5mdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IHJlVW5pY29kZS5sYXN0SW5kZXggPSAwO1xuICB3aGlsZSAocmVVbmljb2RlLnRlc3Qoc3RyaW5nKSkge1xuICAgICsrcmVzdWx0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdW5pY29kZVNpemU7XG4iLCJ2YXIgYmFzZUNsb25lID0gcmVxdWlyZSgnLi9fYmFzZUNsb25lJyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZURlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gKlxuICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2xvbmU7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbnN0YW50IGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IF8udGltZXMoMiwgXy5jb25zdGFudCh7ICdhJzogMSB9KSk7XG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gKiAvLyA9PiBbeyAnYSc6IDEgfSwgeyAnYSc6IDEgfV1cbiAqXG4gKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBjb25zdGFudDtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mb3JFYWNoJyk7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcTtcbiIsInZhciBhcnJheUZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5RmlsdGVyJyksXG4gICAgYmFzZUZpbHRlciA9IHJlcXVpcmUoJy4vX2Jhc2VGaWx0ZXInKSxcbiAgICBiYXNlSXRlcmF0ZWUgPSByZXF1aXJlKCcuL19iYXNlSXRlcmF0ZWUnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5Jyk7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyBhbiBhcnJheSBvZiBhbGwgZWxlbWVudHNcbiAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAqIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICpcbiAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmlsdGVyZWQgYXJyYXkuXG4gKiBAc2VlIF8ucmVqZWN0XG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICogXTtcbiAqXG4gKiBfLmZpbHRlcih1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gKlxuICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5maWx0ZXIodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLmZpbHRlcih1c2VycywgJ2FjdGl2ZScpO1xuICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICpcbiAqIC8vIENvbWJpbmluZyBzZXZlcmFsIHByZWRpY2F0ZXMgdXNpbmcgYF8ub3ZlckV2ZXJ5YCBvciBgXy5vdmVyU29tZWAuXG4gKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbeyAnYWdlJzogMzYgfSwgWydhZ2UnLCA0MF1dKSk7XG4gKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnLCAnYmFybmV5J11cbiAqL1xuZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUZpbHRlciA6IGJhc2VGaWx0ZXI7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGJhc2VJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaWx0ZXI7XG4iLCJ2YXIgYXJyYXlFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXlFYWNoJyksXG4gICAgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpLFxuICAgIGNhc3RGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2Nhc3RGdW5jdGlvbicpLFxuICAgIGlzQXJyYXkgPSByZXF1aXJlKCcuL2lzQXJyYXknKTtcblxuLyoqXG4gKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIGVsZW1lbnQuXG4gKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gKiBwcm9wZXJ0eSBhcmUgaXRlcmF0ZWQgbGlrZSBhcnJheXMuIFRvIGF2b2lkIHRoaXMgYmVoYXZpb3IgdXNlIGBfLmZvckluYFxuICogb3IgYF8uZm9yT3duYCBmb3Igb2JqZWN0IGl0ZXJhdGlvbi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAYWxpYXMgZWFjaFxuICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gKlxuICogXy5mb3JFYWNoKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICogICBjb25zb2xlLmxvZyhrZXkpO1xuICogfSk7XG4gKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheUVhY2ggOiBiYXNlRWFjaDtcbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgY2FzdEZ1bmN0aW9uKGl0ZXJhdGVlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZm9yRWFjaDtcbiIsInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0O1xuIiwidmFyIGJhc2VIYXMgPSByZXF1aXJlKCcuL19iYXNlSGFzJyksXG4gICAgaGFzUGF0aCA9IHJlcXVpcmUoJy4vX2hhc1BhdGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXMob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXMob3RoZXIsICdhJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzO1xuIiwidmFyIGJhc2VIYXNJbiA9IHJlcXVpcmUoJy4vX2Jhc2VIYXNJbicpLFxuICAgIGhhc1BhdGggPSByZXF1aXJlKCcuL19oYXNQYXRoJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNJbjtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaWRlbnRpdHk7XG4iLCJ2YXIgYmFzZUlzQXJndW1lbnRzID0gcmVxdWlyZSgnLi9fYmFzZUlzQXJndW1lbnRzJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc0FycmF5O1xuIiwidmFyIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc0xlbmd0aCA9IHJlcXVpcmUoJy4vaXNMZW5ndGgnKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheUxpa2U7XG4iLCJ2YXIgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290JyksXG4gICAgc3R1YkZhbHNlID0gcmVxdWlyZSgnLi9zdHViRmFsc2UnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQ7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVJc0J1ZmZlciA9IEJ1ZmZlciA/IEJ1ZmZlci5pc0J1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQnVmZmVyO1xuIiwidmFyIGJhc2VLZXlzID0gcmVxdWlyZSgnLi9fYmFzZUtleXMnKSxcbiAgICBnZXRUYWcgPSByZXF1aXJlKCcuL19nZXRUYWcnKSxcbiAgICBpc0FyZ3VtZW50cyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNCdWZmZXIgPSByZXF1aXJlKCcuL2lzQnVmZmVyJyksXG4gICAgaXNQcm90b3R5cGUgPSByZXF1aXJlKCcuL19pc1Byb3RvdHlwZScpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhbiBlbXB0eSBvYmplY3QsIGNvbGxlY3Rpb24sIG1hcCwgb3Igc2V0LlxuICpcbiAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICogcHJvcGVydGllcy5cbiAqXG4gKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAqIGpRdWVyeS1saWtlIGNvbGxlY3Rpb25zIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBsZW5ndGhgIG9mIGAwYC5cbiAqIFNpbWlsYXJseSwgbWFwcyBhbmQgc2V0cyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgc2l6ZWAgb2YgYDBgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNFbXB0eShudWxsKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRW1wdHkodHJ1ZSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0VtcHR5KDEpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSAmJlxuICAgICAgKGlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUuc3BsaWNlID09ICdmdW5jdGlvbicgfHxcbiAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgIHJldHVybiAhdmFsdWUubGVuZ3RoO1xuICB9XG4gIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgcmV0dXJuICF2YWx1ZS5zaXplO1xuICB9XG4gIGlmIChpc1Byb3RvdHlwZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gIWJhc2VLZXlzKHZhbHVlKS5sZW5ndGg7XG4gIH1cbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNFbXB0eTtcbiIsInZhciBiYXNlR2V0VGFnID0gcmVxdWlyZSgnLi9fYmFzZUdldFRhZycpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb247XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNMZW5ndGg7XG4iLCJ2YXIgYmFzZUlzTWFwID0gcmVxdWlyZSgnLi9fYmFzZUlzTWFwJyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc01hcCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzTWFwO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBtYXAsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc01hcChuZXcgTWFwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTWFwKG5ldyBXZWFrTWFwKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc01hcCA9IG5vZGVJc01hcCA/IGJhc2VVbmFyeShub2RlSXNNYXApIDogYmFzZUlzTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFwO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNPYmplY3Q7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJ2YXIgYmFzZUlzU2V0ID0gcmVxdWlyZSgnLi9fYmFzZUlzU2V0JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1NldChuZXcgU2V0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU2V0O1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN0cmluZ2AgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHN0cmluZywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU3RyaW5nKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3RyaW5nKDEpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICghaXNBcnJheSh2YWx1ZSkgJiYgaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzdHJpbmdUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3RyaW5nO1xuIiwidmFyIGJhc2VHZXRUYWcgPSByZXF1aXJlKCcuL19iYXNlR2V0VGFnJyksXG4gICAgaXNPYmplY3RMaWtlID0gcmVxdWlyZSgnLi9pc09iamVjdExpa2UnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzU3ltYm9sO1xuIiwidmFyIGJhc2VJc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL19iYXNlSXNUeXBlZEFycmF5JyksXG4gICAgYmFzZVVuYXJ5ID0gcmVxdWlyZSgnLi9fYmFzZVVuYXJ5JyksXG4gICAgbm9kZVV0aWwgPSByZXF1aXJlKCcuL19ub2RlVXRpbCcpO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1R5cGVkQXJyYXkgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc1R5cGVkQXJyYXk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIHR5cGVkIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxubW9kdWxlLmV4cG9ydHMgPSBpc1R5cGVkQXJyYXk7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNVbmRlZmluZWQodm9pZCAwKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVW5kZWZpbmVkKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNVbmRlZmluZWQ7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXM7XG4iLCJ2YXIgYXJyYXlMaWtlS2V5cyA9IHJlcXVpcmUoJy4vX2FycmF5TGlrZUtleXMnKSxcbiAgICBiYXNlS2V5c0luID0gcmVxdWlyZSgnLi9fYmFzZUtleXNJbicpLFxuICAgIGlzQXJyYXlMaWtlID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzSW4obmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ10gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24ga2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0LCB0cnVlKSA6IGJhc2VLZXlzSW4ob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzSW47XG4iLCJ2YXIgYXJyYXlNYXAgPSByZXF1aXJlKCcuL19hcnJheU1hcCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VNYXAgPSByZXF1aXJlKCcuL19iYXNlTWFwJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqXG4gKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAqIGBfLmV2ZXJ5YCwgYF8uZmlsdGVyYCwgYF8ubWFwYCwgYF8ubWFwVmFsdWVzYCwgYF8ucmVqZWN0YCwgYW5kIGBfLnNvbWVgLlxuICpcbiAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICogYGFyeWAsIGBjaHVua2AsIGBjdXJyeWAsIGBjdXJyeVJpZ2h0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGV2ZXJ5YCxcbiAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICogYHNhbXBsZVNpemVgLCBgc2xpY2VgLCBgc29tZWAsIGBzb3J0QnlgLCBgc3BsaXRgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLFxuICogYHRlbXBsYXRlYCwgYHRyaW1gLCBgdHJpbUVuZGAsIGB0cmltU3RhcnRgLCBhbmQgYHdvcmRzYFxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gc3F1YXJlKG4pIHtcbiAqICAgcmV0dXJuIG4gKiBuO1xuICogfVxuICpcbiAqIF8ubWFwKFs0LCA4XSwgc3F1YXJlKTtcbiAqIC8vID0+IFsxNiwgNjRdXG4gKlxuICogXy5tYXAoeyAnYSc6IDQsICdiJzogOCB9LCBzcXVhcmUpO1xuICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiB2YXIgdXNlcnMgPSBbXG4gKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICogICB7ICd1c2VyJzogJ2ZyZWQnIH1cbiAqIF07XG4gKlxuICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gKiBfLm1hcCh1c2VycywgJ3VzZXInKTtcbiAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICovXG5mdW5jdGlvbiBtYXAoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXA7XG4iLCJ2YXIgTWFwQ2FjaGUgPSByZXF1aXJlKCcuL19NYXBDYWNoZScpO1xuXG4vKiogRXJyb3IgbWVzc2FnZSBjb25zdGFudHMuICovXG52YXIgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IG1lbW9pemVzIHRoZSByZXN1bHQgb2YgYGZ1bmNgLiBJZiBgcmVzb2x2ZXJgIGlzXG4gKiBwcm92aWRlZCwgaXQgZGV0ZXJtaW5lcyB0aGUgY2FjaGUga2V5IGZvciBzdG9yaW5nIHRoZSByZXN1bHQgYmFzZWQgb24gdGhlXG4gKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAqIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbiBpcyB1c2VkIGFzIHRoZSBtYXAgY2FjaGUga2V5LiBUaGUgYGZ1bmNgXG4gKiBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBtZW1vaXplZCBmdW5jdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogVGhlIGNhY2hlIGlzIGV4cG9zZWQgYXMgdGhlIGBjYWNoZWAgcHJvcGVydHkgb24gdGhlIG1lbW9pemVkXG4gKiBmdW5jdGlvbi4gSXRzIGNyZWF0aW9uIG1heSBiZSBjdXN0b21pemVkIGJ5IHJlcGxhY2luZyB0aGUgYF8ubWVtb2l6ZS5DYWNoZWBcbiAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gKiBbYE1hcGBdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXByb3BlcnRpZXMtb2YtdGhlLW1hcC1wcm90b3R5cGUtb2JqZWN0KVxuICogbWV0aG9kIGludGVyZmFjZSBvZiBgY2xlYXJgLCBgZGVsZXRlYCwgYGdldGAsIGBoYXNgLCBhbmQgYHNldGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBoYXZlIGl0cyBvdXRwdXQgbWVtb2l6ZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBtZW1vaXplZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2MnOiAzLCAnZCc6IDQgfTtcbiAqXG4gKiB2YXIgdmFsdWVzID0gXy5tZW1vaXplKF8udmFsdWVzKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogdmFsdWVzKG90aGVyKTtcbiAqIC8vID0+IFszLCA0XVxuICpcbiAqIG9iamVjdC5hID0gMjtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gKiB2YWx1ZXMuY2FjaGUuc2V0KG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsnYScsICdiJ11cbiAqXG4gKiAvLyBSZXBsYWNlIGBfLm1lbW9pemUuQ2FjaGVgLlxuICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAqL1xuZnVuY3Rpb24gbWVtb2l6ZShmdW5jLCByZXNvbHZlcikge1xuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZ3MgPSBhcmd1bWVudHMsXG4gICAgICAgIGtleSA9IHJlc29sdmVyID8gcmVzb2x2ZXIuYXBwbHkodGhpcywgYXJncykgOiBhcmdzWzBdLFxuICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgaWYgKGNhY2hlLmhhcyhrZXkpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KGtleSk7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIG1lbW9pemVkLmNhY2hlID0gY2FjaGUuc2V0KGtleSwgcmVzdWx0KSB8fCBjYWNoZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBtZW1vaXplZC5jYWNoZSA9IG5ldyAobWVtb2l6ZS5DYWNoZSB8fCBNYXBDYWNoZSk7XG4gIHJldHVybiBtZW1vaXplZDtcbn1cblxuLy8gRXhwb3NlIGBNYXBDYWNoZWAuXG5tZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgdW5kZWZpbmVkYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gKiAvLyA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gKi9cbmZ1bmN0aW9uIG5vb3AoKSB7XG4gIC8vIE5vIG9wZXJhdGlvbiBwZXJmb3JtZWQuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gbm9vcDtcbiIsInZhciBiYXNlUHJvcGVydHkgPSByZXF1aXJlKCcuL19iYXNlUHJvcGVydHknKSxcbiAgICBiYXNlUHJvcGVydHlEZWVwID0gcmVxdWlyZSgnLi9fYmFzZVByb3BlcnR5RGVlcCcpLFxuICAgIGlzS2V5ID0gcmVxdWlyZSgnLi9faXNLZXknKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwcm9wZXJ0eTtcbiIsInZhciBhcnJheVJlZHVjZSA9IHJlcXVpcmUoJy4vX2FycmF5UmVkdWNlJyksXG4gICAgYmFzZUVhY2ggPSByZXF1aXJlKCcuL19iYXNlRWFjaCcpLFxuICAgIGJhc2VJdGVyYXRlZSA9IHJlcXVpcmUoJy4vX2Jhc2VJdGVyYXRlZScpLFxuICAgIGJhc2VSZWR1Y2UgPSByZXF1aXJlKCcuL19iYXNlUmVkdWNlJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpO1xuXG4vKipcbiAqIFJlZHVjZXMgYGNvbGxlY3Rpb25gIHRvIGEgdmFsdWUgd2hpY2ggaXMgdGhlIGFjY3VtdWxhdGVkIHJlc3VsdCBvZiBydW5uaW5nXG4gKiBlYWNoIGVsZW1lbnQgaW4gYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYCwgd2hlcmUgZWFjaCBzdWNjZXNzaXZlXG4gKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gKiBpcyBub3QgZ2l2ZW4sIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCBpcyB1c2VkIGFzIHRoZSBpbml0aWFsXG4gKiB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czpcbiAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gKlxuICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICpcbiAqIFRoZSBndWFyZGVkIG1ldGhvZHMgYXJlOlxuICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gKiBhbmQgYHNvcnRCeWBcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKiBAc2VlIF8ucmVkdWNlUmlnaHRcbiAqIEBleGFtcGxlXG4gKlxuICogXy5yZWR1Y2UoWzEsIDJdLCBmdW5jdGlvbihzdW0sIG4pIHtcbiAqICAgcmV0dXJuIHN1bSArIG47XG4gKiB9LCAwKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLnJlZHVjZSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gKiAgIChyZXN1bHRbdmFsdWVdIHx8IChyZXN1bHRbdmFsdWVdID0gW10pKS5wdXNoKGtleSk7XG4gKiAgIHJldHVybiByZXN1bHQ7XG4gKiB9LCB7fSk7XG4gKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIHJlZHVjZShjb2xsZWN0aW9uLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2UgOiBiYXNlUmVkdWNlLFxuICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgYmFzZUl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlZHVjZTtcbiIsInZhciBiYXNlS2V5cyA9IHJlcXVpcmUoJy4vX2Jhc2VLZXlzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheUxpa2UgPSByZXF1aXJlKCcuL2lzQXJyYXlMaWtlJyksXG4gICAgaXNTdHJpbmcgPSByZXF1aXJlKCcuL2lzU3RyaW5nJyksXG4gICAgc3RyaW5nU2l6ZSA9IHJlcXVpcmUoJy4vX3N0cmluZ1NpemUnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKipcbiAqIEdldHMgdGhlIHNpemUgb2YgYGNvbGxlY3Rpb25gIGJ5IHJldHVybmluZyBpdHMgbGVuZ3RoIGZvciBhcnJheS1saWtlXG4gKiB2YWx1ZXMgb3IgdGhlIG51bWJlciBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBmb3Igb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R8c3RyaW5nfSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICogLy8gPT4gMlxuICpcbiAqIF8uc2l6ZSgncGViYmxlcycpO1xuICogLy8gPT4gN1xuICovXG5mdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGlmIChpc0FycmF5TGlrZShjb2xsZWN0aW9uKSkge1xuICAgIHJldHVybiBpc1N0cmluZyhjb2xsZWN0aW9uKSA/IHN0cmluZ1NpemUoY29sbGVjdGlvbikgOiBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgfVxuICB2YXIgdGFnID0gZ2V0VGFnKGNvbGxlY3Rpb24pO1xuICBpZiAodGFnID09IG1hcFRhZyB8fCB0YWcgPT0gc2V0VGFnKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgfVxuICByZXR1cm4gYmFzZUtleXMoY29sbGVjdGlvbikubGVuZ3RoO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNpemU7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0dWJBcnJheTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyBgZmFsc2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50aW1lcygyLCBfLnN0dWJGYWxzZSk7XG4gKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICovXG5mdW5jdGlvbiBzdHViRmFsc2UoKSB7XG4gIHJldHVybiBmYWxzZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHViRmFsc2U7XG4iLCJ2YXIgYmFzZVRvU3RyaW5nID0gcmVxdWlyZSgnLi9fYmFzZVRvU3RyaW5nJyk7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZy4gQW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkIGZvciBgbnVsbGBcbiAqIGFuZCBgdW5kZWZpbmVkYCB2YWx1ZXMuIFRoZSBzaWduIG9mIGAtMGAgaXMgcHJlc2VydmVkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1N0cmluZyhudWxsKTtcbiAqIC8vID0+ICcnXG4gKlxuICogXy50b1N0cmluZygtMCk7XG4gKiAvLyA9PiAnLTAnXG4gKlxuICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICogLy8gPT4gJzEsMiwzJ1xuICovXG5mdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogYmFzZVRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b1N0cmluZztcbiIsInZhciBhcnJheUVhY2ggPSByZXF1aXJlKCcuL19hcnJheUVhY2gnKSxcbiAgICBiYXNlQ3JlYXRlID0gcmVxdWlyZSgnLi9fYmFzZUNyZWF0ZScpLFxuICAgIGJhc2VGb3JPd24gPSByZXF1aXJlKCcuL19iYXNlRm9yT3duJyksXG4gICAgYmFzZUl0ZXJhdGVlID0gcmVxdWlyZSgnLi9fYmFzZUl0ZXJhdGVlJyksXG4gICAgZ2V0UHJvdG90eXBlID0gcmVxdWlyZSgnLi9fZ2V0UHJvdG90eXBlJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzRnVuY3Rpb24gPSByZXF1aXJlKCcuL2lzRnVuY3Rpb24nKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICBpc1R5cGVkQXJyYXkgPSByZXF1aXJlKCcuL2lzVHlwZWRBcnJheScpO1xuXG4vKipcbiAqIEFuIGFsdGVybmF0aXZlIHRvIGBfLnJlZHVjZWA7IHRoaXMgbWV0aG9kIHRyYW5zZm9ybXMgYG9iamVjdGAgdG8gYSBuZXdcbiAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAqIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgdGhydSBgaXRlcmF0ZWVgLCB3aXRoIGVhY2ggaW52b2NhdGlvblxuICogcG90ZW50aWFsbHkgbXV0YXRpbmcgdGhlIGBhY2N1bXVsYXRvcmAgb2JqZWN0LiBJZiBgYWNjdW11bGF0b3JgIGlzIG5vdFxuICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOiAoYWNjdW11bGF0b3IsIHZhbHVlLCBrZXksIG9iamVjdCkuXG4gKiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXQgaXRlcmF0aW9uIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAxLjMuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBjdXN0b20gYWNjdW11bGF0b3IgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udHJhbnNmb3JtKFsyLCAzLCA0XSwgZnVuY3Rpb24ocmVzdWx0LCBuKSB7XG4gKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICogfSwgW10pO1xuICogLy8gPT4gWzQsIDldXG4gKlxuICogXy50cmFuc2Zvcm0oeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICogfSwge30pO1xuICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICovXG5mdW5jdGlvbiB0cmFuc2Zvcm0ob2JqZWN0LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICBpdGVyYXRlZSA9IGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gIGlmIChhY2N1bXVsYXRvciA9PSBudWxsKSB7XG4gICAgdmFyIEN0b3IgPSBvYmplY3QgJiYgb2JqZWN0LmNvbnN0cnVjdG9yO1xuICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgIGFjY3VtdWxhdG9yID0gaXNBcnIgPyBuZXcgQ3RvciA6IFtdO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGlzRnVuY3Rpb24oQ3RvcikgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKSA6IHt9O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGFjY3VtdWxhdG9yID0ge307XG4gICAgfVxuICB9XG4gIChpc0Fyckxpa2UgPyBhcnJheUVhY2ggOiBiYXNlRm9yT3duKShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIG9iamVjdCk7XG4gIH0pO1xuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhbnNmb3JtO1xuIiwidmFyIGJhc2VGbGF0dGVuID0gcmVxdWlyZSgnLi9fYmFzZUZsYXR0ZW4nKSxcbiAgICBiYXNlUmVzdCA9IHJlcXVpcmUoJy4vX2Jhc2VSZXN0JyksXG4gICAgYmFzZVVuaXEgPSByZXF1aXJlKCcuL19iYXNlVW5pcScpLFxuICAgIGlzQXJyYXlMaWtlT2JqZWN0ID0gcmVxdWlyZSgnLi9pc0FycmF5TGlrZU9iamVjdCcpO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgQXJyYXlcbiAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqL1xudmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmlvbjtcbiIsInZhciBiYXNlVmFsdWVzID0gcmVxdWlyZSgnLi9fYmFzZVZhbHVlcycpLFxuICAgIGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8udmFsdWVzKCdoaScpO1xuICogLy8gPT4gWydoJywgJ2knXVxuICovXG5mdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmFsdWVzO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdGxvYWRlZDogZmFsc2UsXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuXHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiaW1wb3J0IHsgR3JhcGggfSBmcm9tIFwiZ3JhcGhsaWJcIiAvLyBodHRwczovL2dpdGh1Yi5jb20vZGFncmVqcy9ncmFwaGxpYi93aWtpXHJcbmltcG9ydCB7IFRlcm1pbmFsRmlsZVN5c3RlbVR5cGUsIFRlcm1pbmFsRmlsZVN5c3RlbVVzZXIgfSBmcm9tIFwiLi9pbnRlcmZhY2VzXCJcclxuXHJcbmNvbnN0IEV4dDQgPSB7XHJcblx0bmFtZTogXCJleHQ0XCIsXHJcblx0cHJvaGliaXRlZEZpbGVOYW1lQ2hhcmVjdGVyczogW1wiXFwwXCIsIFwiXFxcXDBcIiwgXCIuXCIsIFwiLi5cIl0sXHJcbn0gYXMgVGVybWluYWxGaWxlU3lzdGVtVHlwZVxyXG5cclxuY2xhc3MgVW5peEZpbGVTeXN0ZW1FbXVsYXRvciB7XHJcblx0LyoqXHJcblx0ICogQSBjb21wb3VuZCwgZGlyZWN0ZWQgZ3JhcGggaW5zdGFuY2UgcmVwcmVzZW50aW5nIHRoZSBmaWxlc3lzdGVtIHRyZWUuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBncmFwaCA9IG5ldyBHcmFwaCh7IGNvbXBvdW5kOiB0cnVlLCBkaXJlY3RlZDogdHJ1ZSB9KVxyXG5cdC8qKlxyXG5cdCAqIFRoZSByb290IGRpcmVjdG9yeSBvZiB0aGUgZmlsZSBzeXN0ZW1cclxuXHQgKi9cclxuXHRwcml2YXRlIHJlYWRvbmx5IHJvb3REaXIgPSBcIi9cIlxyXG5cdC8qKlxyXG5cdCAqIFRoZSBob21lIGRpcmVjdG9yeVxyXG5cdCAqL1xyXG5cdHByaXZhdGUgcmVhZG9ubHkgaG9tZURpciA9IHRoaXMucm9vdERpciArIFwiaG9tZS9cIlxyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgcm9vdCB1c2VyXHJcblx0ICovXHJcblx0cHJpdmF0ZSByZWFkb25seSByb290VXNyOiBUZXJtaW5hbEZpbGVTeXN0ZW1Vc2VyID0ge1xyXG5cdFx0bmFtZTogXCJyb290XCIsXHJcblx0XHRwYXNzd29yZDogXCJwYXNzd29yZFwiLFxyXG5cdFx0aG9tZURpcjogdGhpcy5ob21lRGlyLFxyXG5cdH1cclxuXHQvKipcclxuXHQgKiBBbiBhcnJheSB0byBrZWVwIHRyYWNrIG9mIGV4aXN0aW5nIHVzZXJzXHJcblx0ICovXHJcblx0cHJpdmF0ZSByZWFkb25seSB1c2VycyA9IFtdIGFzIFRlcm1pbmFsRmlsZVN5c3RlbVVzZXJbXVxyXG5cdHByaXZhdGUgY3VycmVudFVzZXI6IFRlcm1pbmFsRmlsZVN5c3RlbVVzZXJcclxuXHQvKipcclxuXHQgKiBUaGUgY3VycmVudCB3b3JraW5nIGRpcmVjdG9yeVxyXG5cdCAqL1xyXG5cdHByaXZhdGUgY3VycmVudERpcjogc3RyaW5nXHJcblx0LyoqXHJcblx0ICogVGhlIGZpbGUgc3lzdGVtIHR5cGVcclxuXHQgKi9cclxuXHRwcml2YXRlIGZpbGVTeXN0ZW1UeXBlOiBUZXJtaW5hbEZpbGVTeXN0ZW1UeXBlXHJcblxyXG5cdGNvbnN0cnVjdG9yKHVzZXI/OiBUZXJtaW5hbEZpbGVTeXN0ZW1Vc2VyKSB7XHJcblx0XHR0aGlzLm5ld0Rpcih0aGlzLnJvb3REaXIpXHJcblx0XHR0aGlzLm5ld0Rpcih0aGlzLmhvbWVEaXIpXHJcblxyXG5cdFx0dGhpcy5jdXJyZW50RGlyID0gdGhpcy5hZGR1c2VyKHRoaXMucm9vdFVzcikgYXMgc3RyaW5nXHJcblx0XHR0aGlzLmN1cnJlbnRVc2VyID0gdGhpcy5yb290VXNyXHJcblx0XHRpZiAodXNlciAhPT0gdW5kZWZpbmVkICYmIHVzZXIubmFtZSAhPT0gdGhpcy5yb290VXNyLm5hbWUpIHtcclxuXHRcdFx0dGhpcy5jdXJyZW50RGlyID0gdGhpcy5hZGR1c2VyKHVzZXIpIGFzIHN0cmluZ1xyXG5cdFx0XHR0aGlzLmN1cnJlbnRVc2VyID0gdXNlclxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZmlsZVN5c3RlbVR5cGUgPSBFeHQ0XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKlxyXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IFwiflwiIGlmIHRoZSBjdXJyZW50IGRpcmVjdG9yeSBpcyBpbnNpZGUgdGhlIHVzZXJzIGhvbWUgZGlyZWN0cm95LCBvdGhlcndpc2UgaXQgcmV0dXJucyB0aGUgYWJzb2x1dGUgcGF0aCB0byB0aGUgY3VycmVudCBkaXJlY3RvcnlcclxuXHQgKi9cclxuXHRwdWJsaWMgR2V0Q3VycmVudERpcmVjdG9yeSA9ICgpID0+IHtcclxuXHRcdHJldHVybiB0aGlzLmN1cnJlbnREaXIuc3RhcnRzV2l0aCh0aGlzLmN1cnJlbnRVc2VyLmhvbWVEaXIpID8gdGhpcy5jdXJyZW50RGlyLnJlcGxhY2UodGhpcy5jdXJyZW50VXNlci5ob21lRGlyLCBcIn5cIikgKyB0aGlzLmN1cnJlbnREaXIgOiB0aGlzLmN1cnJlbnREaXJcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEVtdWxhdGVzIHRoZSBta2RpciBjb21tYW5kLlxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBkaXJOYW1lcyBhIHNwYWNlIGRlbGltaXRlZCBzdHJpbmcgY29udGFpbmluZyB0aGUgZGlyZWN0b3JpZXMgdG8gY3JlYXRlXHJcblx0ICogQHJldHVybnMge0Vycm9yW119IEFuIGFycmF5IG9mIGVycm9ycyB0aGF0IG9jY3VyZWQgZHVyaW5nIHRoZSBjcmVhdGlvbiBvZiB0aGUgZGlyZWN0b3JpZXNcclxuXHQgKi9cclxuXHRwdWJsaWMgbWtkaXIgPSAoZGlyTmFtZXM6IHN0cmluZyk6IEVycm9yW10gPT4ge1xyXG5cdFx0dmFyIGVycm9ycyA9IFtdIGFzIEVycm9yW11cclxuXHRcdHZhciBkaXJzID0gZGlyTmFtZXMuc3BsaXQoL1xccysvKS5maWx0ZXIocyA9PiB7XHJcblx0XHRcdHJldHVybiBzICE9PSBcIlwiXHJcblx0XHR9KVxyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBkaXJOYW1lID0gZGlyc1tpXVxyXG5cclxuXHRcdFx0ZGlyTmFtZSA9IHRoaXMucmVwbGFjZVJlcGV0ZXRpdmVGb3J3YXJkc2xhc2hlcyhkaXJOYW1lKVxyXG5cdFx0XHRkaXJOYW1lID0gdGhpcy5yZXNvbHZlUmVsYXRpdmVEaXJTdHJpbmcoZGlyTmFtZSlcclxuXHRcdFx0ZGlyTmFtZSA9IGRpck5hbWUucmVwbGFjZShcIiUyMFwiLCBcIiBcIilcclxuXHJcblx0XHRcdC8vIGNoZWNrIGlmIHRoZSBwYXRoIHRvIHRoZSBuZXcgZGlyZWN0b3J5IGV4aXN0c1xyXG5cdFx0XHR2YXIgZGlyU3BsaXQgPSBkaXJOYW1lLnNwbGl0KFwiL1wiKS5maWx0ZXIocyA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIHMgIT09IFwiXCJcclxuXHRcdFx0fSlcclxuXHRcdFx0ZGlyU3BsaXQuc3BsaWNlKC0xKVxyXG5cdFx0XHR2YXIgcGFyZW50ID0gZGlyU3BsaXQuam9pbihcIi9cIilcclxuXHRcdFx0aWYgKCFwYXJlbnQuc3RhcnRzV2l0aChcIi9cIikpIHBhcmVudCA9IFwiL1wiICsgcGFyZW50XHJcblx0XHRcdGlmICghcGFyZW50LmVuZHNXaXRoKFwiL1wiKSkgcGFyZW50ID0gcGFyZW50ICsgXCIvXCJcclxuXHJcblx0XHRcdGlmICghdGhpcy5ncmFwaC5oYXNOb2RlKHBhcmVudCkpIHtcclxuXHRcdFx0XHRlcnJvcnMucHVzaChuZXcgUmFuZ2VFcnJvcihgbWtkaXI6IGNhbm5vdCBjcmVhdGUgZGlyZWN0b3J5IOKAmCR7ZGlyTmFtZX3igJk6IE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnlgKSlcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR0aGlzLm5ld0RpcihkaXJOYW1lLCBwYXJlbnQpXHJcblx0XHRcdFx0dGhpcy5uZXdEaXIoXCIuXCIsIGRpck5hbWUpXHJcblx0XHRcdFx0dGhpcy5uZXdEaXIoXCIuLlwiLCBkaXJOYW1lKVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZXJyb3JzXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBZGRzIGEgbmV3IHVzZXIgdG8gdGhlIGZpbGVzeXN0ZW0gaWYgaXQgZG9lc250IGFscmVhZHkgZXhpc3RcclxuXHQgKiBAcGFyYW0ge1Rlcm1pbmFsRmlsZVN5c3RlbVVzZXJ9IHVzZXIgdGhlIHVzZXIgdG8gYWRkIHRvIHRoZSBmaWxlIHN5c3RlbVxyXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd8UmFuZ2VFcnJvcn0gcmFuZ2UgZXJyb3IgaWYgdGhlIHVzZXIgYWxyZWFkeSBleGlzdHMsIGVsc2UgdGhlIGZ1bGwgcGF0aCB0byB0aGUgdXNlciBkaXJlY3RvcnlcclxuXHQgKi9cclxuXHRwdWJsaWMgYWRkdXNlciA9ICh1c2VyOiBUZXJtaW5hbEZpbGVTeXN0ZW1Vc2VyKTogc3RyaW5nIHwgUmFuZ2VFcnJvciA9PiB7XHJcblx0XHRpZiAodGhpcy51c2Vycy5zb21lKCh1KSA9PiB7XHJcblx0XHRcdHJldHVybiB1Lm5hbWUgPT09IHVzZXIubmFtZVxyXG5cdFx0fSkpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBSYW5nZUVycm9yKGBhZGR1c2VyOiBUaGUgdXNlciAnJHt1c2VyLm5hbWV9JyBhbHJlYWR5IGV4aXN0cy5gKVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy51c2Vycy5wdXNoKHVzZXIpXHJcblx0XHRcdHJldHVybiB0aGlzLm5ld1VzZXJEaXIodXNlcilcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEVtdWxhdGVzIHRoZSBwd2QgY29tbWFuZC5cclxuXHQgKiBAcmV0dXJucyBUaGhlIGN1cnJlbnQgd29ya2luZyBkaXJlY3RvcnlcclxuXHQgKi9cclxuXHRwdWJsaWMgcHdkID0gKCkgPT4ge1xyXG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudERpclxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRW11bGF0ZXMgdGhlIGNkIGNvbW1hbmQuXHJcblx0ICogQHBhcmFtIGRpciBUaGUgZGlyZWN0b3J5IHRvIHN3aXRjaCB0b1xyXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd8UmFuZ2VFcnJvcn0gSWYgdGhlIGRpcmVjdG9yeSBleGlzdHMsIHJldHVybnMgdGhlIG5ldyB3b3JraW5nIGRpcmVjdG9yeSwgUmFuZ2VFcnJvciBvdGhlcndpc2VcclxuXHQgKi9cclxuXHRwdWJsaWMgY2QgPSAoZGlyOiBzdHJpbmcpOiBzdHJpbmcgfCBSYW5nZUVycm9yID0+IHtcclxuXHRcdGRpciA9IHRoaXMucmVzb2x2ZVJlbGF0aXZlRGlyU3RyaW5nKGRpcilcclxuXHRcdGlmICghdGhpcy5kaXJFeGlzdHMoZGlyKSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFJhbmdlRXJyb3IoYC1iYXNoOiBjZDogJHtkaXJ9OiBObyBzdWNoIGZpbGUgb3IgZGlyZWN0b3J5YClcclxuXHRcdH1cclxuXHRcdHRoaXMuY3VycmVudERpciA9IGRpclxyXG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudERpclxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2hlY2tzIGlmIHRoZSBkaXIgc3RyaW5nIGV4aXN0cyBhcyBhIG5vZGUgaW4gdGhlIGZpbGVzeXN0ZW0gZ3JhcGhcclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZGlyIFRoZSBkaXJlY3RvcnkgcGF0aCB0byBjaGVjayBpZiBpdCBleHNpdHNcclxuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYGBgdHJ1ZWBgYCBpZiB0aGUgZGlyIHN0cmluZyBleGlzdHMgYXMgYSBub2RlIGluIHRoZSBmaWxlc3lzdGVtIGdyYXBoLCBgYGBmYWxzZWBgYCBvdGhlcndpc2VcclxuXHQgKi9cclxuXHRwcml2YXRlIGRpckV4aXN0cyA9IChkaXI6IHN0cmluZyk6IGJvb2xlYW4gPT4ge1xyXG5cdFx0cmV0dXJuIHRoaXMuZ3JhcGguaGFzTm9kZShkaXIpXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZXBsYWNlcyBhbnkgaW5zdGFuY2Ugb2YgcmVwZXRldGl2ZSBmb3J3YXJkIHNsYXNoZXMgd2l0aCBhIHNpbmdsZSBmb3J3YXJkIHNsYXNoOlxyXG5cdCAqIC8vLy9hLy8vYi8vLy8vLyA9PiAvYS9iL1xyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBkaXIgdGhlIGRpcmVjdG9yeSBzdHJpbmcgdG8gdmFsaWRhdGVcclxuXHQgKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUgZGlyZWN0b3J5IHN0cmluZyBjb250YWluaW5nIG5vIHJlcGV0ZXRpdmUgZm9yd2FyZCBzbGFzaGVzXHJcblx0ICovXHJcblx0cHJpdmF0ZSByZXBsYWNlUmVwZXRldGl2ZUZvcndhcmRzbGFzaGVzID0gKGRpcjogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuXHRcdHJldHVybiBkaXIucmVwbGFjZSgvXFwvKy9nLCBcIi9cIilcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlc29sdmVzIGRpcmVjdG9yeSBzdHJpbmdzIHdpdGggcmVsYXRpdmUgcGF0aHMgYW5kIHJldHVybnMgdGhlIGFic29sdXRlIHBhdGguXHJcblx0ICogSWYgYGBgZGlyYGBgIHN0YXJ0cyB3aXRoIC4vLCBpdCB3aWxsIGJlIHJlcGxhY2VkIHdpdGggYGBgdGhpcy5jdXJyZW50RGlyYGBgLlxyXG5cdCAqIElmIGBgYGRpcmBgYCBkb2VzbnQgZW5kIHdpdGggLywgYGBgXCIvXCJgYGAgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgcmVzb2x2ZWQgZGlyZWN0b3J5IHN0cmluZy5cclxuXHQgKiBAcGFyYW0ge3N0cmluZ30gZGlyIHRoZSBkaXJlY3RvcnkgcGF0aCB0byByZXNvbHZlXHJcblx0ICogQHJldHVybnMge3N0cmluZ30gdGhlIHJlc29sdmVkIHJlbGF0aXZlIGRpcmVjdG9yeSBzdHJpbmdcclxuXHQgKi9cclxuXHRwcml2YXRlIHJlc29sdmVSZWxhdGl2ZURpclN0cmluZyA9IChkaXI6IHN0cmluZyk6IHN0cmluZyA9PiB7XHJcblx0XHRpZiAoIWRpci5zdGFydHNXaXRoKFwiL1wiKSAmJiAhZGlyLnN0YXJ0c1dpdGgoXCIuL1wiKSkge1xyXG5cdFx0XHRkaXIgPSBcIi4vXCIgKyBkaXJcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoZGlyLnN0YXJ0c1dpdGgoXCIuL1wiKSkge1xyXG5cdFx0XHRkaXIgPSB0aGlzLmN1cnJlbnREaXIgKyBkaXIuc2xpY2UoMilcclxuXHRcdH1cclxuXHRcdGlmIChkaXIuc3RhcnRzV2l0aChcIi4uL1wiKSkge1xyXG5cdFx0XHRkaXIgPSB0aGlzLmN1cnJlbnREaXIuc2xpY2UoMCwgdGhpcy5jdXJyZW50RGlyLmxhc3RJbmRleE9mKFwiL1wiKSlcclxuXHRcdFx0ZGlyID0gZGlyLnNsaWNlKDAsIGRpci5sYXN0SW5kZXhPZihcIi9cIikpXHJcblx0XHRcdGRpciA9IGRpci5zbGljZSgwLCBkaXIubGFzdEluZGV4T2YoXCIvXCIpKSArIFwiL1wiXHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIG91dHB1dCA9IFwiXCJcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGlyLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdG91dHB1dCA9IG91dHB1dCArIGRpcltpXVxyXG5cdFx0XHRpZiAob3V0cHV0Lm1hdGNoKC8oPzw9XFwvKShcXC5cXC5cXC8pKyQvKSkge1xyXG5cdFx0XHRcdC8vIC9hL2IvLi4vID0+IC9hL1xyXG5cdFx0XHRcdG91dHB1dCA9IG91dHB1dC5zbGljZSgwLCBvdXRwdXQubGFzdEluZGV4T2YoXCIvXCIpKVxyXG5cdFx0XHRcdG91dHB1dCA9IG91dHB1dC5zbGljZSgwLCBvdXRwdXQubGFzdEluZGV4T2YoXCIvXCIpKVxyXG5cdFx0XHRcdG91dHB1dCA9IG91dHB1dC5zbGljZSgwLCBvdXRwdXQubGFzdEluZGV4T2YoXCIvXCIpKSArIFwiL1wiXHJcblx0XHRcdH0gZWxzZSBpZiAob3V0cHV0Lm1hdGNoKC8oPzw9XFwvKShcXC5cXC8pKyQvKSkge1xyXG5cdFx0XHRcdC8vIC9hL2IvLi8gPT4gL2EvYi9cclxuXHRcdFx0XHRvdXRwdXQgPSBvdXRwdXQuc2xpY2UoMCwgb3V0cHV0Lmxhc3RJbmRleE9mKFwiL1wiKSlcclxuXHRcdFx0XHRvdXRwdXQgPSBvdXRwdXQuc2xpY2UoMCwgb3V0cHV0Lmxhc3RJbmRleE9mKFwiL1wiKSkgKyBcIi9cIlxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKCFvdXRwdXQuZW5kc1dpdGgoXCIvXCIpKSB7XHJcblx0XHRcdG91dHB1dCA9IG91dHB1dCArIFwiL1wiXHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIG91dHB1dFxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWRkcyBhIG5ldyB1c2VyIGRpcmVjdG9yeSBhcyBjaGlsZCBvZiB0aGUgcGFyZW50IGRpcmVjdG9yeSwgd2hpY2ggZGVmYXVsdHMgdG8gdGhlIGhvbWUgZGlyZWN0b3J5LlxyXG5cdCAqIEBwYXJhbSB7VGVybWluYWxGaWxlU3lzdGVtVXNlcn0gdXNlciB0aGUgdXNlciB0byBjcmVhdGUgdGhlIGhvbWUgZGlyZWN0b3J5IGZvclxyXG5cdCAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBwYXRoIHRvIHRoZSB1c2VycyBob21lIGRpcmVjdG9yeVxyXG5cdCAqL1xyXG5cdHByaXZhdGUgbmV3VXNlckRpciA9ICh1c2VyOiBUZXJtaW5hbEZpbGVTeXN0ZW1Vc2VyKTogc3RyaW5nID0+IHtcclxuXHRcdGlmICh1c2VyLmhvbWVEaXIgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR1c2VyLmhvbWVEaXIgPSB0aGlzLmhvbWVEaXJcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmICghdXNlci5ob21lRGlyLmVuZHNXaXRoKFwiL1wiKSkge1xyXG5cdFx0XHRcdHVzZXIuaG9tZURpciA9IHVzZXIuaG9tZURpciArIFwiL1wiXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLm5ld0Rpcih1c2VyLmhvbWVEaXIgKyB1c2VyLm5hbWUsIHVzZXIuaG9tZURpcilcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBuZXcgZGlyZWN0b3J5LiBSZXNvbHZlcyB0aGUgYWJzb2x1dGUgcGF0aCBiZWZvcmUgY3JlYXRpb24uXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IGRpciB0aGUgZGlyZWN0b3J5IHRvIGNyZWF0ZVxyXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBwYXJlbnQgdGhlIHBhcmVudCBvZiB0aGUgbmV3IGRpcmVjdG9yeSAoZGVmYXVsdCBpcyBgYGB0aGlzLnJvb3REaXJgYGApXHJcblx0ICogQHJldHVybnMge3N0cmluZ30gYGBgZGlyYGBgIHRoYXQgd2FzIGNyZWF0ZWRcclxuXHQgKi9cclxuXHRwcml2YXRlIG5ld0RpciA9IChkaXI6IHN0cmluZywgcGFyZW50OiBzdHJpbmcgPSB0aGlzLnJvb3REaXIpOiBzdHJpbmcgPT4ge1xyXG5cdFx0ZGlyID0gdGhpcy5yZXBsYWNlUmVwZXRldGl2ZUZvcndhcmRzbGFzaGVzKGRpcilcclxuXHRcdGRpciA9IHRoaXMucmVzb2x2ZVJlbGF0aXZlRGlyU3RyaW5nKGRpcilcclxuXHRcdHRoaXMuZ3JhcGguc2V0Tm9kZShkaXIsIGRpcilcclxuXHRcdGlmIChkaXIgIT09IHRoaXMucm9vdERpcikge1xyXG5cdFx0XHR0aGlzLmdyYXBoLnNldFBhcmVudChkaXIsIHBhcmVudClcclxuXHRcdH1cclxuXHRcdHJldHVybiBkaXJcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFVuaXhGaWxlU3lzdGVtRW11bGF0b3JcclxuZXhwb3J0IHsgRXh0NCB9XHJcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZXMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgVGVybWluYWxDb21tYW5kLCBUZXJtaW5hbE9wdGlvbnMsIFRlcm1pbmFsRXZlbnQgfSBmcm9tIFwiLi9pbnRlcmZhY2VzXCJcclxuaW1wb3J0IFVuaXhGaWxlU3lzdGVtRW11bGF0b3IgZnJvbSBcIi4vVW5peEZpbGVTeXN0ZW1FbXVsYXRvclwiXHJcbmltcG9ydCBcIi4vc3R5bGVzLmNzc1wiXHJcblxyXG4vLyBUT0RPOiBhZGQgU1M2NCBsaW5rcyB0byBldmVyeSBjb21tYW5kIG1ldGhvZCBqc2RvY1xyXG4vLyBUT0RPOiBpbXBsZW1lbnQgb3B0aW9ucyBmb3IgZXZlcnkgY29tbWFuZFxyXG5cclxuLyoqXHJcbiAqIEVtdWxhdGVzIGEgdW5peCB0ZXJtaW5hbCBieSB0eXBpbmcgb3V0IGNvbW1hbmRzIGFuZCB0aGVyZSBzcGVjaWZpZWQgb3V0cHV0cy5cclxuICogQWxsb3dzIHlvdSB0byBidWlsZCBhbiBldmVudCBzZXF1ZW5jZSBvZiBjb21tYW5kcyBhbmQgdGltaW5ncyB3aGljaCBnZXRzIGV4Y2VjdXRlZCB3aGVuIHRoZSBydW4gbWV0aG9kIGlzIGNhbGxlZC5cclxuICpcclxuICoge0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9MdWNFbmRlbi91bml4LXRlcm1pbmFsLWVtdWxhdG9yfVxyXG4gKi9cclxuY2xhc3MgVW5peFRlcm1pbmFsRW11bGF0b3Ige1xyXG5cdC8qKlxyXG5cdCAqIENvbnRhaW5zIGFsbCBjb21tYW5kcyBleGVjdXRlZCBzbyBmYXIgYnkgcnVuLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgcmVhZG9ubHkgaGlzdG9yeVN0YWNrID0gW10gYXMgQXJyYXk8VGVybWluYWxDb21tYW5kPlxyXG5cdC8qKlxyXG5cdCAqIENvbnRhaW5zIGFsbCBldmVudHMgdG8gYmUgZXhlY3V0ZWQgYnkgcnVuLlxyXG5cdCAqL1xyXG5cdHByaXZhdGUgcmVhZG9ubHkgZXZlbnRRdWV1ZSA9IFtdIGFzIEFycmF5PFRlcm1pbmFsRXZlbnQ+XHJcblx0LyoqXHJcblx0ICogVXNlZCBpbiBydW4gdG8gZGV0ZXJtaW5lIGlmIHRoZXJlIGFyZSBhbnkgZXZlbnRzIGxlZnQgdG8gYmUgZXhlY3V0ZWQuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBjdXJyZW50RXZlbnQ6IFRlcm1pbmFsRXZlbnQgfCB1bmRlZmluZWRcclxuXHJcblx0LyoqXHJcblx0ICogRGVmYXVsdCB2YWx1ZXMgZm9yIFRlcm1pbmFsT3B0aW9ucy5cclxuXHQgKi9cclxuXHRwcml2YXRlIG9wdGlvbnM6IFRlcm1pbmFsT3B0aW9ucyA9IHtcclxuXHRcdHdyYXBwZXJJZDogXCJ0ZXJtaW5hbF9fX2VtdWxhdG9yX19fd3JhcHBlclwiLFxyXG5cdFx0d3JhcHBlckNsYXNzTmFtZTogXCJ0ZXJtaW5hbF9fX2VtdWxhdG9yX19fd3JhcHBlclwiLFxyXG5cdFx0Y3Vyc29yOiBcInxcIixcclxuXHRcdGN1cnNvcklkOiBcInRlcm1pbmFsX19fZW11bGF0b3JfX19jdXJzb3JcIixcclxuXHRcdGN1cnNvckNsYXNzTmFtZTogXCJ0ZXJtaW5hbF9fX2VtdWxhdG9yX19fY3Vyc29yXCIsXHJcblx0XHRjdXJzb3JBbmltYXRpb246IFwic3RhdGljXCIsXHJcblx0XHRlbnZpcm9tZW50OiB1bmRlZmluZWQsXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUaGUgZmlsZSBzeXN0ZW0gZm9yIHRoaXMgdGVybWluYWwgaW5zdGFuY2UuXHJcblx0ICovXHJcblx0cHJpdmF0ZSBmaWxlU3lzdGVtOiBVbml4RmlsZVN5c3RlbUVtdWxhdG9yXHJcblx0LyoqXHJcblx0ICogVGhlIEhUTUwgZWxlbWVudCB0byB3aGljaCBhbGwgdGV4dCBzaG91bGQgYmUgd3JpdHRlbiB0by5cclxuXHQgKi9cclxuXHRwcml2YXRlIHdyYXBwZXJFbGVtZW50OiBIVE1MRWxlbWVudFxyXG5cdC8qKlxyXG5cdCAqIFRoZSBIVE1MIGVsZW1lbnQgdGhhdCBhY3RzIGFzIHRoZSBjdXJzb3JcclxuXHQgKi9cclxuXHRwcml2YXRlIGN1cnNvckVsZW1lbnQ6IEhUTUxFbGVtZW50XHJcblxyXG5cdGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBUZXJtaW5hbE9wdGlvbnMpIHtcclxuXHRcdGlmIChvcHRpb25zKSB7XHJcblx0XHRcdHRoaXMub3B0aW9ucyA9IHtcclxuXHRcdFx0XHQuLi50aGlzLm9wdGlvbnMsXHJcblx0XHRcdFx0Li4ub3B0aW9ucyxcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuZmlsZVN5c3RlbSA9IG5ldyBVbml4RmlsZVN5c3RlbUVtdWxhdG9yKClcclxuXHJcblx0XHR2YXIgd3JhcHBlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMub3B0aW9ucy53cmFwcGVySWQhKVxyXG5cdFx0aWYgKHdyYXBwZXIgPT09IG51bGwpIHtcclxuXHRcdFx0d3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuXHRcdFx0d3JhcHBlci5pZCA9IHRoaXMub3B0aW9ucy53cmFwcGVySWQhXHJcblx0XHR9XHJcblx0XHRpZiAodGhpcy5vcHRpb25zLndyYXBwZXJDbGFzc05hbWUhLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0d3JhcHBlci5jbGFzc0xpc3QuYWRkKHRoaXMub3B0aW9ucy53cmFwcGVyQ2xhc3NOYW1lISlcclxuXHRcdH1cclxuXHRcdHRoaXMud3JhcHBlckVsZW1lbnQgPSB3cmFwcGVyXHJcblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMud3JhcHBlckVsZW1lbnQpXHJcblxyXG5cdFx0dGhpcy5jdXJzb3JFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIilcclxuXHRcdHRoaXMuY3Vyc29yRWxlbWVudC5pZCA9IHRoaXMub3B0aW9ucy5jdXJzb3JJZCFcclxuXHRcdHRoaXMuY3Vyc29yRWxlbWVudC5pbm5lclRleHQgPSB0aGlzLm9wdGlvbnMuY3Vyc29yIVxyXG5cdFx0c3dpdGNoICh0aGlzLm9wdGlvbnMuY3Vyc29yQW5pbWF0aW9uKSB7XHJcblx0XHRcdGNhc2UgXCJmbHVpZFwiOlxyXG5cdFx0XHRcdHRoaXMuY3Vyc29yRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGVybWluYWxfX19jdXJzb3JfX19mbHVpZFwiKVxyXG5cdFx0XHRcdGJyZWFrXHJcblx0XHRcdGNhc2UgXCJzdGF0aWNcIjpcclxuXHRcdFx0XHR0aGlzLmN1cnNvckVsZW1lbnQuY2xhc3NMaXN0LmFkZChcInRlcm1pbmFsX19fY3Vyc29yX19fc3RhdGljXCIpXHJcblx0XHRcdFx0YnJlYWtcclxuXHRcdFx0Y2FzZSB1bmRlZmluZWQ6XHJcblx0XHRcdFx0dGhpcy5jdXJzb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJ0ZXJtaW5hbF9fX2N1cnNvcl9fX25vbmVcIilcclxuXHRcdFx0XHRicmVha1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5jdXJzb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5vcHRpb25zLmN1cnNvckNsYXNzTmFtZSEpXHJcblxyXG5cdFx0dGhpcy53cml0ZU5ld0lucHV0TGluZVRvU3Rkb3V0KClcclxuXHRcdHRoaXMuYXBwZW5kQ3Vyc29yKClcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEJhc2VkIG9uIGhpc3RzaXplIHZhcmlhYmxlIGluIGJhc2g6IGVjaG8gJEhJU1RTSVpFXHJcblx0ICpcclxuXHQgKiBzZWU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE5NDU0ODM3L2Jhc2gtaGlzdHNpemUtdnMtaGlzdGZpbGVzaXplI2Fuc3dlci0xOTQ1NDgzOFxyXG5cdCAqL1xyXG5cdHB1YmxpYyBISVNUU0laRSA9IDUwMFxyXG5cclxuXHQvKipcclxuXHQgKiBBZGRzIGEgY29tbWFuZCB0byB0aGUgdG8gcXVldWUuXHJcblx0ICogQHBhcmFtIHtUZXJtaW5hbENvbW1hbmR9IGNvbW1hbmQgXHRUaGUgY29tbWFuZCB0byBhZGQgdGhlIHRoZSBxdWV1ZVxyXG5cdCAqIEByZXR1cm5zIHtVbml4VGVybWluYWxFbXVsYXRvcn0gXHRcdFRoZSBjdXJyZW50IGluc3RhbmNlIG9mIFVuaXhUZXJtaW5hbEVtdWxhdG9yXHJcblx0ICovXHJcblx0cHVibGljIGFkZENvbW1hbmQgPSAoY29tbWFuZDogVGVybWluYWxDb21tYW5kKTogVW5peFRlcm1pbmFsRW11bGF0b3IgPT4ge1xyXG5cdFx0dGhpcy5ldmVudFF1ZXVlLnB1c2goe1xyXG5cdFx0XHRkZWxheUFmdGVyOiAwLFxyXG5cdFx0XHRjb21tYW5kOiBjb21tYW5kLFxyXG5cdFx0fSBhcyBUZXJtaW5hbEV2ZW50KVxyXG5cdFx0cmV0dXJuIHRoaXNcclxuXHR9XHJcblx0LyoqXHJcblx0ICogQWRkcyBtdWx0aXBsZSBjb21tYW5kcyB0byB0aGUgdG8gcXVldWUuXHJcblx0ICogQHBhcmFtIHtUZXJtaW5hbENvbW1hbmRbXX0gY29tbWFuZHMgXHRUaGUgY29tbWFuZHMgdG8gYWRkIHRoZSB0aGUgcXVldWVcclxuXHQgKiBAcmV0dXJucyB7VW5peFRlcm1pbmFsRW11bGF0b3J9IFx0XHRUaGUgY3VycmVudCBpbnN0YW5jZSBvZiBVbml4VGVybWluYWxFbXVsYXRvclxyXG5cdCAqL1xyXG5cdHB1YmxpYyBhZGRDb21tYW5kcyA9IChjb21tYW5kczogVGVybWluYWxDb21tYW5kW10pOiBVbml4VGVybWluYWxFbXVsYXRvciA9PiB7XHJcblx0XHRjb21tYW5kcy5mb3JFYWNoKChjKSA9PiB7XHJcblx0XHRcdHRoaXMuZXZlbnRRdWV1ZS5wdXNoKHtcclxuXHRcdFx0XHRkZWxheUFmdGVyOiAwLFxyXG5cdFx0XHRcdGNvbW1hbmQ6IGMsXHJcblx0XHRcdH0gYXMgVGVybWluYWxFdmVudClcclxuXHRcdH0pXHJcblx0XHRyZXR1cm4gdGhpc1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWRkcyBhIHBhdXNlIGluIHRoZSBldmVudCBzZXF1ZW5jZS5cclxuXHQgKiBAcGFyYW0ge251bWJlcn0gbXMgVGhlIHRpbWUgdG8gcGF1c2UgZm9yIGluIG1pbGlzZWNvbmRzXHJcblx0ICogQHJldHVybnMge1VuaXhUZXJtaW5hbEVtdWxhdG9yfSBUaGUgY3VycmVudCBpbnN0YW5jZSBvZiBVbml4VGVybWluYWxFbXVsYXRvclxyXG5cdCAqL1xyXG5cdHB1YmxpYyBwYXVzZSA9IChtczogbnVtYmVyKTogVW5peFRlcm1pbmFsRW11bGF0b3IgPT4ge1xyXG5cdFx0dGhpcy5ldmVudFF1ZXVlLnB1c2goe1xyXG5cdFx0XHRkZWxheUFmdGVyOiBtcyxcclxuXHRcdH0gYXMgVGVybWluYWxFdmVudClcclxuXHRcdHJldHVybiB0aGlzXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBFbXVsYXRlcyB0aGUgZWNobyBjb21tYW5kLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHQgXHRcdFx0XHRcdFx0VGhlIHRleHQgdG8gZWNob1xyXG5cdCAqIEBwYXJhbSB7XCJuZXV0cmFsXCJ8bnVtYmVyfSB3cml0ZVNwZWVkIFx0XHRUaGUgc3BlZWQgYXQgd2hpY2ggdG8gd3JpdGUgZWFjaCBjaGFyYWN0ZXIgb2YgdGhlIGNvbW1hbmRcclxuXHQgKiBAcGFyYW0ge251bWJlcnx1bmRlZmluZWR9IHBhdXNlQmVmb3JlT3V0cHV0IFx0VGhlIHRpbWUgdG8gcGF1c2UgYmVmb3JlIHdyaXRpbmcgdGhlIG91dHB1dCBpbiBtaWxpc2Vjb25kc1xyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogZWNobyhcIkhlbGxvLCBXb3JsZFwiKSA9PlxyXG5cdCAqICQgZWNobyBIZWxsbywgV29ybGQhXHJcblx0ICogSGVsbG8sIFdvcmxkIVxyXG5cdCAqIEByZXR1cm5zIHtVbml4VGVybWluYWxFbXVsYXRvcn0gVGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgVW5peFRlcm1pbmFsRW11bGF0b3JcclxuXHQgKi9cclxuXHRwdWJsaWMgZWNobyA9ICh0ZXh0OiBzdHJpbmcsIHdyaXRlU3BlZWQ6IFwibmV1dHJhbFwiIHwgbnVtYmVyID0gXCJuZXV0cmFsXCIsIHBhdXNlQmVmb3JlT3V0cHV0PzogbnVtYmVyKTogVW5peFRlcm1pbmFsRW11bGF0b3IgPT4ge1xyXG5cdFx0dGhpcy5ldmVudFF1ZXVlLnB1c2goe1xyXG5cdFx0XHRjb21tYW5kOiB7XHJcblx0XHRcdFx0dGV4dDogXCJlY2hvIFwiICsgdGV4dCxcclxuXHRcdFx0XHR3cml0ZVNwZWVkOiB3cml0ZVNwZWVkLFxyXG5cdFx0XHRcdG91dHB1dDogdGV4dCxcclxuXHRcdFx0XHRwYXVzZUJlZm9yZU91dHB1dDogcGF1c2VCZWZvcmVPdXRwdXQsXHJcblx0XHRcdH0sXHJcblx0XHR9IGFzIFRlcm1pbmFsRXZlbnQpXHJcblx0XHRyZXR1cm4gdGhpc1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRW11bGF0ZXMgdGhlIGhpc3RvcnkgY29tbWFuZC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSB7XCJuZXV0cmFsXCJ8bnVtYmVyfSB3cml0ZVNwZWVkIFx0XHRUaGUgc3BlZWQgYXQgd2hpY2ggdG8gd3JpdGUgZWFjaCBjaGFyYWN0ZXIgb2YgdGhlIGNvbW1hbmRcclxuXHQgKiBAcGFyYW0ge251bWJlcnx1bmRlZmluZWR9IHBhdXNlQmVmb3JlT3V0cHV0IFx0VGhlIHRpbWUgdG8gcGF1c2UgYmVmb3JlIHdyaXRpbmcgdGhlIG91dHB1dCBpbiBtaWxpc2Vjb25kc1xyXG5cdCAqIEByZXR1cm5zIHtVbml4VGVybWluYWxFbXVsYXRvcn0gXHRcdFx0XHRUaGUgY3VycmVudCBpbnN0YW5jZSBvZiBVbml4VGVybWluYWxFbXVsYXRvclxyXG5cdCAqL1xyXG5cdHB1YmxpYyBoaXN0b3J5ID0gKHdyaXRlU3BlZWQ6IFwibmV1dHJhbFwiIHwgbnVtYmVyID0gXCJuZXV0cmFsXCIsIHBhdXNlQmVmb3JlT3V0cHV0PzogbnVtYmVyKTogVW5peFRlcm1pbmFsRW11bGF0b3IgPT4ge1xyXG5cdFx0dGhpcy5ldmVudFF1ZXVlLnB1c2goe1xyXG5cdFx0XHRjb21tYW5kOiB7XHJcblx0XHRcdFx0dGV4dDogXCJoaXN0b3J5XCIsXHJcblx0XHRcdFx0d3JpdGVTcGVlZDogd3JpdGVTcGVlZCxcclxuXHRcdFx0XHRvdXRwdXQ6IHRoaXMuZ2V0SGlzdG9yeU91dHB1dCxcclxuXHRcdFx0XHRwYXVzZUJlZm9yZU91dHB1dDogcGF1c2VCZWZvcmVPdXRwdXRcclxuXHRcdFx0fSxcclxuXHRcdH0gYXMgVGVybWluYWxFdmVudClcclxuXHRcdHJldHVybiB0aGlzXHJcblx0fVxyXG5cdHByaXZhdGUgZ2V0SGlzdG9yeU91dHB1dCA9ICgpID0+IHtcclxuXHRcdHZhciBvdXRwdXQgPSBbXSBhcyBzdHJpbmdbXVxyXG5cdFx0dmFyIGogPSAwO1xyXG5cdFx0Zm9yICh2YXIgaSA9IHRoaXMuaGlzdG9yeVN0YWNrLmxlbmd0aDsgaSA+IDA7IGktLSkge1xyXG5cdFx0XHR2YXIgbmV3T3V0cHV0TGluZSA9IFwiXCJcclxuXHJcblx0XHRcdC8vIGxlYWRpbmcgc3BhY2VzIGFyZSBiYXNlZCBvbiBkZWNpbWFsc1xyXG5cdFx0XHQvLyBzaW5nbGUgZGVjaW1hbCA9IDQgc3BhY2VzXHJcblx0XHRcdC8vIGRvdWJsZSBkZWNpbWFsID0gMyBzcGFjZXNcclxuXHRcdFx0Ly8gZXRjLi4uXHJcblx0XHRcdGlmIChpIDwgMTApIHtcclxuXHRcdFx0XHRuZXdPdXRwdXRMaW5lICs9IFwiJm5ic3A7Jm5ic3A7Jm5ic3A7Jm5ic3A7XCJcclxuXHRcdFx0fSBlbHNlIGlmIChpIDwgMTAwKSB7XHJcblx0XHRcdFx0bmV3T3V0cHV0TGluZSArPSBcIiZuYnNwOyZuYnNwOyZuYnNwO1wiXHJcblx0XHRcdH0gZWxzZSBpZiAoaSA8IDEwMDApIHtcclxuXHRcdFx0XHRuZXdPdXRwdXRMaW5lICs9IFwiJm5ic3A7Jm5ic3A7XCJcclxuXHRcdFx0fSBlbHNlIGlmIChpIDwgMTAwMDApIHtcclxuXHRcdFx0XHRuZXdPdXRwdXRMaW5lICs9IFwiJm5ic3A7XCJcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bmV3T3V0cHV0TGluZSArPSBgJHtpfSZuYnNwOyZuYnNwOyR7dGhpcy5oaXN0b3J5U3RhY2tbaSAtIDFdLnRleHR9YFxyXG5cdFx0XHRvdXRwdXQucHVzaChuZXdPdXRwdXRMaW5lKVxyXG5cclxuXHRcdFx0aisrXHJcblx0XHRcdGlmIChqID49IHRoaXMuSElTVFNJWkUpIGJyZWFrXHJcblx0XHR9XHJcblx0XHRyZXR1cm4gb3V0cHV0LnJldmVyc2UoKS5qb2luKFwiPGJyIC8+XCIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRW11bGF0ZXMgdGhlIGNsZWFyIGNvbW1hbmQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0ge1wibmV1dHJhbFwifG51bWJlcn0gd3JpdGVTcGVlZCBcdFx0VGhlIHNwZWVkIGF0IHdoaWNoIHRvIHdyaXRlIGVhY2ggY2hhcmFjdGVyIG9mIHRoZSBjb21tYW5kXHJcblx0ICogQHBhcmFtIHtudW1iZXJ8dW5kZWZpbmVkfSBwYXVzZUJlZm9yZU91dHB1dCBcdFRoZSB0aW1lIHRvIHBhdXNlIGJlZm9yZSB3cml0aW5nIHRoZSBvdXRwdXQgaW4gbWlsaXNlY29uZHNcclxuXHQgKiBAcmV0dXJucyB7VW5peFRlcm1pbmFsRW11bGF0b3J9IFx0XHRcdFx0VGhlIGN1cnJlbnQgaW5zdGFuY2Ugb2YgVW5peFRlcm1pbmFsRW11bGF0b3JcclxuXHQgKi9cclxuXHRwdWJsaWMgY2xlYXIgPSAod3JpdGVTcGVlZDogXCJuZXV0cmFsXCIgfCBudW1iZXIgPSBcIm5ldXRyYWxcIiwgcGF1c2VCZWZvcmVPdXRwdXQ/OiBudW1iZXIpOiBVbml4VGVybWluYWxFbXVsYXRvciA9PiB7XHJcblx0XHR0aGlzLmV2ZW50UXVldWUucHVzaCh7XHJcblx0XHRcdGNvbW1hbmQ6IHtcclxuXHRcdFx0XHR0ZXh0OiBcImNsZWFyXCIsXHJcblx0XHRcdFx0d3JpdGVTcGVlZDogd3JpdGVTcGVlZCxcclxuXHRcdFx0XHRwYXVzZUJlZm9yZU91dHB1dDogcGF1c2VCZWZvcmVPdXRwdXRcclxuXHRcdFx0fSxcclxuXHRcdFx0bG9naWNBZnRlcjogKCkgPT4ge1xyXG5cdFx0XHRcdHRoaXMud3JhcHBlckVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIlxyXG5cdFx0XHRcdHRoaXMud3JpdGVOZXdJbnB1dExpbmVUb1N0ZG91dCgpXHJcblx0XHRcdFx0dGhpcy5hcHBlbmRDdXJzb3IoKVxyXG5cdFx0XHR9XHJcblx0XHR9IGFzIFRlcm1pbmFsRXZlbnQpXHJcblx0XHRyZXR1cm4gdGhpc1xyXG5cdH1cclxuXHRcclxuXHQvLyB0b2RvOiBpbXBsZW1lbnRcclxuXHRwdWJsaWMgbWtkaXIgPSAoZGlyTmFtZXM6IHN0cmluZywgd3JpdGVTcGVlZDogXCJuZXV0cmFsXCIgfCBudW1iZXIgPSBcIm5ldXRyYWxcIiwgcGF1c2VCZWZvcmVPdXRwdXQ/OiBudW1iZXIpID0+IHtcclxuXHRcdHRoaXMuZXZlbnRRdWV1ZS5wdXNoKHtcclxuXHRcdFx0Y29tbWFuZDoge1xyXG5cdFx0XHRcdHRleHQ6IFwibWtkaXIgXCIgKyBkaXJOYW1lcyxcclxuXHRcdFx0XHR3cml0ZVNwZWVkOiB3cml0ZVNwZWVkLFxyXG5cdFx0XHRcdG91dHB1dDogKCkgPT4ge1xyXG5cdFx0XHRcdFx0dmFyIG91dHB1dCA9IFwiXCJcclxuXHRcdFx0XHRcdHZhciBlcnJvcnMgPSB0aGlzLmZpbGVTeXN0ZW0ubWtkaXIoZGlyTmFtZXMpXHJcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGVycm9ycy5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0XHRvdXRwdXQgKz0gZXJyb3JzW2ldLm1lc3NhZ2VcclxuXHRcdFx0XHRcdFx0aWYgKGkgIT0gZXJyb3JzLmxlbmd0aCAtIDEpIHtcclxuXHRcdFx0XHRcdFx0XHRvdXRwdXQgPSBvdXRwdXQgKyBcIjxicj5cIlxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gb3V0cHV0XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRwYXVzZUJlZm9yZU91dHB1dDogcGF1c2VCZWZvcmVPdXRwdXRcclxuXHRcdFx0fVxyXG5cdFx0fSBhcyBUZXJtaW5hbEV2ZW50KVxyXG5cdFx0cmV0dXJuIHRoaXNcclxuXHR9XHJcblxyXG5cdC8vIHRvZG86IGFkZCBzdXBwb3J0IGZvciBwaXBlbGluZSBjb21tYW5kc1xyXG5cdC8vIC8vIHRvZG86IGltcGxlbWVudFxyXG5cdC8vIHB1YmxpYyB0b3VjaCA9IChmaWxlTmFtZTogc3RyaW5nKSA9PiB7XHJcblx0Ly8gXHRyZXR1cm4gdGhpc1xyXG5cdC8vIH1cclxuXHQvLyAvLyB0b2RvOiBpbXBsZW1lbnRcclxuXHQvLyBwdWJsaWMgcHdkID0gKCkgPT4ge31cclxuXHQvLyAvLyB0b2RvOiBpbXBsZW1lbnRcclxuXHQvLyBwdWJsaWMgdmltID0gKGZpbGVOYW1lOiBzdHJpbmcsIGZpbGVDb250ZW50VG9UeXBlOiBzdHJpbmdbXSkgPT4ge1xyXG5cdC8vIFx0cmV0dXJuIHRoaXNcclxuXHQvLyB9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEV4Y2VjdXRlcyB0aGUgY3JlYXRlZCBldmVudCBzZXF1ZW5jZVxyXG5cdCAqIEBwYXJhbSBjYWxsYmFjayBHZXRzIGNhbGxlZCB3aGVuIHRoZSBzZXF1ZW5jZSBoYXMgZmluaXNoZWRcclxuXHQgKi9cclxuXHRwdWJsaWMgcnVuID0gKGNhbGxiYWNrPzogKCkgPT4gdm9pZCkgPT4ge1xyXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGV2ZW50cyBsZWZ0IGluIHRoZSBxdWV1ZSwgY29udGludWUgcnVubmluZy5cclxuXHRcdHRoaXMuY3VycmVudEV2ZW50ID0gdGhpcy5ldmVudFF1ZXVlLnNoaWZ0KClcclxuXHRcdGlmICh0aGlzLmN1cnJlbnRFdmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdGlmICh0aGlzLmN1cnJlbnRFdmVudC5jb21tYW5kICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHQvLyBBZGQgY29tbWFuZCB0byBoaXN0b3J5IHN0YWNrLCB0aGVuIHN0YXJ0IHdyaXRpbmcgdGhlIGNvbW1hbmQgdGV4dCB0byB0aGUgc3Rkb3V0XHJcblx0XHRcdFx0dGhpcy5oaXN0b3J5U3RhY2sucHVzaCh0aGlzLmN1cnJlbnRFdmVudC5jb21tYW5kKVxyXG5cdFx0XHRcdHRoaXMud3JpdGVUb1N0ZG91dCh0aGlzLmN1cnJlbnRFdmVudC5jb21tYW5kLnRleHQsIHRoaXMuY3VycmVudEV2ZW50LmNvbW1hbmQud3JpdGVTcGVlZCwgKCkgPT4ge1xyXG5cdFx0XHRcdFx0Ly8gQWZ0ZXIgY29tbWFuZCB0ZXh0IHdhcyB3cml0dGVuLCBjaGVjayBpZiB0aGUgY29tbWFuZCBoYXMgYW4gb3V0cHV0Li4uXHJcblx0XHRcdFx0XHRpZiAodGhpcy5jdXJyZW50RXZlbnQhLmNvbW1hbmQhLm91dHB1dCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRcdHZhciBuZXdPdXRwdXQgPSBcIlwiXHJcblx0XHRcdFx0XHRcdGlmICh0eXBlb2YgdGhpcy5jdXJyZW50RXZlbnQhLmNvbW1hbmQhLm91dHB1dCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3T3V0cHV0ID0gdGhpcy5jdXJyZW50RXZlbnQhLmNvbW1hbmQhLm91dHB1dCgpXHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0bmV3T3V0cHV0ID0gdGhpcy5jdXJyZW50RXZlbnQhLmNvbW1hbmQhLm91dHB1dFxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMucmVtb3ZlQ3Vyc29yKClcclxuXHRcdFx0XHRcdFx0XHR0aGlzLndyaXRlTGluZUJyZWFrVG9TdGRvdXQoKVxyXG5cdFx0XHRcdFx0XHRcdHRoaXMud3JpdGVUb1N0ZG91dChuZXdPdXRwdXQsIDAsICgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIEFmdGVyIGNvbW1hbmQgb3V0cHV0IHdhcyB3cml0dGVuLi4uXHJcblx0XHRcdFx0XHRcdFx0XHR0aGlzLndyaXRlTGluZUJyZWFrVG9TdGRvdXQoKVxyXG5cdFx0XHRcdFx0XHRcdFx0dGhpcy53cml0ZU5ld0lucHV0TGluZVRvU3Rkb3V0KClcclxuXHRcdFx0XHRcdFx0XHRcdGlmICh0aGlzLmN1cnJlbnRFdmVudCEubG9naWNBZnRlciAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRcdHRoaXMuY3VycmVudEV2ZW50IS5sb2dpY0FmdGVyKClcclxuXHRcdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXBwZW5kQ3Vyc29yKClcclxuXHRcdFx0XHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGlzLnJ1bihjYWxsYmFjaylcclxuXHRcdFx0XHRcdFx0XHRcdH0sIHRoaXMuY3VycmVudEV2ZW50IS5kZWxheUFmdGVyKVxyXG5cdFx0XHRcdFx0XHRcdH0pXHJcblx0XHRcdFx0XHRcdH0sIHRoaXMuY3VycmVudEV2ZW50IS5jb21tYW5kIS5wYXVzZUJlZm9yZU91dHB1dClcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRoaXMucmVtb3ZlQ3Vyc29yKClcclxuXHRcdFx0XHRcdFx0dGhpcy53cml0ZUxpbmVCcmVha1RvU3Rkb3V0KClcclxuXHRcdFx0XHRcdFx0dGhpcy53cml0ZU5ld0lucHV0TGluZVRvU3Rkb3V0KClcclxuXHRcdFx0XHRcdFx0dGhpcy5hcHBlbmRDdXJzb3IoKVxyXG5cdFx0XHRcdFx0XHRpZiAodGhpcy5jdXJyZW50RXZlbnQhLmxvZ2ljQWZ0ZXIgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMuY3VycmVudEV2ZW50IS5sb2dpY0FmdGVyKClcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnJ1bihjYWxsYmFjaylcclxuXHRcdFx0XHRcdFx0fSwgdGhpcy5jdXJyZW50RXZlbnQhLmRlbGF5QWZ0ZXIpXHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSlcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBJZiB0aGUgY3VycmVudCBldmVudHMgY29tbWFuZCBpcyB1bmRlZmluZWQsIGNvbnRpbnVlIHJ1bm5pbmcuLi5cclxuXHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdHRoaXMucnVuKGNhbGxiYWNrKVxyXG5cdFx0XHRcdH0sIHRoaXMuY3VycmVudEV2ZW50IS5kZWxheUFmdGVyKVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBJZiBubyBldmVudCBpcyBsZWZ0IGluIHRoZSBxdWV1ZSwgcnVuIGNhbGJhY2suLi5cclxuXHRcdFx0aWYgKGNhbGxiYWNrICE9PSB1bmRlZmluZWQpIHtcclxuXHRcdFx0XHRjYWxsYmFjaygpXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlbW92ZXMgdGhlIGN1cnNvciBmcm9tIHRoZSB3cmFwcGVyIGRvY3VtZW50XHJcblx0ICovXHJcblx0cHJpdmF0ZSByZW1vdmVDdXJzb3IgPSAoKSA9PiB7XHJcblx0XHR0aGlzLmN1cnNvckVsZW1lbnQucmVtb3ZlKClcclxuXHR9XHJcblx0LyoqXHJcblx0ICogQXBwZW5kcyB0aGUgY3Vyc29yIGVsZW1lbnQgdG8gdGhlIHdyYXBwZXIgZWxlbWVudFxyXG5cdCAqL1xyXG5cdHByaXZhdGUgYXBwZW5kQ3Vyc29yID0gKCkgPT4ge1xyXG5cdFx0dGhpcy53cmFwcGVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmN1cnNvckVsZW1lbnQpXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIGEgcmFuZG9tIGludGVnZXIgaW4gdGhlIHJhbmdlIGZyb20gbWluIHRvIG1heCwgaW5jbHVzaWZcclxuXHQgKiBAcGFyYW0ge051bWJlcn0gbWluIE1pbmltdW0gbnVtYmVyIHRvIGdlbmVyYXRlXHJcblx0ICogQHBhcmFtIHtOdW1iZXJ9IG1heCBNYXhpbXVtIG51bWJlciB0byBnZW5lcmF0ZVxyXG5cdCAqIEByZXR1cm5zIHJhbmRvbSBpbnRlZ2VyIGluIHRoZSByYW5nZSBmcm9tIG1pbiB0byBtYXgsIGluY2x1c2lmXHJcblx0ICovXHJcblx0cHJpdmF0ZSBnZXRSYW5kb21JbnRlZ2VySW5SYW5nZSA9IChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpID0+IHtcclxuXHRcdHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkgKyBtaW4pXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBVc2VzOiAgXHJcblx0ICogYGBgdGhpcy53cml0ZUVudmlyb21lbnRMaW5lVG9TdGRvdXRgYGAgYW5kIGBgYHRoaXMud3JpdGVJbnB1dExpbmVTdGFydFRvU3Rkb3V0YGBgXHJcblx0ICogXHJcblx0ICogVG8gd3JpdGUgYSBjb21wbGV0ZSBuZXcgZW1wdHkgaW5wdXQgbGluZSB0byBzdGRvdXRcclxuXHQgKi9cclxuXHRwcml2YXRlIHdyaXRlTmV3SW5wdXRMaW5lVG9TdGRvdXQgPSAoKSA9PiB7XHJcblx0XHR0aGlzLndyaXRlRW52aXJvbWVudExpbmVUb1N0ZG91dCgpXHJcblx0XHR0aGlzLndyaXRlSW5wdXRMaW5lU3RhcnRUb1N0ZG91dCgpXHJcblx0fVxyXG5cdC8qKlxyXG5cdCAqIElmIHRoaXMuZW52aXJvbWVudCBpcyBub3QgdW5kZWZpbmVkLCB3cml0ZSB0aGUgZW52aXJvbWVudCBsaW5lIChcInVzZXJuYW1lQGhvc3RuYW1lOlwiKSB0byB0aGUgc3Rkb3V0XHJcblx0ICovXHJcblx0cHJpdmF0ZSB3cml0ZUVudmlyb21lbnRMaW5lVG9TdGRvdXQgPSAoKSA9PiB7XHJcblx0XHRpZiAodGhpcy5vcHRpb25zLmVudmlyb21lbnQgIT09IHVuZGVmaW5lZCAmJiB0aGlzLm9wdGlvbnMuZW52aXJvbWVudC5ob3N0bmFtZS5sZW5ndGggPiAwICYmIHRoaXMub3B0aW9ucy5lbnZpcm9tZW50LnVzZXJuYW1lLmxlbmd0aCA+IDApIHtcclxuXHRcdFx0dGhpcy53cmFwcGVyRWxlbWVudC5pbm5lckhUTUwgKz0gdGhpcy5vcHRpb25zLmVudmlyb21lbnQudXNlcm5hbWUgKyBcIkBcIiArIHRoaXMub3B0aW9ucy5lbnZpcm9tZW50Lmhvc3RuYW1lICsgXCI6XCJcclxuXHRcdH1cclxuXHR9XHJcblx0LyoqXHJcblx0ICogV3JpdGVzIFwiJCBcIiB0byB0aGUgc3Rkb3V0XHJcblx0ICovXHJcblx0cHJpdmF0ZSB3cml0ZUlucHV0TGluZVN0YXJ0VG9TdGRvdXQgPSAoKSA9PiB7XHJcblx0XHR0aGlzLndyYXBwZXJFbGVtZW50LmlubmVySFRNTCArPSBcIiQgXCJcclxuXHR9XHJcblx0LyoqXHJcblx0ICogV3JpdGVzIFwiXFxuXCIgKFxcPGJyIC8+KSB0byB0aGUgc3Rkb3V0XHJcblx0ICovXHJcblx0cHJpdmF0ZSB3cml0ZUxpbmVCcmVha1RvU3Rkb3V0ID0gKCkgPT4ge1xyXG5cdFx0dGhpcy53cmFwcGVyRWxlbWVudC5pbm5lckhUTUwgKz0gXCI8YnIgLz5cIlxyXG5cdH1cclxuXHQvKipcclxuXHQgKiBXcml0ZXMgdGhlIHNwZWNpZmllZCB0ZXh0IHRvIHRoZSB0ZXJtaW5hbCB3cmFwcGVyLlxyXG5cdCAqXHJcblx0ICogSWYgc3BlZWQgPT09IDAsIGl0IHdpbGwgcmVtb3ZlIHRoZSBjdXJzb3IgZnJvbSB0aGUgd3JhcHBlci5cclxuXHQgKiBJZiBzcGVlZCA+IDAsIHRoZSBjdXJzb3Igd2lsbCByZW1vdmUgYmVmb3JlIGFuZCBhcHBlbmRlZCBhZnRlciBldmVyeSBjaGFyYWN0ZXIuXHJcblx0ICogQHBhcmFtIHRleHQgdGV4dCB0byB3cml0ZSB0byBzdGRvdXRcclxuXHQgKiBAcGFyYW0gc3BlZWQgc3BlZWQgYXQgd2hpY2ggZWFjaCBjaGFyYWN0ZXIgaXMgd3JpdHRlbiB0byBzdGRvdXRcclxuXHQgKiBAcGFyYW0gY2FsbGJhY2sgZ2V0cyBleGNlY3V0ZWQgd2hlbiB3cml0aW5nIHRvIHN0ZG91dCBoYXMgZmluaXNoZWRcclxuXHQgKiBAcGFyYW0gaSB1c2VkIGZvciByZWN1cnNpb24gcHVycG9zZXNcclxuXHQgKi9cclxuXHRwcml2YXRlIHdyaXRlVG9TdGRvdXQgPSAodGV4dDogc3RyaW5nLCBzcGVlZDogXCJuZXV0cmFsXCIgfCBudW1iZXIsIGNhbGxiYWNrOiAoKSA9PiB2b2lkLCBpOiBudW1iZXIgPSAwKSA9PiB7XHJcblx0XHRpZiAoc3BlZWQgPT09IDApIHtcclxuXHRcdFx0dGhpcy5yZW1vdmVDdXJzb3IoKVxyXG5cdFx0XHR0aGlzLndyYXBwZXJFbGVtZW50LmlubmVySFRNTCArPSB0ZXh0XHJcblx0XHRcdGNhbGxiYWNrKClcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmIChpIDwgdGV4dC5sZW5ndGgpIHtcclxuXHRcdFx0XHR0aGlzLnJlbW92ZUN1cnNvcigpXHJcblx0XHRcdFx0dGhpcy53cmFwcGVyRWxlbWVudC5pbm5lckhUTUwgKz0gdGV4dFtpXVxyXG5cdFx0XHRcdHRoaXMuYXBwZW5kQ3Vyc29yKClcclxuXHRcdFx0XHRpKytcclxuXHRcdFx0XHRpZiAoc3BlZWQgPT09IFwibmV1dHJhbFwiKSB7XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHRoaXMud3JpdGVUb1N0ZG91dCh0ZXh0LCBzcGVlZCwgY2FsbGJhY2ssIGkpLCB0aGlzLmdldFJhbmRvbUludGVnZXJJblJhbmdlKDgwLCAxMjApKVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHRoaXMud3JpdGVUb1N0ZG91dCh0ZXh0LCBzcGVlZCwgY2FsbGJhY2ssIGkpLCBzcGVlZClcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2FsbGJhY2soKVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVbml4VGVybWluYWxFbXVsYXRvclxyXG4iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsImlkIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwibGliIiwiR3JhcGgiLCJqc29uIiwiYWxnIiwidmVyc2lvbiIsIl8iLCJnIiwiY21wdCIsInZpc2l0ZWQiLCJjbXB0cyIsImRmcyIsInYiLCJoYXMiLCJlYWNoIiwic3VjY2Vzc29ycyIsInByZWRlY2Vzc29ycyIsIm5vZGVzIiwiZG9EZnMiLCJwb3N0b3JkZXIiLCJuYXZpZ2F0aW9uIiwiYWNjIiwidyIsInZzIiwib3JkZXIiLCJpc0FycmF5IiwiaXNEaXJlY3RlZCIsIm5laWdoYm9ycyIsImJpbmQiLCJoYXNOb2RlIiwiRXJyb3IiLCJkaWprc3RyYSIsIndlaWdodEZ1bmMiLCJlZGdlRnVuYyIsInRyYW5zZm9ybSIsIlByaW9yaXR5UXVldWUiLCJ3ZWlnaHRGbiIsImVkZ2VGbiIsInZFbnRyeSIsInJlc3VsdHMiLCJwcSIsInVwZGF0ZU5laWdoYm9ycyIsImVkZ2UiLCJ3RW50cnkiLCJ3ZWlnaHQiLCJkaXN0YW5jZSIsInByZWRlY2Vzc29yIiwiZGVjcmVhc2UiLCJmb3JFYWNoIiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJhZGQiLCJzaXplIiwicmVtb3ZlTWluIiwicnVuRGlqa3N0cmEiLCJTdHJpbmciLCJERUZBVUxUX1dFSUdIVF9GVU5DIiwib3V0RWRnZXMiLCJjb25zdGFudCIsInRhcmphbiIsImZpbHRlciIsImhhc0VkZ2UiLCJkIiwicm93SyIsInJvd0kiLCJqIiwiaWsiLCJraiIsImlqIiwiYWx0RGlzdGFuY2UiLCJydW5GbG95ZFdhcnNoYWxsIiwiY29tcG9uZW50cyIsImRpamtzdHJhQWxsIiwiZmluZEN5Y2xlcyIsImZsb3lkV2Fyc2hhbGwiLCJpc0FjeWNsaWMiLCJwcmVvcmRlciIsInByaW0iLCJ0b3Bzb3J0IiwiZSIsIkN5Y2xlRXhjZXB0aW9uIiwicmVzdWx0IiwicGFyZW50cyIsInByaSIsInByaW9yaXR5IiwiZWRnZVdlaWdodCIsIm5vZGVDb3VudCIsInNldE5vZGUiLCJpbml0Iiwic2V0RWRnZSIsIm5vZGVFZGdlcyIsImluZGV4Iiwic3RhY2siLCJlbnRyeSIsIm9uU3RhY2siLCJsb3dsaW5rIiwiTWF0aCIsIm1pbiIsInBvcCIsInNpbmtzIiwidmlzaXQiLCJub2RlIiwicHJvdG90eXBlIiwiX2FyciIsIl9rZXlJbmRpY2VzIiwia2V5cyIsIngiLCJrZXkiLCJrZXlJbmRpY2VzIiwiYXJyIiwiX2RlY3JlYXNlIiwiX3N3YXAiLCJfaGVhcGlmeSIsImwiLCJyIiwibGFyZ2VzdCIsInBhcmVudCIsIm9yaWdBcnJJIiwib3JpZ0FyckoiLCJHUkFQSF9OT0RFIiwib3B0cyIsIl9pc0RpcmVjdGVkIiwiZGlyZWN0ZWQiLCJfaXNNdWx0aWdyYXBoIiwibXVsdGlncmFwaCIsIl9pc0NvbXBvdW5kIiwiY29tcG91bmQiLCJfbGFiZWwiLCJfZGVmYXVsdE5vZGVMYWJlbEZuIiwiX2RlZmF1bHRFZGdlTGFiZWxGbiIsIl9ub2RlcyIsIl9wYXJlbnQiLCJfY2hpbGRyZW4iLCJfaW4iLCJfcHJlZHMiLCJfb3V0IiwiX3N1Y3MiLCJfZWRnZU9ianMiLCJfZWRnZUxhYmVscyIsImluY3JlbWVudE9ySW5pdEVudHJ5IiwiZGVjcmVtZW50T3JSZW1vdmVFbnRyeSIsImVkZ2VBcmdzVG9JZCIsInZfIiwid18iLCJuYW1lIiwidG1wIiwiaXNVbmRlZmluZWQiLCJlZGdlQXJnc1RvT2JqIiwiZWRnZU9iaiIsImVkZ2VPYmpUb0lkIiwiX25vZGVDb3VudCIsIl9lZGdlQ291bnQiLCJpc011bHRpZ3JhcGgiLCJpc0NvbXBvdW5kIiwic2V0R3JhcGgiLCJsYWJlbCIsImdyYXBoIiwic2V0RGVmYXVsdE5vZGVMYWJlbCIsIm5ld0RlZmF1bHQiLCJpc0Z1bmN0aW9uIiwiaXNFbXB0eSIsInNldE5vZGVzIiwidmFsdWUiLCJhcmdzIiwiYXJndW1lbnRzIiwicmVtb3ZlTm9kZSIsInJlbW92ZUVkZ2UiLCJfcmVtb3ZlRnJvbVBhcmVudHNDaGlsZExpc3QiLCJjaGlsZHJlbiIsImNoaWxkIiwic2V0UGFyZW50IiwiYW5jZXN0b3IiLCJwcmVkc1YiLCJzdWNzViIsInByZWRzIiwidW5pb24iLCJpc0xlYWYiLCJmaWx0ZXJOb2RlcyIsImNvcHkiLCJjb25zdHJ1Y3RvciIsImZpbmRQYXJlbnQiLCJzZXREZWZhdWx0RWRnZUxhYmVsIiwiZWRnZUNvdW50IiwiZWRnZXMiLCJ2YWx1ZXMiLCJzZXRQYXRoIiwicmVkdWNlIiwidmFsdWVTcGVjaWZpZWQiLCJhcmcwIiwiT2JqZWN0IiwiZnJlZXplIiwiaW5FZGdlcyIsInUiLCJpblYiLCJvdXRWIiwid3JpdGVOb2RlcyIsIm5vZGVWYWx1ZSIsIndyaXRlRWRnZXMiLCJlZGdlVmFsdWUiLCJ3cml0ZSIsIm9wdGlvbnMiLCJjbG9uZSIsInJlYWQiLCJsb2Rhc2giLCJ3aW5kb3ciLCJEYXRhVmlldyIsImdldE5hdGl2ZSIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwiZW50cmllcyIsImNsZWFyIiwic2V0IiwiZ2V0IiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJNYXAiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJNYXBDYWNoZSIsIlByb21pc2UiLCJTZXQiLCJzZXRDYWNoZUFkZCIsInNldENhY2hlSGFzIiwiU2V0Q2FjaGUiLCJfX2RhdGFfXyIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJzdGFja1NldCIsIlN0YWNrIiwiU3ltYm9sIiwiVWludDhBcnJheSIsIldlYWtNYXAiLCJmdW5jIiwidGhpc0FyZyIsImNhbGwiLCJhcHBseSIsImFycmF5IiwiaXRlcmF0ZWUiLCJwcmVkaWNhdGUiLCJyZXNJbmRleCIsImJhc2VJbmRleE9mIiwiY29tcGFyYXRvciIsImJhc2VUaW1lcyIsImlzQXJndW1lbnRzIiwiaXNCdWZmZXIiLCJpc0luZGV4IiwiaXNUeXBlZEFycmF5IiwiaGFzT3duUHJvcGVydHkiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJBcnJheSIsIm9mZnNldCIsImFjY3VtdWxhdG9yIiwiaW5pdEFjY3VtIiwiYXNjaWlTaXplIiwiYmFzZVByb3BlcnR5IiwiYmFzZUFzc2lnblZhbHVlIiwiZXEiLCJvYmplY3QiLCJvYmpWYWx1ZSIsImNvcHlPYmplY3QiLCJrZXlzSW4iLCJkZWZpbmVQcm9wZXJ0eSIsImFycmF5RWFjaCIsImFzc2lnblZhbHVlIiwiYmFzZUFzc2lnbiIsImJhc2VBc3NpZ25JbiIsImNsb25lQnVmZmVyIiwiY29weUFycmF5IiwiY29weVN5bWJvbHMiLCJjb3B5U3ltYm9sc0luIiwiZ2V0QWxsS2V5cyIsImdldEFsbEtleXNJbiIsImdldFRhZyIsImluaXRDbG9uZUFycmF5IiwiaW5pdENsb25lQnlUYWciLCJpbml0Q2xvbmVPYmplY3QiLCJpc01hcCIsImlzT2JqZWN0IiwiaXNTZXQiLCJhcmdzVGFnIiwiZnVuY1RhZyIsIm9iamVjdFRhZyIsImNsb25lYWJsZVRhZ3MiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsInRhZyIsImlzRnVuYyIsInN0YWNrZWQiLCJzdWJWYWx1ZSIsInByb3BzIiwib2JqZWN0Q3JlYXRlIiwiY3JlYXRlIiwiYmFzZUNyZWF0ZSIsInByb3RvIiwiYmFzZUZvck93biIsImJhc2VFYWNoIiwiY3JlYXRlQmFzZUVhY2giLCJjb2xsZWN0aW9uIiwiZnJvbUluZGV4IiwiZnJvbVJpZ2h0IiwiYXJyYXlQdXNoIiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGbGF0dGVuIiwiZGVwdGgiLCJpc1N0cmljdCIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiY2FzdFBhdGgiLCJ0b0tleSIsInBhdGgiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwiYmFzZUZpbmRJbmRleCIsImJhc2VJc05hTiIsInN0cmljdEluZGV4T2YiLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwiYmFzZUlzRXF1YWxEZWVwIiwiYmFzZUlzRXF1YWwiLCJvdGhlciIsImVxdWFsQXJyYXlzIiwiZXF1YWxCeVRhZyIsImVxdWFsT2JqZWN0cyIsImFycmF5VGFnIiwiZXF1YWxGdW5jIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJtYXRjaERhdGEiLCJub0N1c3RvbWl6ZXIiLCJzcmNWYWx1ZSIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiaXNNYXNrZWQiLCJ0b1NvdXJjZSIsInJlSXNIb3N0Q3RvciIsImZ1bmNQcm90byIsIkZ1bmN0aW9uIiwib2JqZWN0UHJvdG8iLCJmdW5jVG9TdHJpbmciLCJyZUlzTmF0aXZlIiwiUmVnRXhwIiwicmVwbGFjZSIsInRlc3QiLCJpc0xlbmd0aCIsInR5cGVkQXJyYXlUYWdzIiwiYmFzZU1hdGNoZXMiLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiaWRlbnRpdHkiLCJwcm9wZXJ0eSIsImlzUHJvdG90eXBlIiwibmF0aXZlS2V5cyIsIm5hdGl2ZUtleXNJbiIsImlzUHJvdG8iLCJpc0FycmF5TGlrZSIsImJhc2VJc01hdGNoIiwiZ2V0TWF0Y2hEYXRhIiwibWF0Y2hlc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImlzS2V5IiwiaXNTdHJpY3RDb21wYXJhYmxlIiwiYmFzZUdldCIsImVhY2hGdW5jIiwib3ZlclJlc3QiLCJzZXRUb1N0cmluZyIsInN0YXJ0IiwiYmFzZVNldFRvU3RyaW5nIiwic3RyaW5nIiwibiIsImFycmF5TWFwIiwiaXNTeW1ib2wiLCJzeW1ib2xQcm90byIsInN5bWJvbFRvU3RyaW5nIiwiYmFzZVRvU3RyaW5nIiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5jbHVkZXNXaXRoIiwiY2FjaGVIYXMiLCJjcmVhdGVTZXQiLCJzZXRUb0FycmF5IiwiaW5jbHVkZXMiLCJpc0NvbW1vbiIsInNlZW4iLCJvdXRlciIsImNvbXB1dGVkIiwic2VlbkluZGV4IiwiY2FjaGUiLCJzdHJpbmdUb1BhdGgiLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsIkJ1ZmZlciIsImFsbG9jVW5zYWZlIiwiYnVmZmVyIiwic2xpY2UiLCJjbG9uZUFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJieXRlT2Zmc2V0IiwicmVGbGFncyIsInJlZ2V4cCIsImV4ZWMiLCJsYXN0SW5kZXgiLCJzeW1ib2xWYWx1ZU9mIiwidmFsdWVPZiIsInN5bWJvbCIsInR5cGVkQXJyYXkiLCJpc05ldyIsIm5ld1ZhbHVlIiwiZ2V0U3ltYm9scyIsImdldFN5bWJvbHNJbiIsImNvcmVKc0RhdGEiLCJpdGVyYWJsZSIsIm5vb3AiLCJhcnJheVNvbWUiLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJhcnJTdGFja2VkIiwib3RoU3RhY2tlZCIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4IiwibWFwVG9BcnJheSIsIm1lc3NhZ2UiLCJjb252ZXJ0Iiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJvYmpTdGFja2VkIiwic2tpcEN0b3IiLCJvYmpDdG9yIiwib3RoQ3RvciIsImZyZWVHbG9iYWwiLCJiYXNlR2V0QWxsS2V5cyIsImlzS2V5YWJsZSIsImJhc2VJc05hdGl2ZSIsImdldFZhbHVlIiwiZ2V0UHJvdG90eXBlIiwib3ZlckFyZyIsImdldFByb3RvdHlwZU9mIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwiYXJyYXlGaWx0ZXIiLCJzdHViQXJyYXkiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJtYXBUYWciLCJwcm9taXNlVGFnIiwic2V0VGFnIiwid2Vha01hcFRhZyIsImRhdGFWaWV3VGFnIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwiQ3RvciIsImN0b3JTdHJpbmciLCJoYXNGdW5jIiwicmVIYXNVbmljb2RlIiwibmF0aXZlQ3JlYXRlIiwiaW5wdXQiLCJjbG9uZURhdGFWaWV3IiwiY2xvbmVSZWdFeHAiLCJjbG9uZVN5bWJvbCIsImNsb25lVHlwZWRBcnJheSIsInNwcmVhZGFibGVTeW1ib2wiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJyZUlzVWludCIsInR5cGUiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwidWlkIiwibWFza1NyY0tleSIsIklFX1BST1RPIiwiYXNzb2NJbmRleE9mIiwic3BsaWNlIiwiZ2V0TWFwRGF0YSIsIm1lbW9pemUiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwicmVxdWlyZSIsImJpbmRpbmciLCJhcmciLCJuYXRpdmVNYXgiLCJtYXgiLCJvdGhlckFyZ3MiLCJmcmVlU2VsZiIsInNob3J0T3V0IiwibmF0aXZlTm93IiwiRGF0ZSIsIm5vdyIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiaGFzVW5pY29kZSIsInVuaWNvZGVTaXplIiwibWVtb2l6ZUNhcHBlZCIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJjaGFyQ29kZUF0IiwibWF0Y2giLCJudW1iZXIiLCJxdW90ZSIsInN1YlN0cmluZyIsInJzQXN0cmFsIiwicnNDb21ibyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyZU9wdE1vZCIsInJzT3B0VmFyIiwicnNTZXEiLCJyc1N5bWJvbCIsInJlVW5pY29kZSIsImJhc2VGaWx0ZXIiLCJiYXNlSXRlcmF0ZWUiLCJjYXN0RnVuY3Rpb24iLCJkZWZhdWx0VmFsdWUiLCJiYXNlSGFzIiwiaGFzUGF0aCIsImJhc2VIYXNJbiIsImJhc2VJc0FyZ3VtZW50cyIsInN0dWJGYWxzZSIsImJhc2VLZXlzIiwiYmFzZUlzTWFwIiwiYmFzZVVuYXJ5Iiwibm9kZUlzTWFwIiwiYmFzZUlzU2V0Iiwibm9kZUlzU2V0IiwiYmFzZUlzVHlwZWRBcnJheSIsIm5vZGVJc1R5cGVkQXJyYXkiLCJhcnJheUxpa2VLZXlzIiwiYmFzZUtleXNJbiIsImJhc2VNYXAiLCJyZXNvbHZlciIsIlR5cGVFcnJvciIsIm1lbW9pemVkIiwiQ2FjaGUiLCJiYXNlUHJvcGVydHlEZWVwIiwiYXJyYXlSZWR1Y2UiLCJiYXNlUmVkdWNlIiwiaXNTdHJpbmciLCJzdHJpbmdTaXplIiwiaXNBcnJMaWtlIiwiYmFzZVJlc3QiLCJiYXNlVW5pcSIsImlzQXJyYXlMaWtlT2JqZWN0IiwiYXJyYXlzIiwiYmFzZVZhbHVlcyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4IiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJsb2FkZWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImEiLCJkZWZpbml0aW9uIiwibyIsImVudW1lcmFibGUiLCJnbG9iYWxUaGlzIiwicHJvcCIsIm5tZCIsInBhdGhzIiwibmMiLCJFeHQ0IiwicHJvaGliaXRlZEZpbGVOYW1lQ2hhcmVjdGVycyIsIlVuaXhGaWxlU3lzdGVtRW11bGF0b3IiLCJ1c2VyIiwicm9vdERpciIsInBhc3N3b3JkIiwiaG9tZURpciIsImN1cnJlbnREaXIiLCJzdGFydHNXaXRoIiwiY3VycmVudFVzZXIiLCJkaXJOYW1lcyIsImVycm9ycyIsImRpcnMiLCJzcGxpdCIsInMiLCJkaXJOYW1lIiwicmVwbGFjZVJlcGV0ZXRpdmVGb3J3YXJkc2xhc2hlcyIsImRpclNwbGl0IiwicmVzb2x2ZVJlbGF0aXZlRGlyU3RyaW5nIiwiZW5kc1dpdGgiLCJuZXdEaXIiLCJSYW5nZUVycm9yIiwidXNlcnMiLCJzb21lIiwibmV3VXNlckRpciIsImRpciIsImRpckV4aXN0cyIsImxhc3RJbmRleE9mIiwib3V0cHV0IiwiYWRkdXNlciIsInJvb3RVc3IiLCJmaWxlU3lzdGVtVHlwZSIsIlVuaXhUZXJtaW5hbEVtdWxhdG9yIiwid3JhcHBlcklkIiwid3JhcHBlckNsYXNzTmFtZSIsImN1cnNvciIsImN1cnNvcklkIiwiY3Vyc29yQ2xhc3NOYW1lIiwiY3Vyc29yQW5pbWF0aW9uIiwiZW52aXJvbWVudCIsImNvbW1hbmQiLCJldmVudFF1ZXVlIiwiZGVsYXlBZnRlciIsImNvbW1hbmRzIiwiYyIsIm1zIiwidGV4dCIsIndyaXRlU3BlZWQiLCJwYXVzZUJlZm9yZU91dHB1dCIsImdldEhpc3RvcnlPdXRwdXQiLCJoaXN0b3J5U3RhY2siLCJuZXdPdXRwdXRMaW5lIiwiSElTVFNJWkUiLCJyZXZlcnNlIiwibG9naWNBZnRlciIsIndyYXBwZXJFbGVtZW50IiwiaW5uZXJIVE1MIiwid3JpdGVOZXdJbnB1dExpbmVUb1N0ZG91dCIsImFwcGVuZEN1cnNvciIsImZpbGVTeXN0ZW0iLCJta2RpciIsImNhbGxiYWNrIiwiY3VycmVudEV2ZW50Iiwic2hpZnQiLCJ3cml0ZVRvU3Rkb3V0IiwibmV3T3V0cHV0Iiwic2V0VGltZW91dCIsInJlbW92ZUN1cnNvciIsIndyaXRlTGluZUJyZWFrVG9TdGRvdXQiLCJydW4iLCJjdXJzb3JFbGVtZW50IiwiZmxvb3IiLCJyYW5kb20iLCJ3cml0ZUVudmlyb21lbnRMaW5lVG9TdGRvdXQiLCJ3cml0ZUlucHV0TGluZVN0YXJ0VG9TdGRvdXQiLCJob3N0bmFtZSIsInVzZXJuYW1lIiwic3BlZWQiLCJnZXRSYW5kb21JbnRlZ2VySW5SYW5nZSIsIndyYXBwZXIiLCJnZXRFbGVtZW50QnlJZCIsImNsYXNzTGlzdCIsImJvZHkiLCJpbm5lclRleHQiXSwic291cmNlUm9vdCI6IiJ9