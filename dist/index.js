!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.UnixTerminalEmulator=e():t.UnixTerminalEmulator=e()}(self,(()=>(()=>{"use strict";var t={28:(t,e,r)=>{r.d(e,{Z:()=>s});var n=r(537),o=r.n(n),i=r(645),a=r.n(i)()(o());a.push([t.id,"@keyframes terminal___cursor___fluid {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___fluid {\r\n\tanimation: terminal___cursor___fluid 1s infinite;\r\n}\r\n\r\n@keyframes terminal___cursor___static {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t39% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t40% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t59% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t60% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___static {\r\n\tanimation: terminal___cursor___static 1s infinite;\r\n}\r\n\r\n.terminal___cursor___none {\r\n\tanimation: none;\r\n}\r\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;CACC;EACC,aAAa;CACd;CACA;EACC,WAAW;CACZ;CACA;EACC,aAAa;CACd;AACD;AACA;CACC,gDAAgD;AACjD;;AAEA;CACC;EACC,aAAa;CACd;CACA;EACC,aAAa;CACd;CACA;EACC,WAAW;CACZ;CACA;EACC,WAAW;CACZ;CACA;EACC,aAAa;CACd;CACA;EACC,aAAa;CACd;AACD;AACA;CACC,iDAAiD;AAClD;;AAEA;CACC,eAAe;AAChB",sourcesContent:["@keyframes terminal___cursor___fluid {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___fluid {\r\n\tanimation: terminal___cursor___fluid 1s infinite;\r\n}\r\n\r\n@keyframes terminal___cursor___static {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t39% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t40% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t59% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t60% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___static {\r\n\tanimation: terminal___cursor___static 1s infinite;\r\n}\r\n\r\n.terminal___cursor___none {\r\n\tanimation: none;\r\n}\r\n"],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var s=0;s<this.length;s++){var u=this[s][0];null!=u&&(a[u]=!0)}for(var c=0;c<t.length;c++){var p=[].concat(t[c]);n&&a[p[0]]||(void 0!==i&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=i),r&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=r):p[2]=r),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),e.push(p))}},e}},537:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */"),a=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var i={},a=[],s=0;s<t.length;s++){var u=t[s],c=n.base?u[0]+n.base:u[0],p=i[c]||0,l="".concat(c," ").concat(p);i[c]=p+1;var d=r(l),m={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==d)e[d].references++,e[d].updater(m);else{var f=o(m,n);n.byIndex=s,e.splice(s,0,{identifier:l,updater:f,references:1})}a.push(l)}return a}function o(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,o){var i=n(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=r(i[a]);e[s].references--}for(var u=n(t,o),c=0;c<i.length;c++){var p=r(i[c]);0===e[p].references&&(e[p].updater(),e.splice(p,1))}i=u}}},569:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,exports:{}};return t[n](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nc=void 0;var n={};return(()=>{r.d(n,{default:()=>w});var t=r(379),e=r.n(t),o=r(795),i=r.n(o),a=r(569),s=r.n(a),u=r(565),c=r.n(u),p=r(216),l=r.n(p),d=r(589),m=r.n(d),f=r(28),_={};function h(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function v(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?h(Object(r),!0).forEach((function(e){y(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):h(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function A(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function C(t,e,r){return e&&A(t.prototype,e),r&&A(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function y(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}_.styleTagTransform=m(),_.setAttributes=c(),_.insert=s().bind(null,"head"),_.domAPI=i(),_.insertStyleElement=l(),e()(f.Z,_),f.Z&&f.Z.locals&&f.Z.locals;var E=C((function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),y(this,"historyStack",[]),y(this,"eventQueue",[]),y(this,"options",{wrapperId:"terminal___emulator___wrapper",wrapperClassName:"terminal___emulator___wrapper",cursor:"|",cursorId:"terminal___emulator___cursor",cursorClassName:"terminal___emulator___cursor",cursorAnimation:"static",enviroment:void 0}),y(this,"addCommand",(function(t){return r.eventQueue.push({delayAfter:0,command:t}),r})),y(this,"addCommands",(function(t){return t.forEach((function(t){r.eventQueue.push({delayAfter:0,command:t})})),r})),y(this,"pause",(function(t){return r.eventQueue.push({delayAfter:t}),r})),y(this,"echo",(function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"neutral",n=arguments.length>2?arguments[2]:void 0;return r.eventQueue.push({command:{text:"echo "+t,writeSpeed:e,output:t,pauseBeforeOutput:n}}),r})),y(this,"history",(function(){for(var t="",e=0;e<r.historyStack.length&&(t+=e<10?"   ":"  ",t+="".concat(e,"  ").concat(r.historyStack[e].text,"<br></br>"),!(e>=500));e++);return r.eventQueue.push({command:{text:"history",output:t}}),r})),y(this,"clear",(function(){return r})),y(this,"touch",(function(t){return r})),y(this,"mkdir",(function(t){return r})),y(this,"pwd",(function(){})),y(this,"vim",(function(t,e){return r})),y(this,"run",(function(t){r.currentEvent=r.eventQueue.shift(),void 0!==r.currentEvent?void 0!==r.currentEvent.command?(r.historyStack.push(r.currentEvent.command),r.writeToStdout(r.currentEvent.command.text,r.currentEvent.command.writeSpeed,(function(){void 0!==r.currentEvent.command.output?setTimeout((function(){r.removeCursor(),r.writeLineBreakToStdout(),r.writeToStdout(r.currentEvent.command.output,0,(function(){r.writeLineBreakToStdout(),r.writeEnviromentLineToStdout(),r.writeInputLineStartToStdout(),setTimeout((function(){r.appendCursor(),r.run(t)}),r.currentEvent.delayAfter)}))}),r.currentEvent.command.pauseBeforeOutput):(r.writeLineBreakToStdout(),r.writeEnviromentLineToStdout(),r.writeInputLineStartToStdout(),setTimeout((function(){return r.run(t)}),r.currentEvent.delayAfter))}))):setTimeout((function(){r.run(t)}),r.currentEvent.delayAfter):void 0!==t&&t()})),y(this,"removeCursor",(function(){r.cursorElement.remove()})),y(this,"appendCursor",(function(){r.wrapperElement.appendChild(r.cursorElement)})),y(this,"getRandomIntegerInRange",(function(t,e){return Math.floor(Math.random()*(e-t+1)+t)})),y(this,"writeEnviromentLineToStdout",(function(){void 0!==r.options.enviroment&&r.options.enviroment.hostname.length>0&&r.options.enviroment.username.length>0&&(r.wrapperElement.innerHTML+=r.options.enviroment.username+"@"+r.options.enviroment.hostname+":")})),y(this,"writeInputLineStartToStdout",(function(){r.wrapperElement.innerHTML+="$ "})),y(this,"writeLineBreakToStdout",(function(){r.wrapperElement.innerHTML+="<br />"})),y(this,"writeToStdout",(function(t,e,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;0===e?(r.removeCursor(),r.wrapperElement.innerHTML+=t,n()):o<t.length?(r.removeCursor(),r.wrapperElement.innerHTML+=t[o],r.appendCursor(),o++,"neutral"===e?setTimeout((function(){return r.writeToStdout(t,e,n,o)}),r.getRandomIntegerInRange(80,120)):setTimeout((function(){return r.writeToStdout(t,e,n,o)}),e)):n()})),e&&(this.options=v(v({},this.options),e));var n=document.getElementById(this.options.wrapperId);switch(null===n&&((n=document.createElement("div")).id=this.options.wrapperId),this.options.wrapperClassName.length>0&&n.classList.add(this.options.wrapperClassName),this.wrapperElement=n,document.body.appendChild(this.wrapperElement),this.cursorElement=document.createElement("span"),this.cursorElement.id=this.options.cursorId,this.cursorElement.innerText=this.options.cursor,this.options.cursorAnimation){case"fluid":this.cursorElement.classList.add("terminal___cursor___fluid");break;case"static":this.cursorElement.classList.add("terminal___cursor___static");break;case void 0:this.cursorElement.classList.add("terminal___cursor___none")}this.cursorElement.classList.add(this.options.cursorClassName),this.writeEnviromentLineToStdout(),this.writeInputLineStartToStdout(),this.appendCursor()}));const w=E})(),n.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,