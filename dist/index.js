!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.UnixTerminalEmulator=e():t.UnixTerminalEmulator=e()}(self,(()=>(()=>{"use strict";var t={"./src/UnixTerminalEmulator.ts":
/*!*************************************!*\
  !*** ./src/UnixTerminalEmulator.ts ***!
  \*************************************/(t,e,r)=>{r.r(e),r.d(e,{default:()=>u});r(/*! ./styles.css */"./src/styles.css");function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function i(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function s(t,e,r){return e&&i(t.prototype,e),r&&i(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}const u=s((function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),a(this,"historyStack",[]),a(this,"eventQueue",[]),a(this,"options",{wrapperId:"terminal___emulator___wrapper",wrapperClassName:"terminal___emulator___wrapper",cursor:"|",cursorId:"terminal___emulator___cursor",cursorClassName:"terminal___emulator___cursor",cursorAnimation:"static",enviroment:void 0}),a(this,"HISTSIZE",500),a(this,"addCommand",(function(t){return r.eventQueue.push({delayAfter:0,command:t}),r})),a(this,"addCommands",(function(t){return t.forEach((function(t){r.eventQueue.push({delayAfter:0,command:t})})),r})),a(this,"pause",(function(t){return r.eventQueue.push({delayAfter:t}),r})),a(this,"echo",(function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"neutral",n=arguments.length>2?arguments[2]:void 0;return r.eventQueue.push({command:{text:"echo "+t,writeSpeed:e,output:t,pauseBeforeOutput:n}}),r})),a(this,"history",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"neutral",e=arguments.length>1?arguments[1]:void 0;return r.eventQueue.push({command:{text:"history",writeSpeed:t,output:r.getHistoryOutput,pauseBeforeOutput:e}}),r})),a(this,"getHistoryOutput",(function(){for(var t=[],e=0,n=r.historyStack.length;n>0;n--){var o="";if(n<10?o+="&nbsp;&nbsp;&nbsp;&nbsp;":n<100?o+="&nbsp;&nbsp;&nbsp;":n<1e3?o+="&nbsp;&nbsp;":n<1e4&&(o+="&nbsp;"),o+="".concat(n,"&nbsp;&nbsp;").concat(r.historyStack[n-1].text),t.push(o),++e>=r.HISTSIZE)break}return t.reverse().join("<br />")})),a(this,"clear",(function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"neutral",e=arguments.length>1?arguments[1]:void 0;return r.eventQueue.push({command:{text:"clear",writeSpeed:t,pauseBeforeOutput:e},logicAfter:function(){r.wrapperElement.innerHTML="",r.writeNewInputLineToStdout(),r.appendCursor()}}),r})),a(this,"run",(function(t){r.currentEvent=r.eventQueue.shift(),void 0!==r.currentEvent?void 0!==r.currentEvent.command?(r.historyStack.push(r.currentEvent.command),r.writeToStdout(r.currentEvent.command.text,r.currentEvent.command.writeSpeed,(function(){if(void 0!==r.currentEvent.command.output){var e="";e="function"==typeof r.currentEvent.command.output?r.currentEvent.command.output():r.currentEvent.command.output,setTimeout((function(){r.removeCursor(),r.writeLineBreakToStdout(),r.writeToStdout(e,0,(function(){r.writeLineBreakToStdout(),r.writeNewInputLineToStdout(),void 0!==r.currentEvent.logicAfter&&r.currentEvent.logicAfter(),r.appendCursor(),setTimeout((function(){r.run(t)}),r.currentEvent.delayAfter)}))}),r.currentEvent.command.pauseBeforeOutput)}else r.removeCursor(),r.writeLineBreakToStdout(),r.writeNewInputLineToStdout(),r.appendCursor(),void 0!==r.currentEvent.logicAfter&&r.currentEvent.logicAfter(),setTimeout((function(){r.run(t)}),r.currentEvent.delayAfter)}))):setTimeout((function(){r.run(t)}),r.currentEvent.delayAfter):void 0!==t&&t()})),a(this,"removeCursor",(function(){r.cursorElement.remove()})),a(this,"appendCursor",(function(){r.wrapperElement.appendChild(r.cursorElement)})),a(this,"getRandomIntegerInRange",(function(t,e){return Math.floor(Math.random()*(e-t+1)+t)})),a(this,"writeNewInputLineToStdout",(function(){r.writeEnviromentLineToStdout(),r.writeInputLineStartToStdout()})),a(this,"writeEnviromentLineToStdout",(function(){void 0!==r.options.enviroment&&r.options.enviroment.hostname.length>0&&r.options.enviroment.username.length>0&&(r.wrapperElement.innerHTML+=r.options.enviroment.username+"@"+r.options.enviroment.hostname+":")})),a(this,"writeInputLineStartToStdout",(function(){r.wrapperElement.innerHTML+="$ "})),a(this,"writeLineBreakToStdout",(function(){r.wrapperElement.innerHTML+="<br />"})),a(this,"writeToStdout",(function(t,e,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;0===e?(r.removeCursor(),r.wrapperElement.innerHTML+=t,n()):o<t.length?(r.removeCursor(),r.wrapperElement.innerHTML+=t[o],r.appendCursor(),o++,"neutral"===e?setTimeout((function(){return r.writeToStdout(t,e,n,o)}),r.getRandomIntegerInRange(80,120)):setTimeout((function(){return r.writeToStdout(t,e,n,o)}),e)):n()})),e&&(this.options=o(o({},this.options),e));var n=document.getElementById(this.options.wrapperId);switch(null===n&&((n=document.createElement("div")).id=this.options.wrapperId),this.options.wrapperClassName.length>0&&n.classList.add(this.options.wrapperClassName),this.wrapperElement=n,document.body.appendChild(this.wrapperElement),this.cursorElement=document.createElement("span"),this.cursorElement.id=this.options.cursorId,this.cursorElement.innerText=this.options.cursor,this.options.cursorAnimation){case"fluid":this.cursorElement.classList.add("terminal___cursor___fluid");break;case"static":this.cursorElement.classList.add("terminal___cursor___static");break;case void 0:this.cursorElement.classList.add("terminal___cursor___none")}this.cursorElement.classList.add(this.options.cursorClassName),this.writeNewInputLineToStdout(),this.appendCursor()}))},"./src/interfaces.ts":
/*!***************************!*\
  !*** ./src/interfaces.ts ***!
  \***************************/(t,e,r)=>{r.r(e)},"./node_modules/css-loader/dist/cjs.js!./src/styles.css":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/styles.css ***!
  \**************************************************************/(t,e,r)=>{r.r(e),r.d(e,{default:()=>a});var n=r(/*! ../node_modules/css-loader/dist/runtime/sourceMaps.js */"./node_modules/css-loader/dist/runtime/sourceMaps.js"),o=r.n(n),i=r(/*! ../node_modules/css-loader/dist/runtime/api.js */"./node_modules/css-loader/dist/runtime/api.js"),s=r.n(i)()(o());s.push([t.id,"@keyframes terminal___cursor___fluid {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___fluid {\r\n\tanimation: terminal___cursor___fluid 1s infinite;\r\n}\r\n\r\n@keyframes terminal___cursor___static {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t49% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t99% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___static {\r\n\tanimation: terminal___cursor___static 1s infinite;\r\n}\r\n\r\n.terminal___cursor___none {\r\n\tanimation: none;\r\n}\r\n","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;CACC;EACC,aAAa;CACd;CACA;EACC,WAAW;CACZ;CACA;EACC,aAAa;CACd;AACD;AACA;CACC,gDAAgD;AACjD;;AAEA;CACC;EACC,aAAa;CACd;CACA;EACC,aAAa;CACd;CACA;EACC,WAAW;CACZ;CACA;EACC,WAAW;CACZ;CACA;EACC,aAAa;CACd;AACD;AACA;CACC,iDAAiD;AAClD;;AAEA;CACC,eAAe;AAChB",sourcesContent:["@keyframes terminal___cursor___fluid {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___fluid {\r\n\tanimation: terminal___cursor___fluid 1s infinite;\r\n}\r\n\r\n@keyframes terminal___cursor___static {\r\n\t0% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t49% {\r\n\t\topacity: 100%;\r\n\t}\r\n\t50% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t99% {\r\n\t\topacity: 0%;\r\n\t}\r\n\t100% {\r\n\t\topacity: 100%;\r\n\t}\r\n}\r\n.terminal___cursor___static {\r\n\tanimation: terminal___cursor___static 1s infinite;\r\n}\r\n\r\n.terminal___cursor___none {\r\n\tanimation: none;\r\n}\r\n"],sourceRoot:""}]);const a=s},"./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var u=this[a][0];null!=u&&(s[u]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);n&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */"),s=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([i]).join("\n")}return[e].join("\n")}},"./src/styles.css":
/*!************************!*\
  !*** ./src/styles.css ***!
  \************************/(t,e,r)=>{r.r(e),r.d(e,{default:()=>y});var n=r(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),o=r.n(n),i=r(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */"./node_modules/style-loader/dist/runtime/styleDomAPI.js"),s=r.n(i),a=r(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */"./node_modules/style-loader/dist/runtime/insertBySelector.js"),u=r.n(a),c=r(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),l=r.n(c),d=r(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */"./node_modules/style-loader/dist/runtime/insertStyleElement.js"),p=r.n(d),m=r(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */"./node_modules/style-loader/dist/runtime/styleTagTransform.js"),f=r.n(m),_=r(/*! !!../node_modules/css-loader/dist/cjs.js!./styles.css */"./node_modules/css-loader/dist/cjs.js!./src/styles.css"),v={};v.styleTagTransform=f(),v.setAttributes=l(),v.insert=u().bind(null,"head"),v.domAPI=s(),v.insertStyleElement=p();o()(_.default,v);const y=_.default&&_.default.locals?_.default.locals:void 0},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var i={},s=[],a=0;a<t.length;a++){var u=t[a],c=n.base?u[0]+n.base:u[0],l=i[c]||0,d="".concat(c," ").concat(l);i[c]=l+1;var p=r(d),m={css:u[1],media:u[2],sourceMap:u[3],supports:u[4],layer:u[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var f=o(m,n);n.byIndex=a,e.splice(a,0,{identifier:d,updater:f,references:1})}s.push(d)}return s}function o(t,e){var r=e.domAPI(e);r.update(t);return function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,o){var i=n(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=r(i[s]);e[a].references--}for(var u=n(t,o),c=0;c<i.length;c++){var l=r(i[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=u}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,exports:{}};return t[n](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.nc=void 0;var n={};return(()=>{
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
r.r(n),r.d(n,{TerminalCommand:()=>e.TerminalCommand,TerminalOptions:()=>e.TerminalOptions,default:()=>t.default});var t=r(/*! ./UnixTerminalEmulator */"./src/UnixTerminalEmulator.ts"),e=r(/*! ./interfaces */"./src/interfaces.ts")})(),n=n.default})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,